{
  "name": "GerDA 3 v7.2-b2-01",
  "description": "Skripte in Deutsch",
  "scripts": {
    "A_Einstellungen": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: A-Einstellungen\")}\r\n\r\n{_ EDDI EVENT: Discovery scan _________________________________________________________________________ _}\r\n{SetState(\"discovery_scan\", 2)}\r\n\t{_ \t0 = DiscoveryScan - kein Discovery scan, \r\n\t\t2 = DiscoveryScan - alt (bisheriger Scan),\r\n\t\t1 = DiscoveryScan - von Darkcyde (geht z.Z. nicht) _}\r\n\t\t\t\t\t\t\t   \r\n{_ EDDI EVENT: Asteroid prospected ____________________________________________________________________ _}\r\n{SetState(\"minimum_percent\", 10)} \t\r\n\t{_ The minimum percentage surface mineral concentration to report _}\r\n\t{_ Liste, welche Materialien angesagt werden sollen, bitte im Skript mit true/false festlegen _}\r\n\r\n{_ EDDI EVENT: Signal detected ________________________________________________________________________ _} \r\n\t{_ Einstellungen der Ansage bitte im Skript festlegen, true/false _}\r\n\r\n{_ EDDI EVENT: Bodies XXX _____________________________________________________________________________ _} \r\n\t{_ Einstellungen findet man hier: \"Body Mapping Preferences\", true/false _}\r\n\r\n{_ EDDI Fktn.: Body desired materials __________________________________________________________________ _}\r\n{SetState(\"good_materials_included\", 1)}\r\n{SetState(\"max_materials\", 0)}\t\r\n\t{_ Set \"goodmaterialsincluded\" to 1 - \tAnsage von beiden good und great materials, \r\n\t\t\t\t\t\t\t\t\t\t\tsonst nur great material _}\r\n\t{_ Set \"maxmaterials\" to 1 - Ansage materials unter Max-Level, sonst nur unter Wunsch-Level _}\r\n\r\n{_ EDDI Fktn.: Body materials report _____________________________________________________________________ _}\r\n{SetState(\"report_mats\", 1)} \r\n\t{_ Set to 0 if you want to hear about materials below your minimum inventory level _}\r\n    {_ Set to 1 if you want to hear about materials below your desired inventory level _}\r\n    {_ Set to 2 if you want to hear about all materials irrespective of inventory levels _}\r\n\r\n{SetState(\"report_mat_conc\", 1)} \r\n\t{_ Set to 0 if you only want to hear about great material concentrations _}\r\n    {_ Set to 1 if you want to hear about good and great material concentrations _}\r\n    {_ Set to 2 if you want to hear about all material concentrations _}\r\n\r\n{SetState(\"report_mat_percent\", 1)} \r\n\t{_ Set to 0 if you do not want to hear about material percentages _}\r\n    {_ Set to 1 if you only want to hear about great material percentages _}\r\n    {_ Set to 2 if you want to hear about good and great material percentages _}\r\n    {_ Set to 3 if you want to hear about all material percentages _}\r\n    \r\n{_ EDDI EVENT: Body scanned _______________________________________________________________________________ _}\r\n{SetState(\"body_report\", 1)}\r\n\t{_ \t0 = no report, 1 = body report1 (neu etwas kürzer),\r\n\t\t2 = body report (alt) 3 = body report von Darkcyde \r\n\t\t4 = body report summary (Zusammenfassung engl.) _}\r\n\r\n{_ EDDI Fktn.: Body report // Body report1 ________________________________________________________________ _}\r\n{SetState(\"ringe_ansagen\", 1)}\t{_ 0 = keine Ansage, 1 = Ringe ansagen _}\r\n{SetState(\"landen_ansagen\", 1)}\t{_ 0 = keine Ansage, 1 = Landbarkeit ansagen _}\r\n\r\n{_ EDDI Fktn.: Body report v.3.7.2-b1  ____________________________________________________________________ _}\r\n{SetState(\"report_gravity\", 1)}\t\t\t{_ Set to 0 if you don't want to hear about the body's gravity.____ _} \r\n{SetState(\"report_terraform_state\", 1)} {_ Set to 0 if you don't want to hear about the terraform state ... _}\r\n{SetState(\"report_rings\", 1)}          \t{_ Set to 0 if you don't want to hear about the body's rings. ______ _}\r\n{SetState(\"report_rotation\", 0)}       \t{_ Set to 1 if you want to hear about the body's rotation. _________ _}\r\n{SetState(\"report_volcanism\", 1)}      \t{_ Set to 0 if you don't want to hear about the body's volcanism. __ _}\r\n{SetState(\"report_atmosphere\", 0)}     \t{_ Set to 0 if you don't want to hear about the body's atmosphere. _ _}\r\n{SetState(\"report_materials\", 1)}      \t{_ Set to 0 if you don't want to hear about the body's materials. __ _}\r\n{SetState(\"report_scan_value\", 0)}      {_ Set to 1 if you want to hear about the body's estimated value.__ _}\r\n\r\n{_ EDDI EVENT: Ship loadout _______________________________________________________________________________ _}\r\n{_ SetState(\"muni_ansagen\", 0)}\t\t\t{_  0 = nur ansagen wenn entspechendes Modul verbaut\r\n\t\t\t\t\t\t\t\t\t\t\t1 = immer ansagen _}\r\n\r\n{_ EDDI EVENT: Ship refuelled _____________________________________________________________________________ _}\r\n{SetState(\"fuel_ansagen\", 0)}\t\t\t{_ \t0 = alles ansagen (Tonnen/Prozent aufgetankt und Füllstand)\r\n\t\t\t\t\t\t\t\t\t\t\t1 = nur \"Prozent aufgetankt\" ansagen\r\n\t\t\t\t\t\t\t\t\t\t\t2 = nur \"Prozent und/oder Tonnen aufgetankt\" ansagen\r\n\t\t\t\t\t\t\t\t\t\t\t3 = nur aktuellen Füllstand ansagen _}\r\n\r\n{_ EDDI EVENT: Commodity sold ____________________________________________________________________________ _}\r\n{SetState(\"ansage_profit\", 0)}\r\n{SetState(\"ansage_einzelpreis\", 0)}\r\n\r\n{_ EDDI EVENT: Commodity purchased _______________________________________________________________________ _}\r\n{SetState(\"version_short\", 1)}\t\t\t{_ 1 = kurze Version / 0 = lange Version _} \r\n\r\n{_ EDDI EVENT: Cargo _____________________________________________________________________________________ _}\r\n{SetState(\"ansage_frachtraum\", 1)}\t\t\t{_ 1 = Fracht ansagen / 0 = nicht ansagen _}",
      "name": "A_Einstellungen",
      "description": "Setzen von Variablen",
      "default": false,
      "defaultValue": null
    },
    "ADV-Check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: ADV-Check\")}\r\n\r\n{SetState('dockingcomp_installed', false)}\r\n{SetState('dockingcomp_enabled', false)}\r\n{SetState('a-dockingcomputer_installed', false)}\r\n{SetState('a-dockingcomputer_enabled', false)}\r\n{for compartment in ship.compartments:\r\n\t{if compartment.module.name = \"Standard-Landecomputer\": \r\n\t\t{SetState('dockingcomp_installed', true)}\r\n\t\t{if compartment.module.enabled: {SetState('dockingcomp_enabled', true)}\r\n\t\t\t{_ L C verbaut _}\r\n\t\t}\r\n    |elif compartment.module.name = \"Fortschrittlicher Landecomputer\" \r\n\t\t|| compartment.module.name = \"Advanced Docking Computer\":\r\n       \t{SetState('a-dockingcomputer_installed', true)}\r\n\t\t{if compartment.module.enabled: {SetState('a-dockingcomputer_enabled', true)}\r\n\t\t\t{_  F L C verbaut _}\r\n\t\t|else:\r\n\t\t\t{_ manuelles Starten und Landen. _}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n",
      "name": "ADV-Check",
      "description": "Abfrage LC von CMDR Melbar Kaasom",
      "default": false,
      "defaultValue": null
    },
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"Event: AFMU repairs\")}\r\n\r\n{set translate to event.item} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,2)}\r\n{if V=1:{article}} {Modul}\r\n\r\n{if event.repairedfully:\r\n    {if V=1:wurde |else: ist} {Occasionally(3, OneOf('komplett','vollständig'))} repariert\r\n|else:\r\n    {if V=1:ist zu {(event.health*100)}%} funktionsbereit\r\n}\r\n{Occasionally(3, OneOf('und{if V=1: ist} bereit zur re-aktivierung','und ist einsatzbereit'))}\r\n\r\n{_\r\n- item           The module that was repaired\r\n- repairedfully  Whether the module was fully repaired (true/false)\r\n- health         The health of the module (1.000000 = fully repaired)\r\n_}",
      "name": "AFMU repairs",
      "description": "Triggered when repairing modules using the Auto Field Maintenance Unit (AFMU)",
      "default": false,
      "defaultValue": "{event.item} \r\n{if event.repairedfully:\r\n    fully repaired\r\n|else:\r\n    partially repaired \r\n    {Occasionally(2, cat(\r\n        OneOf(\"to \", \"at \"),\r\n        Humanise(event.health * 100),\r\n        \" percent functionality\"\r\n    ))}\r\n}\r\n\r\n{Occasionally(2, \r\n    cat(OneOf(\", \", \"and is\"), \" ready for re-activation\")\r\n)}."
    },
    "Ammo check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Ammo check\")}\r\n\r\n{if state.eddi_multi != \"0\":\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{_ 90/2100 _}\r\n\t{if state.eddi_ammo_multi < state.eddi_multi*2190*10/100 : \r\n\t\tweniger als {state.eddi_multi*2190*10/100} Schuß im Magazin der Mehrfachgeschütze,}\r\n\t|else: Mehrfachgeschütze {state.eddi_ammo_multi} Schuß,}\r\n\t\r\n{if state.eddi_kanonen != \"0\" :\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{_ 5/100 _}\r\n\t{if state.eddi_ammo_kanone < state.eddi_kanonen*105*10/100 : \r\n\t\tweniger als {state.eddi_kanonen*105*10/100} Schuß im Magazin}\r\n\t|else: Kanonen {state.eddi_ammo_kanone} Schuß,}\r\n\r\n{if state.eddi_dueppelw != \"0\":\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{_ 1/10 _}\r\n\t{if state.eddi_ammo_chaff < state.eddi_dueppelw*11*10/100 : \r\n\t\tweniger als {state.eddi_dueppelw*11*10/100} Schuß im Magazin}\r\n\t|else: {state.eddi_ammo_chaff} Düppel,}\r\n\t\r\n{if state.eddi_punktv != \"0\":\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{_ 12/10000 _}\r\n\t{if state.eddi_ammo_points < state.eddi_punktv*10012*10/100 : \r\n\t\tweniger als {state.eddi_punktv*10012*10/100} Schuß im Magazin}\r\n\t|else: Punktverteidigung {state.eddi_ammo_points} Schuß,}\r\n\t\r\n{if state.eddi_heatsinkl != \"0\":\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{_ 1/2 _}\r\n\t{if state.eddi_ammo_heatsinks < 2 : wir haben nur noch einen Kühlkörper zur Verfügung}\r\n\t|else: {state.eddi_ammo_heatsinks} Kühlkörper,}\r\n\r\n{if state.eddi_cellbank != \"0\": \r\n\t{if state.eddi_ammo_cells < 3 : wir können nur noch weniger als 3 Schildzellen nutzen.}\r\n\t|else: {state.eddi_ammo_cells} Schildzellen,}\r\n\r\n{_ ACHTUNG, z.Z. nur eine Ansage, wenn weniger als xx bzw. 10% des Magazins vorhanden sind !\r\nUm den else-Zweig zu nutzen, einfach die letzte geschweifte Klammer im if-Zweig löschen \r\nund ans Ende des else-Zweigs setzen ! _}\r\n",
      "name": "Ammo check",
      "description": "Checks for weapons with consumable ammunition",
      "default": false,
      "defaultValue": null
    },
    "Ammo check Test": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Ammo check\")}\r\n\r\n{SetState('ammo1required', 0)}\r\n{SetState('ammo2required', 0)}\r\n{SetState('ammo3required', 0)}\r\n{SetState('ammo4required', 0)}\r\n{SetState('ammo5required', 0)}\r\n\r\n\r\n{for hardpoint in ship.hardpoints:\r\n\t{if  hardpoint.module.name = \"Mehrfachgeschütz\": {set multi to multi + 1}} \r\n\t{if  hardpoint.module.name = \"Kanone\": {set kanone to kanone + 1}}\r\n\t{if  hardpoint.module.name = \"Schienenkanone\": {set schienen to schienen + 1}}\r\n\t{if  hardpoint.module.name = \"Splitterkanone\": {set splitter to splitter + 1}}\r\n\t{if  hardpoint.module.name = \"Minenwerfer\": {set minenw to minenw + 1}}\r\n\t{if  hardpoint.module.name = \"Schockminenwerfer\": {set schockminenw to schockminenw + 1}}\r\n\t{if  hardpoint.module.name = \"Schienenkanone\": {set rail to rail + 1}}\r\n\t{if  hardpoint.module.name = \"Raketenrampe\": {set rampen to rampen + 1}}\r\n\t{if  hardpoint.module.name = \"Torpedopylon\": {set pylon to pylon + 1}}\r\n\t{if  hardpoint.module.name = \"Düppel-Werfer\": {set düppelw to düppelw  + 1}}\r\n\t{if  hardpoint.module.name = \"Punktverteidigung\": {set punktv to punktv + 1}}\r\n\t{if  hardpoint.module.name = \"Kühlkörperabwurf\": {set kühlkab to kühlkab + 1}}\r\n} {multi} normale Mehrfachgeschütze,\t\t\t\t\t\t\t\t\t\t\t\t\t\t{_ normal 90/2100 _}\r\n{set mumpeln to multi*2190} mit maximal {mumpeln} Schuß \r\n\r\n{for hardpoint in ship.hardpoints:\t\r\n\t{if  hardpoint.module.name = \"Mehrfachgeschütz\":\r\n   \t\t{set mumpeln to mumpeln + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_mumpeln', mumpeln)}\r\n   \t\t{if mumpeln > 0 :\r\n   \t\t\t{if mumpeln > 900 : {OneOf(\"wir haben noch {mumpeln} Schuß im Magazin\",\r\n   \t\t\t\t\t\t\t\t\t\"es sind noch {mumpeln} Schuß vorhanden\")}\r\n   \t\t\t|elif mumpeln > 500 : {OneOf(\"wir haben noch {mumpeln} Schuß im Magazin\",\r\n   \t\t\t\t\t\t\t\t\t\"es sind noch {mumpeln} Schuß vorhanden\")}\r\n   \t\t\t|elif mumpeln > 100 : {OneOf(\"wir haben nur noch {mumpeln} Schuß im Magazin\",\r\n   \t\t\t\t\t\t\t\t\t\"es sind nur noch {mumpeln} Schuß vorhanden,\")}\r\n   \t\t\t\t\t\t\t\t\twir sollten unser Magazin wieder füllen !\r\n   \t\t\t|elif mumpeln > 10 : {OneOf(\"wir haben nur noch {mumpeln} Schuß im Magazin\",\r\n   \t\t\t\t\t\t\t\t\t\"es sind nur noch {mumpeln} Schuß vorhanden,\")}\r\n   \t\t\t\t\t\t\t\t\twir sollten unser Magazin {OneOf(\"unbedingt\", \"so schnell wie möglich\")} \r\n   \t\t\t\t\t\t\t\t\twieder füllen !\t\t\t\t\t\t\r\n   \t\t\t|else: Das Magazin ist leer ! Nur noch {mumpeln} Kugeln {OneOf(\"vorhanden,\", \"im Magazin,\", \"nutzbar,\")}\r\n   \t\t\t}\r\n\t\t}\r\n\t|elif hardpoint.module.name = \"Schockkanone\":\r\n\t\t{if hardpoint.module.ammoinhopper < 240:\r\n\t\t{SetState('ammo2required', 2)}\r\n\t\t}\r\n\t|elif hardpoint.module.name = \"Punktverteidigung\":\r\n\t\t{if hardpoint.module.ammoinhopper < 10000:\r\n\t\t{SetState('ammo3required', 3)}\r\n\t\t}\r\n\t|elif hardpoint.module.name = \"Kühlkörperabwurf\":\r\n\t\t{if hardpoint.module.ammoinhopper < 2:\r\n\t\t{SetState('ammo4required', 4)}\r\n\t\t}\r\n\t|elif hardpoint.module.name = \"Düppel-Werfer\":\r\n\t\t{if hardpoint.module.ammoinhopper < 2:\r\n\t\t{SetState('ammo5required', 5)}\r\n\t\t}\r\n\t} \r\n} \r\n\r\n{if state.ammo1required = 1 :\r\n   Mehrfachgeschütz aufmunitionieren Kom mahnder!   \r\n   {SetState('ammo1required', 0)}\r\n}\r\n{if state.ammo2required = 2 :\r\n     Wir sollten Munition für die Schock Kanone besorgen!\r\n     {SetState('ammo2required', 0)}\r\n}\r\n{if state.ammo3required = 3 :\r\n     Unsere Punktverteidigung benötigt Munition!\r\n     {_ SetState('ammo3required', 0)}\r\n}\r\n{if state.ammo4required = 4 :\r\n     Kühlkörper auffüllen nicht vergessen Kom mahnder!\r\n     {_ SetState('ammo4required', 0)}\r\n}\r\n{if state.ammo5required = 5 :\r\n     Düppel auffüllen nicht vergessen Kom mahnder!\r\n     {_ SetState('ammo5required', 0)}\r\n}",
      "name": "Ammo check Test",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Asteroid cracked": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Asteroid cracked",
      "description": "Triggered when you break up a 'Motherlode' asteroid for mining",
      "default": true,
      "defaultValue": null
    },
    "Asteroid prospected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Asteroid prospected\")}\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{set spokenCores to [\r\n    \"Alexandrit\": false,\r\n    \"Benitoit\": false,\r\n    \"Grandidierit\": false,\r\n    \"Niedrigtemperatur Diamanten\": true,\r\n    \"Tieftemperaturdiamanten\": true,\r\n    \"Monazit\": false,\r\n    \"Musgravit\": false,\r\n    \"Rhodplumsit\": false,\r\n    \"Serendibit\": false,\r\n    \"Leerenopale\": true,\r\n]}\r\n{set spokenMinerals to [\r\n    \"Bauxit\": false,\r\n    \"Bertrandit\": false,\r\n    \"Bromellit\": false,\r\n    \"Cobalt\": false,\r\n    \"Coltan\": false,\r\n    \"Cryolit\": false,\r\n    \"Gallit\": false,\r\n    \"Gold\": false,\r\n    \"Goslarit\": false,\r\n    \"Hydrogen Peroxide\": false,\r\n    \"Indit\": false,\r\n    \"Jadeit\": false,\r\n    \"Lepidolit\": false,\r\n    \"Lithium Hydroxide\": false,\r\n    \"Liquid oxygen\": false,\r\n    \"Niedrigtemperatur Diamanten\": true,\r\n    \"Tieftemperaturdiamanten\": true,\r\n    \"Methane Clathrate\": false,\r\n    \"Methanol Monohydrate\": false,\r\n    \"Moissanit\": false,\r\n    \"Osmium\": false,\r\n    \"Painit\": true,\r\n    \"Platin\": false,\r\n    \"Palladium\": false,\r\n    \"Praseodymium\": false,\r\n    \"Pyrophyllit\": false,\r\n    \"Rutile\": false,\r\n    \"Samarium\": false,\r\n    \"Siber\": false,\r\n    \"Taaffeit\": false,\r\n    \"Thorium\": false,\r\n    \"Tritium\": true,\r\n    \"Uraninit\": false,\r\n    \"Wasser\": false,\r\n]}\r\n\r\n{if len(event.motherlode) > 0 && spokenCores[event.motherlode]:\r\n\tHauptader entdeckt: {event.motherlode}.\r\n}\r\n\r\n{set minerals to []}\r\n{for mineral in event.commodities:\r\n    {if mineral.percentage > state.minimum_percent && spokenMinerals[mineral.commodity]:\r\n        {set mineral_desc to: \r\n            {round(mineral.percentage)} Prozent {mineral.commodity}\r\n        }\r\n        {set minerals to cat(minerals, [mineral_desc])}\r\n    }\r\n}\r\n{if len(minerals) > 0:\r\n    Der Asteroid beinhaltet {List(minerals)},\r\n    {if event.materialcontent = \"High\":\r\n        eine hohe Konzentration von Ingenieurmaterialien\r\n    }.\r\n    {if event.remaining < 100:\r\n        und ist zu {100 - event.remaining} Prozent erschöpft.\r\n    }\r\n}",
      "name": "Asteroid prospected",
      "description": "Triggered when using a prospecting drone",
      "default": false,
      "defaultValue": "{set minimumPercent to 10} {_ The minimum percentage surface mineral concentration to report _}\r\n{set spokenCores to [\r\n    \"Alexandrite\": false,\r\n    \"Benitoite\": false,\r\n    \"Grandidierite\": false,\r\n    \"Low Temperature Diamonds\": true,\r\n    \"Monazite\": false,\r\n    \"Musgravite\": false,\r\n    \"Rhodplumsite\": false,\r\n    \"Serendibite\": false,\r\n    \"Void Opals\": true,\r\n]}\r\n{set spokenMinerals to [\r\n    \"Bauxite\": false,\r\n    \"Bertrandite\": false,\r\n    \"Bromellite\": false,\r\n    \"Cobalt\": false,\r\n    \"Coltan\": false,\r\n    \"Cryolite\": false,\r\n    \"Gallite\": false,\r\n    \"Gold\": false,\r\n    \"Goslarite\": false,\r\n    \"Hydrogen Peroxide\": false,\r\n    \"Indite\": false,\r\n    \"Jadeite\": false,\r\n    \"Lepidolite\": false,\r\n    \"Lithium Hydroxide\": false,\r\n    \"Liquid oxygen\": false,\r\n    \"Low Temperature Diamonds\": true,\r\n    \"Methane Clathrate\": false,\r\n    \"Methanol Monohydrate\": false,\r\n    \"Moissanite\": false,\r\n    \"Osmium\": false,\r\n    \"Painite\": true,\r\n    \"Platinum\": false,\r\n    \"Palladium\": false,\r\n    \"Praseodymium\": false,\r\n    \"Pyrophyllite\": false,\r\n    \"Rutile\": false,\r\n    \"Samarium\": false,\r\n    \"Silver\": false,\r\n    \"Taaffeite\": false,\r\n    \"Thorium\": false,\r\n    \"Tritium\": true,\r\n    \"Uraninite\": false,\r\n    \"Water\": false,\r\n]}\r\n\r\n{if len(event.motherlode) > 0 && spokenCores[event.motherlode]:\r\n   Motherlode detected: {event.motherlode}.\r\n}\r\n\r\n{set minerals to []}\r\n{for mineral in event.commodities:\r\n    {if mineral.percentage > minimumPercent && spokenMinerals[mineral.commodity]:\r\n        {set mineral_desc to: \r\n            {round(mineral.percentage)} percent {mineral.commodity}\r\n        }\r\n        {set minerals to cat(minerals, [mineral_desc])}\r\n    }\r\n}\r\n{if len(minerals) > 0:\r\n    Asteroid contains {List(minerals)}\r\n    {if event.materialcontent = \"High\":\r\n        and a high concentration of engineering materials\r\n    }.\r\n    {if event.remaining < 100:\r\n        It is {100 - event.remaining} percent depleted.\r\n    }\r\n}"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Blueprint make report\")}\r\n\r\n{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        Wir können keinen {blueprintname} herstellen\r\n    |elif canbemade = 1:\r\n        Wir können eine {blueprintname} erstellen\r\n    |else:\r\n        Wir können {canbemade} {blueprintname} herstellen\r\n    }\r\n|else:\r\n    Es sind keine Informationen zum Bauplan {blueprintname} verfügbar\r\n}.\r\n",
      "name": "Blueprint make report",
      "description": "ok! Report on how many of a particular blueprint we can make",
      "default": false,
      "defaultValue": "{_ Fetch from context / state _}\r\n{set blueprintname to state.blueprint}\r\n{set blueprintgrade to state.blueprintgrade}\r\n\r\n{if blueprintname && blueprintgrade:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname, blueprintgrade)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n    {SetState('eddi_context_blueprint_grade', blueprintgrade)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name, state.eddi_context_blueprint_grade)}\r\n}\r\n\r\n{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        You cannot make any {blueprintname} grade {blueprintgrade}\r\n    |elif canbemade = 1:\r\n        You can make one {blueprintname} grade {blueprintgrade}\r\n    |else:\r\n        You can make {blueprintname} grade {blueprintgrade} {Humanise(canbemade)} times.\r\n    }\r\n    \r\n|else:\r\n    No information available on materials required for {blueprintname} grade {blueprintgrade}\r\n}.\r\n"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Blueprint material report\")}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{if blueprint:\r\n    {set materials to len(blueprint.materials)}\r\n    {blueprintname} erfordert \r\n    {if materials = 1:\r\n        {blueprint.materials[0].material}\r\n    |elif materials = 2:\r\n        {blueprint.materials[0].material} und {blueprint.materials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(blueprint.materials):\r\n            {if cur = 0:\r\n                {blueprint.materials[cur].material}\r\n            |elif cur < len(blueprint.materials) - 1:\r\n                , {blueprint.materials[cur].material}\r\n            |else:\r\n                , und {blueprint.materials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    Keine Informationen zu den {if blueprintname:für {blueprintname}} benötigten Materialien vorhanden\r\n}.\r\n",
      "name": "Blueprint material report",
      "description": "ok! Report on the material requirements for a blueprint",
      "default": false,
      "defaultValue": "{_ Fetch from context / state _}\r\n{set blueprintname to state.blueprint}\r\n{set blueprintgrade to state.blueprintgrade}\r\n\r\n{if blueprintname && blueprintgrade:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname, blueprintgrade)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n    {SetState('eddi_context_blueprint_grade', blueprintgrade)}\r\n}\r\n\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname, blueprintgrade)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n    {SetState('eddi_context_blueprint_grade', blueprintgrade)}\r\n}\r\n\r\n{if !blueprint || !blueprintgrade:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name, state.eddi_context_blueprint_grade)}\r\n}\r\n\r\n{if blueprint && blueprintgrade:\r\n    {set materials to len(blueprint.materials)}\r\n    {blueprintname} grade {blueprintgrade} requires \r\n    {if materials = 1:\r\n        {blueprint.materials[0].material}\r\n    |elif materials = 2:\r\n        {blueprint.materials[0].material} and {blueprint.materials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(blueprint.materials):\r\n            {if cur = 0:\r\n                {blueprint.materials[cur].material}\r\n            |elif cur < len(blueprint.materials) - 1:\r\n                , {blueprint.materials[cur].material}\r\n            |else:\r\n                , and {blueprint.materials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    No information available on materials required for {blueprintname} grade {blueprintgrade}\r\n}.\r\n"
    },
    "Bodies Exploration Report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Bodies Exploration Report\")}\r\n\r\n{_ Bodies Exploration Report _}\r\n{_ Report on the current exploration status of the current system. _}\r\n\r\n{_ Preferences _}\r\n{F(\"Body Mapping Preferences\")}\r\n\r\n{_ Fetch from context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Identify bodies worth mapping _}\r\n{set totalBodies to reportSystem.totalbodies}\r\n{set scannedBodies to len(reportSystem.bodies)}\r\n{set toMap to 0}\r\n{set mappedBodies to 0}\r\n\r\n{_ For some reason, on rare occasions the number of system.bodies is greater than it should _}\r\n{_ be when loading, i.e. 23 in a system with only 22 bodies. This tries to fix that. _}\r\n{if scannedBodies > totalBodies: {set scannedBodies to totalBodies}}\r\n\r\n{for body in reportSystem.bodies:\r\n    {if body.mapped :\t\t\t\t\t\t\t\t{set mappedBodies to mappedBodies + 1}\r\n    |elif body.bodyType.invariantName = \"Star\" :\t{set scannedStars to scannedStars + 1}\r\n    |elif body.terraformState.invariantName != \"Not terraformable\":\r\n        {if reportTerraformables:\t\t\t\t\t{set toMap to toMap + 1}\r\n        }\r\n    |elif reportPlanetTypes[body.planetClass.invariantName] || body.estimatedvalue > highValueThreshold:\r\n        {set toMap to toMap + 1}\r\n    }\r\n}\r\n\r\n{if totalBodies > 0: Dieses System wurde\r\n    {if totalBodies = scannedBodies: {set pre to \"aber\"}\r\n    |elif scannedBodies - scannedStars > 0:\r\n        {Occasionally(2, \"nur\")} teilweise\r\n        {set pre to \"und\"}\r\n        {set mid to \"bisher\"}\r\n        {set post to \"schon\"}\r\n    |else: noch nicht\r\n        {set pre to \"so dass\"}\r\n        {set post to \"noch\"}\r\n    }\r\n    gescannt\r\n    \r\n    {if scannedBodies < totalBodies:\r\n        {set remaining to totalBodies - scannedBodies}\r\n        , {if remaining = 1: ein Körper kann |else: {remaining} Körper können} noch gescannt werden\r\n    }\r\n    {if toMap > 0 : , und {if mid: {mid},} {F(\"Bodies to map\")}\r\n    |elif toMap = 0 && mappedBodies > 0 :\r\n        , und alle Körper die es wert sind {mid}, wurden {OneOf(\"gemeppt\", \"kartografiert\", \"vermesssen\")}.\r\n    |else:\t, {pre} {post} keine\r\n        {if totalBodies - scannedStars > 0 : Körper, die das Kartografieren lohnt,\r\n        |else: Körper zum Vermessen\r\n        }\r\n    wurden entdeckt .\r\n    }\r\n}\r\n",
      "name": "Bodies Exploration Report",
      "description": "Report on the current exploration status of the current system.",
      "default": false,
      "defaultValue": null
    },
    "Bodies forgotten to map": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Bodies forgotten to map\")}\r\n\r\n{_ Preferences _}\r\n{F(\"Body Mapping Preferences\")}\r\n\r\n{_ Fetch from Context _}\r\n{set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{_ Identify bodies worth mapping _}\r\n\r\n{set toMapList to []}\r\n{set mappedBodies to 0}\r\n{set totalBodies to 0}\r\n\r\n{for body in reportSystem.bodies:\r\n    {set totalBodies to totalBodies + 1}\r\n    {if body.mapped:\r\n        {set mappedBodies to mappedBodies + 1}\r\n    |else:\r\n        {if body.bodyType.invariantName != \"Stern\":\r\n            {if body.terraformState.invariantName = \"Kandidat zur Terraformierung\" \r\n             || body.terraformState.invariantName = \"Terraformiert\":\r\n                {if reportTerraformables:\r\n                    {if !toMapList[body.shortname]: \r\n                        {set toMapList to cat(toMapList, [body.shortname])}\r\n                    } \r\n                }\r\n            |elif reportPlanetTypes[body.planetClass.invariantName]:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                }\r\n            |elif body.estimatedvalue > highValueThreshold:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(toMapList) > 0:\r\n\r\n    {if len(toMapList) = 1: Objekt |else: Objekte}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(toMapList):\r\n        {toMapList[cur]}\r\n        {set cur to cur + 1}\r\n        {if cur = len(toMapList) - 1: und\r\n        |elif cur < len(toMapList) - 1:,\r\n        }\r\n    }\r\n\r\n    {if len(toMapList) = 1: ist |else: sind }\r\n    {if event.type = \"Body mapped\": {OneOf(\"auch\")} }\r\n    {if len(toMapList) = 1: ein\r\n    {OneOf(\"empfehlenswerter\", \"guter\")}\r\n    |elif  len(toMapList) > 1:\r\n    {OneOf(\"empfehlenswerte\", \"gute\")}\r\n    }\r\n    {set candidates to:\r\n        {if len(toMapList) > 1: Kandidaten |else: Kandidat}\r\n    }\r\n    {OneOf('{candidates} für eine Kartografierung', '{candidates} für eine Vermessung', 'Kartografierungs {candidates}')}.\r\n\r\n    Wir sollten \r\n    {if len(toMapList) = 1: das Objekt |else: die Objekte }\r\n    vor Verlassen des Systems kartografieren.\r\n}\r\n",
      "name": "Bodies forgotten to map",
      "description": "Reminder when jumping out of a system without all bodies mapped",
      "default": false,
      "defaultValue": null
    },
    "Bodies mapped": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Bodies mapped\")}\r\n\r\n{_ Fetch from Context, if a context is set _}\r\n{if state.eddi_context_system_name:\r\n    {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{_ Build a list of scanned bodies _}\r\n\r\n{set mappedList to []}\r\n{for body in reportSystem.bodies:\r\n   {if body.mapped:\r\n       {set mappedList to cat(mappedList, [P(body.shortname, \"body\")])} \r\n   }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(mappedList) > 0:\r\n    {if len(mappedList) = 1: Körper |else: Körper}\r\n    {List(mappedList)}\r\n    {if len(mappedList) = 1: ist |else: sind }\r\n    {set already to Occasionall(2, \"bereits\")}\r\n    {OneOf(\"{already} kartografiert worden.\", \"{already} kartografiert worden.\")}.\r\n|else:\r\n    Wir haben in diesem System noch keinen Körper kartografiert.\r\n}\r\n",
      "name": "Bodies mapped",
      "description": "z.Z nicht genutzt! Check! ! Reports all the bodies mapped in this system so far",
      "default": false,
      "defaultValue": "{_ Fetch from Context, if a context is set _}\r\n{if state.eddi_context_system_name:\r\n    {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{_ Build a list of scanned bodies _}\r\n\r\n{set mappedList to []}\r\n{for body in reportSystem.bodies:\r\n   {if body.mapped:\r\n       {set mappedList to cat(mappedList, [P(body.shortname, \"body\")])} \r\n   }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(mappedList) > 0:\r\n    {if len(mappedList) = 1: Body |else: Bodies}\r\n    {List(mappedList)}\r\n    {if len(mappedList) = 1: has |else: have }\r\n    {set already to Occasionally(2, \"already\")}\r\n    {OneOf(\"{already} been mapped\", \"been mapped {already}\")}.\r\n|else:\r\n    You have yet to map any bodies in this system.\r\n}\r\n"
    },
    "Bodies to map": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Bodies to map\")}\r\n\r\n{_ Preferences _}\r\n{F(\"Body Mapping Preferences\")}\r\n\r\n{_ Fetch from Context _}\r\n{if state.eddi_context_system_name:\r\n    {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{_ Identify bodies worth mapping _}\r\n\r\n{set toMapList to []}\r\n{set mappedBodies to 0}\r\n{set totalBodies to 0}\r\n\r\n{for body in reportSystem.bodies:\r\n    {set totalBodies to totalBodies + 1}\r\n    {if body.mapped:\r\n        {set mappedBodies to mappedBodies + 1}\r\n    |else:\r\n        {if body.bodyType.invariantName != \"Stern\":\r\n            {if body.terraformState.invariantName = \"Kandidat zur Terraformierung\" \r\n             || body.terraformState.invariantName = \"Terraformiert\"\r\n             || body.terraformState.invariantName = \"Terraformierung\":\r\n                {if reportTerraformables:\r\n                    {if !toMapList[body.shortname]: \r\n                        {set toMapList to cat(toMapList, [body.shortname])}\r\n                    } \r\n                }\r\n            |elif reportPlanetTypes[body.planetClass.invariantName]:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                }\r\n            |elif body.estimatedvalue > highValueThreshold:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n{set toMapCount to len(toMapList)}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if toMapCount > 0:\r\n\r\n    {if toMapCount = 1: Körper, |else: Körper,}\r\n\r\n    {set cur to 0}\r\n    {while cur < toMapCount:\r\n        {toMapList[cur]}\r\n        {set cur to cur + 1}\r\n        {if cur = toMapCount - 1: und\r\n        |elif cur < toMapCount - 1:,\r\n        }\r\n    }\r\n\r\n    {if toMapCount = 1: ist |else: sind }\r\n    {if event.type = \"Body mapped\": {OneOf(\"auch\")} }\r\n    {if toMapCount = 1: ein {OneOf(\"empfehlenswerter\", \"guter\")}\r\n    |elif  toMapCount > 1: {OneOf(\"empfehlenswerte\", \"gute\")}\r\n    }\r\n    {set candidates to: {if toMapCount > 1: Kandidaten |else: Kandidat}}\r\n    {OneOf('{candidates} für eine Kartografierung', '{candidates} für eine Vermessung', 'Kartografierungs {candidates}')}.\r\n\r\n|elif mappedBodies > 0:\r\n\r\n    {OneOf(\r\n        \"Wir haben alle {if mappedBodies < totalBodies: {OneOf(\\\"lohnenswerten\\\", \\\"interessanten\\\")}} Körper in diesem System kartografiert.\",\r\n        \"Alle {OneOf( \\\"{if mappedBodies < totalBodies: lohnenswerten} Körper\\\", \\\"interessanten Körper\\\" )} {OneOf( \\\"wurden kartografiert.\\\", \\\"sind jetzt kartografiert.\\\" )}\"\r\n    )}\r\n}",
      "name": "Bodies to map",
      "description": "zu Testen ! Reports all the unmapped bodies in the system that are worth mapping",
      "default": false,
      "defaultValue": "{_ Preferences: _}\r\n\r\n{set reportTerraformables to true}   {_ Reports all terraformable and terraformed bodies _}\r\n{set highValueThreshold to 80000}   {_ The minimum threshold for estimated exploration value worth mapping _}\r\n{set reportPlanetTypes to [\r\n    \"Ammonia world\": true,\r\n    \"Earth-like world\": true,\r\n    \"Gas giant with ammonia based life\": false,\r\n    \"Gas giant with water based life\": false,\r\n    \"Helium gas giant\": false,\r\n    \"Helium-rich gas giant\": false,\r\n    \"High metal content world\": false,\r\n    \"Icy body\": false,\r\n    \"Metal-rich body\": false,\r\n    \"Rocky body\": false,\r\n    \"Rocky ice world\": false,\r\n    \"Class I gas giant\": false,\r\n    \"Class II gas giant\": false,\r\n    \"Class III gas giant\": false,\r\n    \"Class IV gas giant\": false,\r\n    \"Class V gas giant\": false,\r\n    \"Water giant\": false,\r\n    \"Water giant with life\": false,\r\n    \"Water world\": true,\r\n]}\r\n\r\n{_ Fetch from Context, if a context is set _}\r\n{if state.eddi_context_system_name:\r\n    {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{_ Identify bodies worth mapping _}\r\n\r\n{set toMapList to []}\r\n{set mappedBodies to 0}\r\n{set totalBodies to 0}\r\n\r\n{for body in reportSystem.bodies:\r\n    {set totalBodies to totalBodies + 1}\r\n    {if body.mapped:\r\n        {set mappedBodies to mappedBodies + 1}\r\n    |else:\r\n        {if body.bodyType.invariantName != \"Star\":\r\n            {if body.terraformState.invariantName = \"Candidate for terraforming\" \r\n             || body.terraformState.invariantName = \"Terraformed\":\r\n                {if reportTerraformables:\r\n                    {if !toMapList[body.shortname]: \r\n                        {set toMapList to cat(toMapList, [body.shortname])}\r\n                    } \r\n                }\r\n            |elif reportPlanetTypes[body.planetClass.invariantName]:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                }\r\n            |elif body.estimatedvalue > highValueThreshold:\r\n                {if !toMapList[body.shortname]: \r\n                    {set toMapList to cat(toMapList, [body.shortname])}\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n{set toMapCount to len(toMapList)}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if toMapCount > 0:\r\n\r\n    {if toMapCount = 1: Body |else: Bodies}\r\n\r\n    {set cur to 0}\r\n    {while cur < toMapCount:\r\n        {P(toMapList[cur], \"body\")}\r\n        {set cur to cur + 1}\r\n        {if cur = toMapCount - 1: and\r\n        |elif cur < toMapCount - 1:,\r\n        }\r\n    }\r\n\r\n    {if toMapCount = 1: is |else: are }\r\n    {if event.type = \"Body mapped\": \"also\" }\r\n    {if toMapCount = 1: a }\r\n    {OneOf(\"recommended\", \"good\")}\r\n    {set candidates to when(toMapCount = 1, \"candidate\", \"candidates\")}\r\n    {OneOf('{candidates} for mapping', '{candidates} to map', 'mapping {candidates}')}.\r\n\r\n|elif mappedBodies > 0:\r\n\r\n    {OneOf(\r\n        \"You have mapped all {if mappedBodies < totalBodies: {OneOf(\\\"worthwhile\\\", \\\"interesting\\\")}} bodies.\",\r\n        \"All {OneOf( \\\"{if mappedBodies < totalBodies: worthwhile} bodies\\\", \\\"bodies of interest\\\" )} {OneOf( \\\"have been mapped.\\\", \\\"are now mapped.\\\" )}\"\r\n    )}\r\n}"
    },
    "Body atmosphere": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body atmosphere\")}\r\n\r\n{_ Set temperature reporting to Celsius (if set to 1) or Fahrenheit (if set to 0) _}\r\n{set celsius to 1}\r\n\r\n{_ Fetch from context }\r\n{_ set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n\r\n{set reportbody to event}\r\n\r\n{_ Atmosphere _}\r\n\r\n{if reportbody.atmosphere:\r\n   {set atmo to (reportbody.atmosphere)}\r\n   {_ set atmo to join(split(atmo, \"thick \"), \"\")}\r\n   {_ set atmo to join(split(atmo, \"thin \"), \"\")}\r\n   {_ set atmo to join(split(atmo, \" rich\"), \"\")}\r\n   {_ set atmo to join(split(atmo, \" atmosphere\"), \"\")}\r\n\r\n   {  if atmo = \"Ammoniak\"                      \t\t: {set atmo to \"Ammoniak\"}\r\n   |elif atmo = \"Ammoniakreich\"                   \t\t: {set atmo to \"Ammoniak reich\"}\r\n   |elif atmo = \"Ammoniak und Sauerstoff\"            \t: {set atmo to \"Ammoniak und Sauerstoff\"}\r\n   |elif atmo = \"AmmoniaOxygen\"            \t\t\t\t: {set atmo to \"Ammoniak und Sauerstoff\"}\r\n   |elif atmo = \"Argon\"                         \t\t: {set atmo to \"Argon\"}\r\n   |elif atmo = \"Argonreich\"                         \t: {set atmo to \"Argon reich\"}\r\n   |elif atmo = \"Kohlendioxid\"                \t\t\t: {set atmo to \"Kohlendioxid\"}\r\n   |elif atmo = \"Kohlendioxidreich\"            \t\t\t: {set atmo to \"Kohlendioxidreich\"}\r\n   |elif atmo = \"Helium\"                        \t\t: {set atmo to \"Helium\"}\r\n   |elif atmo = \"Metallischer Dampf\"               \t\t: {set atmo to \"Metalldampf\"}\r\n   |elif atmo = \"Methan\"                       \t\t\t: {set atmo to \"Methan\"}\r\n   |elif atmo = \"Methanreich\"                       \t: {set atmo to \"Methanreich\"}\r\n   |elif atmo = \"Neon\"                          \t\t: {set atmo to \"Neon\"}\r\n   |elif atmo = \"Neonreich\"                          \t: {set atmo to \"Neonreich\"}\r\n   |elif atmo = \"Stickstoff\"                      \t\t: {set atmo to \"Stickstoff\"}\r\n   |elif atmo = \"Stickstoffreich\"            \t\t\t: {set atmo to \"Stickstoffreich\"}\r\n   |elif atmo = \"Sauerstoff\"                        \t: {set atmo to \"Sauerstoff\"}\r\n   |elif atmo = \"Silikatdampf\"               \t\t\t: {set atmo to \"Silikatdampf\"}\r\n   |elif atmo = \"Schwefeldioxid\"               \t\t\t: {set atmo to \"Schwefeldioxid\"}\r\n   |elif atmo = \"Wasser\"                         \t\t: {set atmo to \"Wasser\"}\r\n   |elif atmo = \"Wasserstoff\"                         \t: {set atmo to \"Wasserstoff\"}\r\n   |elif atmo = \"Wasserreich\"                    \t\t: {set atmo to \"wasserreich\"}\r\n   |elif atmo = \"Geeignet für wasserbasiertes Leben\"\t: {set atmo to \"für Wasser basiertes Leben geeignet\"}\r\n   |elif atmo = \"Geeignet für ammoniakbasiertes Leben\"\t: {set atmo to \"für Ammoniak basiertes Leben geeignet\"}\r\n   |elif atmo = \"Gasriese\" \t\t\t\t\t\t\t\t: {set atmo to \"gasförmig\"}\r\n   |else                                        \t\t: {set atmo to (reportbody.atmosphere)}\r\n   }\r\n|else : {set atmo to []}\r\n}\r\n\r\n{if find(reportbody.planettype, \"Gasriese\") >= 0:\r\n\r\n   {  if find(reportbody.planettype, \"Wasserriese\") >= 0 :\r\n      Dies ist ein h 2 o Gas-Riese.\r\n\r\n   |elif  find(reportbody.planettype, \"Klasse\") >= 0:\r\n\r\n      {set V to rand(1,3)}\r\n      {set sudarsky to Occasionally(3, \"Suddarski\")}\r\n      { set roman to token(reportbody.planettype, \" \", 1)}\r\n      {  if roman = \"I\"  :\r\n         {set class to: {if V<2: 1 |else: erster}} {set gas_temp to \"weniger als 150\"}\r\n         {set composition to: und eine{if V<2:r} dichte{if V<2:n} Wolkenschicht aus gasförmigem Amm moniak}\r\n      |elif roman = \"II\" :\r\n         {set class to: {if V<2: 2 |else: zweiter}} {set gas_temp to \"ca. 250\"}\r\n         {set composition to: und eine{if V<2:r} dichte{if V<2:n} Wolkenschicht aus Wasserdampf}\r\n      |elif roman = \"III\":\r\n         {set class to: {if V<2: 3 |else: dritter}} {set gas_temp to \"rund 600\"}\r\n         {set composition to: , bei de{if V<2:m |else:nen} keine Wolkenbildung durch gaasförmige Elemente vorkommt}\r\n      |elif roman = \"IV\" :\r\n         {set class to: {if V<2: 4 |else: vierter}} {set gas_temp to \"rund 1000\"}\r\n         {set composition to: und eine{if V<2:r} dichte{if V<2:n} Wolkenschicht aus Alkalimetall Dämpfen}\r\n      |elif roman = \"V\"  :\r\n         {set class to: {if V<2: 5 |else: fünfter}} {set gas_temp to \"über 1500\"}\r\n         {set composition to: und eine{if V<2:r} dichte{if V<2:n} Wolkenschicht aus Silikaten und Eisen}\r\n      |else: Fehler bei Klasse: {reportbody.planettype} roman: {roman}\r\n      }\r\n      {  if V<2: Es handet sich um einen {sudarsky} Klasse {class} Gasriesen mit\r\n      |elif V<3: Typisch für {sudarsky} Gasriesen {class} Klasse sind\r\n      |else    : Gasriesen {class} Klasse wie dieser hier haben}\r\n      Oberflächentemperaturen von {gas_temp} Grad Kelvin {composition}.\r\n   }\r\n\r\n|elif reportbody.pressure <= 0.001 || len(atmo) = 0 || !atmo:\r\n   {OneOf(\"Objekt ist frei von jeglicher Atmosphäre\",\r\n          \"Es wird keine{Occasionally(3, 'rlei')} Atmosphäre {OneOf('registriert','angezeigt','festgestellt')}\",\r\n          \"Wenn dieses Objekt jemals eine Atmosphäre hatte, ist sie über die Jahre verloren gegangen\")}.\r\n\r\n|else: \r\n   {set press to (reportbody.pressure / 1.01325)}\r\n   {  if press <    0.1 : {set pressdesc to OneOf(\"spuren hafte\", \"extrem dünne\")}\r\n   |elif press <    0.25: {set pressdesc to \"sehr dünne\"}\r\n   |elif press <    0.5 : {set pressdesc to \"dünne\"}\r\n   |elif press <    2   : {set pressdesc to \"\"}\r\n   |elif press <   10   : {set pressdesc to \"dicke\"}\r\n   |elif press <   50   : {set pressdesc to OneOf(\"dichte\", \"sehr dicke\")}\r\n   |elif press <  100   : {set pressdesc to OneOf(\"sehr dichte\", \"extrem dicke\")}\r\n   |elif press >= 100   : {set pressdesc to OneOf(\"komprimierte\", \"extrem dichte\")}\r\n   }\r\n  \r\n   {if find(reportbody.atmosphere, \"rich\") >= 0:\r\n      {set element to lcase(join(split(atmo, \"heiß \"), \"\"))}\r\n      {set element to lcase(join(split(atmo, \"heißes \"), \"\"))}\r\n      {set element to lcase(join(split(atmo, \"heißem \"), \"\"))}\r\n      {set desc to OneOf(\"{reportbody.name} hat eine\", \"Detektiere eine\", \"Sensoren zeigen eine\")}\r\n      {OneOf(\"{desc} {pressdesc} {element} Atmosphäre\", \r\n             \"Die {pressdesc} Atmosphäre ist äußerst {element}reich\", \r\n             \"Die {pressdesc} Atmosphäre ist reich an {element}\",\r\n             \"Die {pressdesc} Atmosphäre enthält hohe Anteile an {element} Gas\")}\r\n\r\n   |elif find(atmo, \"dampf\") >= 0:\r\n      {set atmo to token(atmo, \"dampf\", \" dampf\")}\r\n      {OneOf(\"Die {pressdesc} Atmosphäre setzt sich zusammen aus {atmo}\",\r\n             \"Die {pressdesc} Atmosphäre ist reich an {atmo}\",\r\n             \"Die {pressdesc} Atmosphäre enthält höhere Anteile an {atmo}\")}\r\n\r\n   |elif atmo = \"Wasser\":\r\n      Es ist\r\n      {OneOf(\"ein Ozeanplanet\", \"ein {planettype}\")}\r\n\r\n   |elif atmo = \"für wasser basiertes Leben geeignet\":\r\n      Es ist\r\n      {OneOf(\"eine Meereswelt\", \"ein {planettype}\")},\r\n      geeignet für Wasser basierendes Leben\r\n\r\n   |else:\r\n      {set mostly to OneOf(\"primär\", \"hauptsächlich\", \"größtenteils\", \"zu großen Teilen\")}\r\n      {OneOf(\"Die {pressdesc} Atmosphäre besteht {mostly} aus\", \"Der Hauptbestandteil der {if pressdesc:{pressdesc}n} Atmosphäre ist\")}\r\n      {if atmo = \"Kohlendioxidreich\": Kohlendioxid |else: {atmo}}\r\n   }\r\n\r\n   mit einem Oberflächendruck von {set value to round(press,1)}\r\n   {if value = 1: eihner Atmosphäre |else: {F(\"Humanise ValueGer\")} Atmosphären}\r\n   {if reportbody.temperature:\r\n      und einer durchschnittlichen Temperatur von\r\n      {if celsius:\r\n         {set value to round(reportbody.temperature - 273.15)} {F(\"Humanise ValueGer\")}\r\n         Grad Celsius.\r\n      |elif !celsius:\r\n         {set value to (reportbody.temperature * 1.8 - 459.67)} {F(\"Humanise ValueGer\")}\r\n         Grad Fahrenheit.\r\n      }\r\n   }\r\n}",
      "name": "Body atmosphere",
      "description": "Report on the atmosphere of a body",
      "default": false,
      "defaultValue": null
    },
    "Body atmosphere report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAtmoPressure to 0}   {_ Set to 1 if you want to hear about the atmospheric pressure. _}\r\n{set reportAtmoTempScale to 0}  {_ Set to 0 if you want to hear about temperatures in Kelvin _}\r\n                                {_ Set to 1 if you want to hear about temperatures in Celsius _}\r\n                                {_ Set to 2 if you want to hear about temperatures in Fahrenheit _}\r\n                                {_ Set to 3 if you don't want to hear about the temperature of the body _}\r\n\r\n{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {round(kelvin - 273)}}\r\n{set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32)}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportAtmoTempScale = 0: {round(kelvin)}}\r\n    {if reportAtmoTempScale = 1: {ToCelsius(kelvin)}}\r\n    {if reportAtmoTempScale = 2: {ToFahrenheit(kelvin)}}\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{if reportAtmoTempScale = 0: {set tempscale to: Kelvin}}\r\n{if reportAtmoTempScale = 1: {set tempscale to: degrees Celsius}}\r\n{if reportAtmoTempScale = 2: {set tempscale to: degrees Fahrenheit}}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n\r\n|else:\r\n\r\n    {if find(reportbody.planettype, \"giant\") >= 0:\r\n        {if find(reportbody.planettype, \"Class\") >= 0: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-ski\")}\r\n        }\r\n        {set planetdesc to OneOf(\"{sudarsky} Gas giants like this one have\", \"This {sudarsky} gas giant has\")}\r\n        {if find(reportbody.planettype, \"Class V\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperatures above {Humanise(tempmin)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"vaporized silicates and iron\", \"silicate and iron vapors\")}.\r\n        |elif find(reportbody.planettype, \"Class IV\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(354)}}\r\n                {set tempmax to: {TempCalc(903)}}\r\n                temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"alkali metals vapors\", \"vaporized alkali metals\")}.   \r\n        |elif find(reportbody.planettype, \"Class III\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(251)}}\r\n                {set tempmax to: {TempCalc(353)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale},\r\n            }\r\n            a temperature at which {OneOf(\"no gaseous elements will form any clouds\", \"suitable chemicals are not present in the atmosphere to form a sustained cloud layer\", \"the atmosphere cannot sustain a persistent cloud layer\")}.\r\n        |elif find(reportbody.planettype, \"Class II\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(154)}}\r\n                {set tempmax to: {TempCalc(250)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of water vapors.  \r\n        |elif find(reportbody.planettype, \"Class I\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(153)}}\r\n                {set tempmax to: {TempCalc(83)}}\r\n                surface temperatures of {Humanise(tempmax)} {tempscale} {Occasionally(2, OneOf(\", or less,\", \", at most,\"))} {OneOf(\"and\", \"with\", \"forming\")}\r\n             }\r\n             a dense cloud layer of ammonia vapor.  \r\n        }\r\n\r\n    |elif reportbody.atmosphere = \"No atmosphere\" || !reportbody.atmosphere:\r\n        {Occasionally(4, OneOf(\"There is no atmosphere.\", \"It is devoid of any atmosphere.\", \"The years have scoured it clean of any atmosphere.\"))}\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            The surface temperature averages\r\n            {TempCalc(reportbody.temperature)} {tempscale}.\r\n        }\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"trace gas\", \"super thin\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"very thin\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"thin\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"thick\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"dense\", \"very thick\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"very dense\", \"super thick\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"crushing\", \"super dense\")}\r\n        }\r\n        {if find(reportbody.atmosphere, \"-rich\") >= 0:\r\n            {set element to token(reportbody.atmosphere, \"-rich\", \"\")}\r\n            {set desc to OneOf(\"I detect a \", \"There is a \", \"Sensors detect a\")}\r\n            {OneOf(\"{desc} {pressdesc} {reportbody.atmosphere} atmosphere\", \"The {pressdesc} atmosphere is {reportbody.atmosphere}\", \"The {pressdesc} atmosphere is rich in {element}\")}\r\n        |elif find(reportbody.atmosphere, \"vapour\") >= 0:\r\n            {OneOf(\"The {pressdesc} atmosphere is composed of {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere is rich in {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere contains high levels of {reportbody.atmosphere}s\")}\r\n        |elif reportbody.planetClass.invariantName = \"Earth-like world\":\r\n            The atmosphere is similar to Earth's, \r\n        |else:\r\n            {set mostly to OneOf(\"primarily\", \"mainly\", \"mostly\")}\r\n            {OneOf(\"The {pressdesc} atmosphere is composed {mostly} of\", \"Most prevalent in the {pressdesc} atmosphere is\")}\r\n            {reportbody.atmosphere}\r\n        }\r\n        { if reportAtmoPressure > 0:\r\n            with a surface pressure of {Humanise(reportbody.pressure)} Earth atmospheres\r\n        }\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            {if find(temp, \"-\") >= 0: \r\n                {set temp to cat(temp*-1, tempscale, \"below zero\")}\r\n            |else:\r\n                {set temp to cat(temp, tempscale)}\r\n            }\r\n            with an average surface temperature of {temp}\r\n        }.\r\n    }\r\n}\r\n\r\n{Log(\"EDDI Fktn.: Body atmosphere report\")}\r\n",
      "name": "Body atmosphere report",
      "description": "z.Z. nicht genutzt ! Report on the atmosphere of the contextual body",
      "default": false,
      "defaultValue": "{_ Preferences _}\r\n{set reportAtmoPressure to 0}   {_ Set to 1 if you want to hear about the atmospheric pressure. _}\r\n{set reportAtmoTempScale to 0}  {_ Set to 0 if you want to hear about temperatures in Kelvin _}\r\n                                {_ Set to 1 if you want to hear about temperatures in Celsius _}\r\n                                {_ Set to 2 if you want to hear about temperatures in Fahrenheit _}\r\n                                {_ Set to 3 if you don't want to hear about the temperature of the body _}\r\n\r\n{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {round(kelvin - 273)}}\r\n{set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32)}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportAtmoTempScale = 0: {round(kelvin)}}\r\n    {if reportAtmoTempScale = 1: {ToCelsius(kelvin)}}\r\n    {if reportAtmoTempScale = 2: {ToFahrenheit(kelvin)}}\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{if reportAtmoTempScale = 0: {set tempscale to: Kelvin}}\r\n{if reportAtmoTempScale = 1: {set tempscale to: degrees Celsius}}\r\n{if reportAtmoTempScale = 2: {set tempscale to: degrees Fahrenheit}}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n\r\n|else:\r\n\r\n    {if find(reportbody.planettype, \"giant\") >= 0:\r\n        {if find(reportbody.planettype, \"Class\") >= 0: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-ski\")}\r\n        }\r\n        {set planetdesc to OneOf(\"{sudarsky} Gas giants like this one have\", \"This {sudarsky} gas giant has\")}\r\n        {if find(reportbody.planettype, \"Class V\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperatures above {Humanise(tempmin)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"vaporized silicates and iron\", \"silicate and iron vapors\")}.\r\n        |elif find(reportbody.planettype, \"Class IV\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(354)}}\r\n                {set tempmax to: {TempCalc(903)}}\r\n                temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"alkali metals vapors\", \"vaporized alkali metals\")}.   \r\n        |elif find(reportbody.planettype, \"Class III\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(251)}}\r\n                {set tempmax to: {TempCalc(353)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale},\r\n            }\r\n            a temperature at which {OneOf(\"no gaseous elements will form any clouds\", \"suitable chemicals are not present in the atmosphere to form a sustained cloud layer\", \"the atmosphere cannot sustain a persistent cloud layer\")}.\r\n        |elif find(reportbody.planettype, \"Class II\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(154)}}\r\n                {set tempmax to: {TempCalc(250)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of water vapors.  \r\n        |elif find(reportbody.planettype, \"Class I\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(153)}}\r\n                {set tempmax to: {TempCalc(83)}}\r\n                surface temperatures of {Humanise(tempmax)} {tempscale} {Occasionally(2, OneOf(\", or less,\", \", at most,\"))} {OneOf(\"and\", \"with\", \"forming\")}\r\n             }\r\n             a dense cloud layer of ammonia vapor.  \r\n        }\r\n\r\n    |elif reportbody.atmosphere = \"No atmosphere\" || !reportbody.atmosphere:\r\n        {Occasionally(4, OneOf(\"There is no atmosphere.\", \"It is devoid of any atmosphere.\", \"The years have scoured it clean of any atmosphere.\"))}\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            The surface temperature averages\r\n            {TempCalc(reportbody.temperature)} {tempscale}.\r\n        }\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"trace gas\", \"super thin\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"very thin\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"thin\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"thick\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"dense\", \"very thick\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"very dense\", \"super thick\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"crushing\", \"super dense\")}\r\n        }\r\n        {if find(reportbody.atmosphere, \"-rich\") >= 0:\r\n            {set element to token(reportbody.atmosphere, \"-rich\", \"\")}\r\n            {set desc to OneOf(\"I detect a \", \"There is a \", \"Sensors detect a\")}\r\n            {OneOf(\"{desc} {pressdesc} {reportbody.atmosphere} atmosphere\", \"The {pressdesc} atmosphere is {reportbody.atmosphere}\", \"The {pressdesc} atmosphere is rich in {element}\")}\r\n        |elif find(reportbody.atmosphere, \"vapour\") >= 0:\r\n            {OneOf(\"The {pressdesc} atmosphere is composed of {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere is rich in {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere contains high levels of {reportbody.atmosphere}s\")}\r\n        |elif reportbody.planetClass.invariantName = \"Earth-like world\":\r\n            The atmosphere is similar to Earth's, \r\n        |else:\r\n            {set mostly to OneOf(\"primarily\", \"mainly\", \"mostly\")}\r\n            {OneOf(\"The {pressdesc} atmosphere is composed {mostly} of\", \"Most prevalent in the {pressdesc} atmosphere is\")}\r\n            {reportbody.atmosphere}\r\n        }\r\n        { if reportAtmoPressure > 0:\r\n            with a surface pressure of {Humanise(reportbody.pressure)} Earth atmospheres\r\n        }\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            {if find(temp, \"-\") >= 0: \r\n                {set temp to cat(temp*-1, tempscale, \"below zero\")}\r\n            |else:\r\n                {set temp to cat(temp, tempscale)}\r\n            }\r\n            with an average surface temperature of {temp}\r\n        }.\r\n    }\r\n}"
    },
    "Body compare": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "    {if reportbody.radius || reportbody.earthmass:\r\n        {set compare(stat) to:\r\n            {  if stat > 0.95 && stat < 1.05 : {OneOf(\"annähernd\",\"grob\",\"nahezu\",\"in etwa\")}\r\n            |elif stat > 1                   : {set value to stat} de{if compare_earthmass:r |else:m} {F(\"Humanise ValueGer\")} fachen\r\n            |elif stat < 1                   : {if stat > 0.89 : {OneOf(\"geringfügig\",\"nur etwas\")}} weniger als\r\n            }\r\n            {  if stat < 0.01 : ein{if dativ:em} %\r\n            |elif stat < 0.1  : 10%\r\n            |elif stat < 0.2  : ein{if dativ:em} fünftel\r\n            |elif stat < 0.3  : ein{if dativ:em} drittel\r\n            |elif stat < 0.4  : 40%\r\n            |elif stat < 0.5  : der Hälfte\r\n            |elif stat < 0.6  : zwei drittel\r\n            |elif stat < 0.7  : 70%\r\n            |elif stat < 0.8  : 80%\r\n            |elif stat < 0.9  : 90%\r\n            }\r\n            {set dativ to []}\r\n        }\r\n    }\r\n\r\n    {_ Radius _}\r\n    {if reportbody.radius:\r\n        {set value to reportbody.radius}\r\n        {if eventdata: {set value to value / 1}} \t\t\t\t\t\t\t\t{_ Convert radius if data is from event as this is in meters1_}\r\n        {set compare_radius to round(value / 6371.1)} {set value to round(value,1)}\r\n        {OneOf(\"{PersPron} weist einen Radius von {F('Humanise ValueGer')} Kilometern auf\",\r\n               \"{OneOf('{PossArt}','{RelaPron}')} Radius beträgt {F('Humanise ValueGer')} Kilometer\")}\r\n        , was {set dativ to true} {compare(compare_radius)} {OneOf(\"des Radius der Erde\",\"des Erd Radius\")} entspricht\r\n    }\r\n    \r\n    {_ Earth Mass _}\r\n    {if reportbody.earthmass: {set compare_earthmass to round(reportbody.earthmass,1)}\r\n        {if reportbody.radius : , bei {set dativ to true} \r\n        |else                 : {PersPron} hat\r\n        }\r\n        {compare(compare_earthmass)} Erd Masse.\r\n    }\r\n\r\n    {if reportbody.rotationalperiod && !reportbody.tidallylocked:\r\n        {PersPron} hat eine\r\n        {  if reportbody.rotationalperiod < -20.0 : hohe gegenläufige\r\n        |elif reportbody.rotationalperiod <  -0.5 : gegenläufige\r\n        |elif reportbody.rotationalperiod <   0   : verkürzt gegenläufige\r\n        |elif reportbody.rotationalperiod <=  0.5 : schnelle\r\n        |elif reportbody.rotationalperiod >  20.0 : langsame\r\n        }\r\n        Rotationszeit von\r\n        {if round(reportbody.rotationalperiod, 1) =  1 || \r\n            round(reportbody.rotationalperiod, 1) = -1 : einem Tag\r\n        |else                                          : {set value to abs(round(reportbody.rotationalperiod, 1))} {F(\"Humanise ValueGer\")} Tagen\r\n        }.\r\n    }\r\n    \r\n{Log(\"EDDI Fktn.: Body compare\")}    ",
      "name": "Body compare",
      "description": "z.Z. nicht genutzt ! Vergleich mit der Erde",
      "default": false,
      "defaultValue": null
    },
    "Body desired materials": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body desired materials\")}\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody:\r\n    {set reportbody to event}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    Ich bin {OneOf(\"nicht sicher\",\"unsicher\")}\r\n    welches Objekt {OneOf(\"Sie meinen\",\"gemeint ist\")}.\r\n|else:\r\n    {set desiredmaterials to []}\r\n    {for material in reportbody.materials:\r\n       {set percent to material.percentage}\r\n       {set material to MaterialDetails(material.name)}\r\n       {set inventory to _inventory(material.name)}\r\n       {if inventory:\r\n           {if !state.max_materials && inventory.desired && inventory.desired > inventory.amount:\r\n               {if !state.good_materials_included && percent >= MaterialDetails(material.name).greatpctbody:\r\n                  {set under to inventory.desired - inventory.amount}\r\n                  {if under >= 1 :\r\n                      {set desiredmaterials to cat(desiredmaterials, [material])}\r\n                  }\r\n               |elif state.good_materials_included && percent >= MaterialDetails(material.name).goodpctbody:\r\n                  {set under to inventory.desired - inventory.amount}\r\n                  {if under >= 1 :\r\n                      {set desiredmaterials to cat(desiredmaterials, [material])}\r\n                  }\r\n               }\r\n           |elif state.max_materials && inventory.maximum && inventory.maximum > inventory.amount:\r\n               {if !state.good_materials_included && percent >= MaterialDetails(material.name).greatpctbody:\r\n                  {set under to inventory.maximum - inventory.amount}\r\n                  {if under >= 1 :\r\n                      {set desiredmaterials to cat(desiredmaterials, [material])}\r\n                  }\r\n               |elif state.good_materials_included && percent >= MaterialDetails(material.name).goodpctbody:\r\n                  {set under to inventory.maximum - inventory.amount}\r\n                  {if under >= 1 :\r\n                      {set desiredmaterials to cat(desiredmaterials, [material])}\r\n                  }\r\n              }\r\n           |elif inventory.maximum:\r\n               {_ do nothing (chks if material amount is above \"maximum\" threshold only) _}\r\n           |elif inventory.desired:\r\n               {_ do nothing (chks if material amount is above \"desired\" threshold only) _}\r\n           |elif inventory.minimum :\r\n               {_ do nothing (chks if material amount is above \"minimum\" threshold only) _}\r\n           |else:\r\n               {_ do nothing (no threshold has been set in the EDDI app) _}\r\n           }\r\n       }\r\n    }\r\n\r\n    {_ Respond if materials are found which meet the desired criteria. _}\r\n\r\n    {if len(desiredmaterials) > 0 :\r\n\r\n       {set stop to OneOf(\"stopp\", \"land\")}\r\n       {OneOf(\"Ich schlage vor hier zu {stop}en\", \"Ich empfehle zu {stop}en\", \"Wir sollten hier {stop}en\")} \r\n       um\r\n \r\n       {if len(desiredmaterials) > 0 :\r\n          {if len(desiredmaterials) = 1 :\r\n             {desiredmaterials[0].name}\r\n          |elif len(desiredmaterials) = 2 :\r\n             {desiredmaterials[0].name} and {desiredmaterials[1].name}\r\n          |else:\r\n             {set cur to 0}\r\n             {while cur < len(desiredmaterials):\r\n                {if cur = 0 :\r\n                   {desiredmaterials[cur].name}\r\n                |elif cur < len(desiredmaterials) - 1 :\r\n                   , {desiredmaterials[cur].name}\r\n                |else:\r\n                   , und {desiredmaterials[cur].name}\r\n                }\r\n                {set cur to cur + 1}\r\n             }\r\n          }\r\n       }\r\n      {OneOf(\"ein zu sammeln\", \"auf zu nehmen\")}\r\n    }\r\n}",
      "name": "Body desired materials",
      "description": "Function to report desired materials after a body scan",
      "default": false,
      "defaultValue": null
    },
    "Body mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Body mapped\")}\r\n\r\n{set recommendOtherMapping to 1}  {_ 0 or 1. If 1, recommends other bodies from the `Bodies to map` script _}\r\n\r\nDie Kartografierung\r\n{Occasionally(2, \"des Objekts {event.name}\")}\r\n{OneOf(\"ist\", \"ist jetzt\")}\r\n{OneOf(\"komplett\", \"abgeschlossen\")}.\r\n\r\n{set reportbody to BodyDetails(event.name)}\r\n\r\n{set planettype to bodyclass}\r\n\r\n{if reportbody.planettype = \"Welt mit hohem Metallgehalt\" && reportbody.terraformstate = \"Kandidat zur Terraformierung\" :\r\n       {set lowvalue to 683116}\r\n       {set lowdiffer to 519168}\r\n       {set highvalue to 1971272}\r\n       {set highdiffer to 1545008}\r\n|elif reportbody.planettype = \"Wasserwelt\" && reportbody.terraformstate = \"Kandidat zur Terraformierung\" :\r\n       {set lowvalue to 1119231}\r\n       {set lowdiffer to 850615}\r\n       {set highvalue to 3229773}\r\n       {set highdiffer to 2531373}\r\n|elif reportbody.planettype = \"Wasserwelt\":\r\n       {set lowvalue to 415613}\r\n       {set lowdiffer to 315866}\r\n       {set highvalue to 1199337}\r\n       {set highdiffer to 939994}\r\n|elif reportbody.planettype = \"Erdähnliche Welt\":\r\n       {set lowvalue to 1126206}\r\n       {set lowdiffer to 855916}\r\n       {set highvalue to 3249900}\r\n       {set highdiffer to 2547147}\r\n|elif reportbody.planettype = \"Ammoniakwelt\":\r\n       {set lowvalue to 597762}\r\n       {set lowdiffer to 454299}\r\n       {set highvalue to 1724965}\r\n       {set highdiffer to 1351961}\r\n|elif reportbody.planettype = \"Metallreicher Körper\":\r\n       {set lowvalue to 131802}\r\n       {set lowdiffer to 100170}\r\n       {set highvalue to 380341}\r\n       {set highdiffer to 298097}\r\n|elif reportbody.planettype = \"Felsiger Körper\" && reportbody.terraformstate = \"Kandidat zur Terraformierung\" :\r\n       {set lowvalue to 539601}\r\n       {set lowdiffer to 410097}\r\n       {set highvalue to 1557130}\r\n       {set highdiffer to 1220419}\r\n|elif reportbody.planettype= \"Klasse II Gasriese\":\r\n       {set lowvalue to 118354}\r\n       {set lowdiffer to 89949}\r\n       {set highvalue to 341536}\r\n       {set highdiffer to 267683}\r\n}\r\n\r\n{if lowvalue:\r\n   {SetState(\"systemlowvalue\", state.systemlowvalue + lowdiffer)}\r\n   {SetState(\"systemhighvalue\", state.systemhighvalue + highdiffer)}\r\n\r\n   {Pause(300)}\r\n   Glückwunsch.\r\n   {if reportbody.planettype = \"Erdähnliche Welt\":\r\n      {OneOf(\"Diese Erfassung\", \"Diese Kartografierung\", \"{reportbody.planettype} {reportbody.bodytype}\")}\r\n      ist {OneOf(\"typischerweise\", \"normalerweise\")} zwischen {set value to (lowvalue)} {F(\"Humanise ValueGer\")} und\r\n      {set value to (highvalue)} {F(\"Humanise ValueGer\")} credditts wert.\r\n   |elif reportbody.planettype = \"Ammoniakwelt\":\r\n      {OneOf(\"Diese Erfassung\", \"Diese Kartografierung\", \"{reportbody.planettype} {reportbody.bodytype}\")}\r\n      ist {OneOf(\"typischerweise\", \"normalerweise\")} zwischen {set value to (lowvalue)} {F(\"Humanise ValueGer\")} und\r\n      {set value to (highvalue)} {F(\"Humanise ValueGer\")} credditts wert.\r\n   |elif reportbody.planettype = \"Klasse II Gasriese\":\r\n      {OneOf(\"Diese Erfassung\", \"Diese Kartografierung\", \"{reportbody.planettype} {reportbody.bodytype}\")}\r\n      ist {OneOf(\"typischerweise\", \"normalerweise\")} zwischen {set value to (lowvalue)} {F(\"Humanise ValueGer\")} und\r\n      {set value to (highvalue)} {F(\"Humanise ValueGer\")} credditts wert.\r\n   |else:\r\n      {OneOf(\"Diese Erfassung\", \"Diese Kartografierung\", \"Dieses Objekt, {reportbody.planettype} und {reportbody.terraformstate},\")}\r\n      ist {OneOf(\"typischerweise\", \"normalerweise\", \"circa\", \"schätzungsweise\")} {set value to (event.estimatedvalue)} {F(\"Humanise ValueGer\")} credditts wert.\r\n   }\r\n}\r\n\r\n{if event.probesused <= event.efficiencytarget:\r\n    Effizienzbonus {OneOf(\"bekommen\", \"erhalten\")}.\r\n}\r\n\r\n{if recommendOtherMapping: \r\n    {Pause(500)}\r\n    {F(\"Bodies to map\")}\r\n}\r\n\r\n{_\r\n- bodyname\t\t\t\t\t\tThe name of the body that has been scanned\r\n- systemname\t\t \t\t\tThe name of the system containing the scanned body\r\n- shortname \t\t\t\t\tThe short name of the body, less the system name\r\n- planettype\t\t \t\t\tThe type of body that has been scanned (High metal content body etc)\r\n- gravity \t\t\t\t\t\tThe surface gravity of the body that has been scanned, relative to Earth's gravity\r\n- gravityprobability \t\t\tThe cumulative probability describing the body's gravity, relative to other bodies of the same planet type\r\n- earthmass \t\t\t\t\tThe mass of the body that has been scanned, relative to Earth's mass\r\n- massprobability \t\t\t\tThe cumulative probability describing the body's mass, relative to other bodies of the same planet type\r\n- radius \t\t\t\t\t\tThe radius of the body that has been scanned, in kilometres\r\n- radiusprobability \t\t\tThe cumulative probability describing the body's radius, relative to other bodies of the same planet type\r\n- temperature \t\t\t\t\tThe surface temperature of the body that has been scanned, in Kelvin (only available if DSS equipped)\r\n- tempprobability \t\t\t\tThe cumulative probability describing the body's temperature, relative to other bodies of the same planet type\r\n- pressure \t\t\t\t\t\tThe surface pressure of the body that has been scanned, in Earth atmospheres (only available if DSS equipped)\r\n- pressureprobability \t\t\tThe cumulative probability describing the body's atmospheric pressure, relative to other bodies of the same planet type\r\n- tidallylocked \t\t\t\tTrue if the body is tidally locked (only available if DSS equipped)\r\n- landable \t\t\t\t\t\tTrue if the body is landable (only available if DSS equipped)\r\n- atmosphere \t\t\t\t\tThe atmosphere of the body that has been scanned (only available if DSS equipped)\r\n- atmospherecompositions \t\tThe composition of the atmosphere of the body that has been scanned (array of AtmosphereComposition objects) (only available if DSS equipped)\r\n- solidcompositions \t\t\tThe composition of the body's solids that has been scanned (array of SolidComposition objects) (only available if DSS equipped)\r\n- volcanism \t\t\t\t\tThe volcanism of the body that has been scanned (only available if DSS equipped)\r\n- density \t\t\t\t\t\tThe average density of the body, in kg per cubic meter\r\n- densityprobability \t\t\tThe cumulative probability describing the body's density, relative to other bodies of the same planet type\r\n- distance \t\t\t\t\t\tThe distance in LS from the main star\r\n- orbitalperiod \t\t\t\tThe number of days taken for a full orbit of the main star\r\n- orbitalperiodprobability \t\tThe cumulative probability describing the body's orbital period, relative to other bodies of the same planettype\r\n- rotationalperiod \t\t\t\tThe number of days taken for a full rotation\r\n- rotationalperiodprobability \tThe cumulative probability describing the body's rotational period, relative to other bodies of the same planettype\r\n- semimajoraxis \t\t\t\tThe semi major axis of the body's orbit, in light seconds\r\n- semimajoraxisprobability \t\tThe cumulative probability describing the body's semi-major axis, relative to other bodies of the same planet type\r\n- eccentricity \t\t\t\t\tThe orbital eccentricity of the body\r\n- eccentricityprobability \t\tThe cumulative probability describing the body's orbital eccentricity, relative to other bodies of the same planet type\r\n- inclination \t\t\t\t\tThe orbital inclination of the body, in degrees\r\n- inclinationprobability \t\tThe cumulative probability describing the body's orbital inclination, relative to other bodies of the same planet type\r\n- periapsis \t\t\t\t\tThe argument of periapsis of the body, in degrees\r\n- periapsisprobability \t\t\tThe cumulative probability describing the body's argument of periapsis, relative to other bodies of the same planet type\r\n- rings \t\t\t\t\t\tA list of the body's rings (as ring objects)\r\n- reserves \t\t\t\t\t\tThe level of reserves in the rings if applicable (Pristine/Major/Common/Low/Depleted)\r\n- materials \t\t\t\t\tA list of materials present on the body that has been scanned\r\n- terraformstate \t\t\t\tWhether the body can be, is in the process of, or has been terraformed (only available if DSS equipped)\r\n- tilt \t\t\t\t\t\t\tAxial tilt for the body, in degrees (only available if DSS equipped)\r\n- tiltprobability \t\t\t\tThe cumulative probability describing the body's orbital tilt, relative to other bodies of the same planet type\r\n- estimatedvalue \t\t\t\tThe estimated value of the current scan\r\n- alreadydiscovered \t\t\tWhether this body's scan data has already been registered with Universal Cartographics\r\n- alreadymapped \t\t\t\tWhether this body's map data has already been registered with Universal Cartographics\r\n- probesused \t\t\t\t\tThe number of probes used to map the body\r\n- efficiencytarget \t\t\t\tThe efficiency target for the number of probes used to map the body\r\n_}",
      "name": "Body mapped",
      "description": "Triggered after mapping a body with the Surface Area Analysis scanner",
      "default": false,
      "defaultValue": "{_ Preferences _}\r\n\r\n{set bodyReport to 2}             {_ 0 = No body report, 1 = Summary body report, 2 = Body report _}\r\n{set recommendOtherMapping to 1}  {_ 0 or 1. If 1, recommends other bodies from the `Bodies to map` script _}\r\n\r\n{_ Context}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n{_ Process the event _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\r\n    {Pause(3000)}\r\n\r\n    {OneOf(\"Mapping\", \"{Occasionally(2, \\\"Surface\\\")} Map\")}\r\n    {OneOf(\"is\", \"is now\")}\r\n    {OneOf(\"complete\", \"finished\")}.\r\n\r\n    {if event.probesused <= event.efficiencytarget:\r\n        Efficiency bonus {OneOf(\"awarded\", \"granted\")}.\r\n    }\r\n\r\n    {Pause(500)}\r\n    {if bodyReport = 2:\r\n        {F(\"Body report\")}\r\n    |elif bodyReport = 1:\r\n        {F(\"Body report summary\")}\r\n    }\r\n\r\n    {if recommendOtherMapping: \r\n        {Pause(1500)}\r\n        {F(\"Bodies to map\")}\r\n    }\r\n}"
    },
    "Body Mapping Preferences": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body Mapping Preferences\")}\r\n\r\n{_ Body Mapping Preferences _}\r\n{_ Used to centralise reporting preferences that are used in various scripts_}\r\n\r\n{set reportTerraformables to true}   {_ Reports all terraformable and terraformed bodies _}\r\n{set highValueThreshold to 30000}    {_ The minimum threshold for estimated exploration value worth mapping _}\r\n{set reportNoBodiesToMap to true}    {_ Report when no mappable bodies found in a system _}\r\n{set reportPlanetTypes to [\r\n    \"Ammoniakwelt\": true,\r\n    \"Erdähnliche Welt\": true,\r\n    \"Gasriese mit ammoniakbasiertem Leben\": false,\r\n    \"Gasriese mit wasserbasiertem Leben\": false,\r\n    \"Heliumgasriese\": false,\r\n    \"Heliumreicher Gasriese\": false,\r\n    \"Welt mit hohem Metallgehalt\": true,\r\n    \"Eisiger Körper\": false,\r\n    \"Metallreicher Körper\": true,\r\n    \"Felsiger Körper\": false,\r\n    \"Felsige Eiswelt\": false,\r\n    \"Klasse I Gasriese\": false,\r\n    \"Klasse II Gasriese\": false,\r\n    \"Klasse III Gasriese\": false,\r\n    \"Klasse IV Gasriese\": false,\r\n    \"Klasse V Gasriese\": false,\r\n    \"Wasserriese\": false,\r\n    \"Wasserriese mit Leben\": false,\r\n    \"Wasserwelt\": true,\r\n]}\r\n",
      "name": "Body Mapping Preferences",
      "description": "Used to centralise reporting preferences that are used in various scripts",
      "default": false,
      "defaultValue": null
    },
    "Body materials": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body materials\")}\n\n{_ Fetch from context }\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\n{if !reportbody:\n    {set reportbody to event}\n}\n\n        {set goodmaterials to []}\n        {set greatmaterials to []}\n        {for material in reportbody.materials:\n            {if material.percentage >= MaterialDetails(material.material).greatpctbody:\n                {set greatmaterials to cat(greatmaterials, [material])}\n            |elif material.percentage >= MaterialDetails(material.material).goodpctbody:\n                {set goodmaterials to cat(goodmaterials, [material])}\n            }\n        }\n\n        {if len(greatmaterials) > 0:\n            \n            Dieser Planet enthält eine\n            {OneOf(\"sehr\", \"ungewöhnlich\", \"außergewöhnlich\")}\n            {OneOf(\"hohe\", \"gute\")}\n            {OneOf(\"Anzahl\", \"Konzentration\", \"Ansammlung\")}\n            von\n            {if len(greatmaterials) = 1:\n                {greatmaterials[0].material}\n            |elif len(greatmaterials) = 2:\n                {greatmaterials[0].material} und {greatmaterials[1].material}\n            |else:\n                {set cur to 0}\n                {while cur < len(greatmaterials):\n                    {if cur = 0:\n                        {greatmaterials[cur].material}\n                    |elif cur < len(greatmaterials) - 1:\n                        , {greatmaterials[cur].material}\n                    |else:\n                        , und {greatmaterials[cur].material}\n                    }\n                    {set cur to cur + 1}\n                }\n            }\n        }\n        {if len(goodmaterials) > 0:\n            {if len(greatmaterials) > 0:\n                und eine\n                {OneOf(\"hohe\", \"gute\")}\n                {OneOf(\"Anzahl\", \"Konzentration\")}\n                von\n            |else:\n                Dieser Planet enthält eine\n                {OneOf(\"hohe\", \"gute\")}\n                {OneOf(\"Anzahl\", \"Konzentration\")}\n                von\n            }\n            {if len(goodmaterials) = 1:\n                {goodmaterials[0].material}.\n            |elif len(goodmaterials) = 2:\n                {goodmaterials[0].material} und {goodmaterials[1].material}.\n            |else:\n                {set cur to 0}\n                {while cur < len(goodmaterials):\n                    {if cur = 0:\n                        {goodmaterials[cur].material}\n                    |elif cur < len(goodmaterials) - 1:\n                        , {goodmaterials[cur].material}\n                    |else:\n                        , und {goodmaterials[cur].material}\n                    }\n                    {set cur to cur + 1}\n                }.\n            }\n        }\n\n{F('Body desired materials')}\n\n\n",
      "name": "Body materials",
      "description": "Function to report on the materials of a scanned body",
      "default": false,
      "defaultValue": null
    },
    "Body materials report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body materials report\")}\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody:  {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\": Welchen {OneOf(\"Himmelskörper\", \"Planet oder Mond\", \"Körper\")} meinst Du ?\r\n|else:\r\n\r\n\t{_ Define a function to obtain a material from inventory}\r\n    {set _inventory(required) to:\r\n        {for material in materials:\r\n            {if material.material = required : {return material}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportbody.landable:\r\n\r\n        {set goodmaterials to []}\r\n        {set greatmaterials to []}\r\n        {set othermaterials to []}\r\n\r\n        {for material in reportbody.materials:\r\n            {set inventoryMat to _inventory(material.material)}\r\n            {if (state.report_mats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n             || (state.report_mats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n             || (state.report_mats >= 2) :\r\n                {if material.percentage >= material.definition.greatpctbody && state.report_mat_conc > -1 :\r\n                    {set greatmaterials to cat(greatmaterials, [material])}\r\n                |elif material.percentage >= material.definition.goodpctbody && state.report_mat_conc > 0 :\r\n                    {set goodmaterials to cat(goodmaterials, [material])}\r\n                |elif state.report_mat_conc > 1 :\r\n                    {set othermaterials to cat(othermaterials, [material])}\r\n                }\r\n            }\r\n        }\r\n\r\n        {_ Start speaking _}\r\n        {if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(othermaterials) > 0 :\r\n            {if reportbody.name = reportbody.shortname: {OneOf(\"{reportbody.shortname}\", \"{F('Body Name Tidy')}{body}\")}\r\n            |else: {OneOf(\"Dieser Himmelskörper\", cat(\"Objekt, \", reportbody.shortname, \", \", \"dieser Körper \"))} \r\n            }\r\n            {OneOf(\"beinhaltet\", \"verfügt über\")}            \t\r\n            \r\n        }\r\n\r\n        {if len(greatmaterials) > 0 :\r\n            {OneOf(\"sehr große Mengen an\", \"sehr viele Vorkommen an\", \"sehr große Lagerstätten von\")} \r\n            {set cur to 0}\r\n            {set length to len(greatmaterials) - 1}\r\n            {while cur < len(greatmaterials):\r\n                {P(greatmaterials[cur].definition.name)}\r\n                {if state.report_mat_percent > 0 : circa {round(greatmaterials[cur].percentage, 1)}% }\r\n                {set cur to cur + 1}\r\n                {if cur = length: und\r\n                |elif cur < length: ,\r\n                }\r\n            }\r\n  \r\n            {if len(goodmaterials) > 0 && len(othermaterials) = 0 : und\r\n            |elif len(goodmaterials) > 0 || len(othermaterials) > 0 : ,\r\n            }\r\n        }\r\n\r\n        {if len(goodmaterials) > 0 :\r\n            {OneOf(\"große Mengen an\", \"viele Vorkommen an\", \"große Lagerstätten von\")}\r\n            {set cur to 0}\r\n            {set length to len(goodmaterials) - 1}\r\n            {while cur < len(goodmaterials):\r\n                {goodmaterials[cur].definition.name}\r\n                {if state.report_mat_percent > 1 : circa {round(goodmaterials[cur].percentage, 1)}% }\r\n                {set cur to cur + 1}\r\n                {if cur = length: und\r\n                |elif cur < length: ,\r\n                }\r\n            }\r\n        }\r\n   \r\n        {if (len(greatmaterials) > 0 || len(goodmaterials) > 0) && len(othermaterials) > 0 : und\r\n        }\r\n  \r\n        {if len(othermaterials) > 0 :\r\n            {OneOf(\"geringe Mengen an\", \"ein paar Vorkommen an\", \"wenige Vorkommen an\", \"kleine Lagerstätten von\")}\r\n            {set cur to 0}\r\n            {set length to len(othermaterials) - 1}\r\n            {while cur < len(othermaterials):\r\n                {othermaterials[cur].definition.name}\r\n                {if state.report_mat_percent > 2 : circa {round(othermaterials[cur].percentage, 0)}% }\r\n                {set cur to cur + 1}\r\n                {if cur = length: und\r\n                |elif cur < length: ,\r\n                }\r\n            }\r\n        }\r\n   \r\n        {if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(othermaterials) > 0 : .\r\n        }\r\n    }\r\n}",
      "name": "Body materials report",
      "description": "zu testen ! Report on the materials available from the contextual body",
      "default": false,
      "defaultValue": "{_ Preferences _}\r\n{set reportMats to 1} {_ Set to 0 if you want to hear about materials below your minimum inventory level _}\r\n                      {_ Set to 1 if you want to hear about materials below your desired inventory level _}\r\n                      {_ Set to 2 if you want to hear about all materials irrespective of inventory levels _}\r\n\r\n{set reportMatConc to 1} {_ Set to 0 if you only want to hear about great material concentrations _}\r\n                         {_ Set to 1 if you want to hear about good and great material concentrations _}\r\n                         {_ Set to 2 if you want to hear about all material concentrations _}\r\n\r\n{set reportMatPercent to 1} {_ Set to 0 if you do not want to hear about material percentages _}\r\n                            {_ Set to 1 if you only want to hear about great material percentages _}\r\n                            {_ Set to 2 if you want to hear about good and great material percentages _}\r\n                            {_ Set to 3 if you want to hear about all material percentages _}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    Which body are you\r\n    {OneOf(\"asking about\",\"referring to\")}?\r\n\r\n|else:\r\n\r\n    {_ Define a function to obtain a material from inventory}\r\n    {set _inventory(required) to:\r\n        {for material in materials:\r\n            {if material.material = required:\r\n                {return material}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportbody.landable:\r\n\r\n        {set goodmaterials to []}\r\n        {set greatmaterials to []}\r\n        {set othermaterials to []}\r\n\r\n        {for material in reportbody.materials:\r\n            {set inventoryMat to _inventory(material.material)}\r\n            {if (reportMats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n             || (reportMats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n             || (reportMats >= 2):\r\n                {if material.percentage >= material.definition.greatpctbody && reportMatConc > -1:\r\n                    {set greatmaterials to cat(greatmaterials, [material])}\r\n                |elif material.percentage >= material.definition.goodpctbody && reportMatConc > 0:\r\n                    {set goodmaterials to cat(goodmaterials, [material])}\r\n                |elif reportMatConc > 1:\r\n                    {set othermaterials to cat(othermaterials, [material])}\r\n                }\r\n            }\r\n        }\r\n\r\n        {_ Start speaking _}\r\n\r\n        {if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(othermaterials) > 0:\r\n            {if reportbody.name = reportbody.shortname:\r\n                {P(reportbody.shortname, \"body\")}\r\n            |else:\r\n                {OneOf(\"This body\", cat(\"Body \", P(reportbody.shortname, \"body\")))} \r\n            }\r\n            {OneOf(\"contains\", \"has\")}\r\n        }\r\n\r\n        {if len(greatmaterials) > 0:\r\n            {OneOf(\"very high levels\", \"very large deposits\")} of\r\n            {set cur to 0}\n            {set length to len(greatmaterials) - 1}\n            {while cur < len(greatmaterials):\n                {greatmaterials[cur].definition.name}\n                {if reportMatPercent > 0: at {round(greatmaterials[cur].percentage, 1)}% }\n                {set cur to cur + 1}\n                {if cur = length: and\n                |elif cur < length:,\n                }\n            }\r\n  \r\n            {if len(goodmaterials) > 0 && len(othermaterials) = 0:\r\n                and\r\n            |elif len(goodmaterials) > 0 || len(othermaterials) > 0:\r\n                ,\r\n            }\r\n        }\r\n\r\n        {if len(goodmaterials) > 0:\r\n            {OneOf(\"high levels\", \"large deposits\")} of\r\n            {set cur to 0}\n            {set length to len(goodmaterials) - 1}\n            {while cur < len(goodmaterials):\n                {goodmaterials[cur].definition.name}\n                {if reportMatPercent > 1: at {round(goodmaterials[cur].percentage, 1)}% }\n                {set cur to cur + 1}\n                {if cur = length: and\n                |elif cur < length:,\n                }\n            }\r\n        }\r\n   \r\n        {if (len(greatmaterials) > 0 || len(goodmaterials) > 0) && len(othermaterials) > 0:\r\n            and\r\n        }\r\n  \r\n        {if len(othermaterials) > 0:\r\n            {OneOf(\"moderate levels\", \"modest deposits\")} of\r\n            {set cur to 0}\n            {set length to len(othermaterials) - 1}\n            {while cur < len(othermaterials):\n                {othermaterials[cur].definition.name}\n                {if reportMatPercent > 2: at {round(othermaterials[cur].percentage, 0)}% }\n                {set cur to cur + 1}\n                {if cur = length: and\n                |elif cur < length:,\n                }\n            }\r\n        }\r\n   \r\n        {if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(othermaterials) > 0:\r\n            .\r\n        }\r\n    }\r\n}"
    },
    "Body Name Tidy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Body Name Tidy _}\r\n{_ Tidy up body names _}\r\n{_ If the body name contains the system name, it is removed _}\r\n{_ Adds Star, Planet, or Moon depending on body location within the system _}\r\n{_ Corrects pronounciation of letters in body names. No more 'hour' for 'h' with some TTS voices _}\r\n{_ Returns 'body' for use in other scripts _}\r\n\r\n{Log(\"EDDI Fktn.: Body Name Tidy\")}\r\n\r\n{if event.name:\r\n    {set body to event.name}\r\n    {set system to system.name}\r\n|elif reportbody.stellarclass: \r\n    {set body to state.eddi_context_star_star}\r\n    {set system to state.eddi_context_star_system}\r\n|else:\r\n    {set body to state.eddi_context_body_name}\r\n    {set system to state.eddi_context_body_system}\r\n}\r\n\r\n{if (!find(body, system)) && (body != system):\r\n    {set body to slice(body, len(system)+1)}\r\n\r\n    {_ Add body type _}\r\n    {if len(body) < 3:\r\n        {if ord(body) > 64:\r\n            {set body to cat(\"Stern \", body)}\r\n        |else:\r\n            {set body to OneOf(cat(\"Planet \", body), cat(\"der \", body,\". Planet\"))}\r\n        }\r\n    |elif len(body) < 5 && ord(body) > 64:\r\n        {set body to cat(\"Planet \", body)}\r\n    |elif !find(body, \"belt\"):\r\n        {set body to cat(\"Mond \", body)}\r\n    }\r\n}\r\n\r\n{  if body = system:\r\n    {set body to \"Das Primärgestirn\"}\r\n|else:\r\n\r\n   {_ exchange the last letter}\r\n\r\n   {set idx to len(body)-1}\r\n   {set chk to ucase(slice(body, idx-1, 1))}\r\n   {if chk = \"-\" || chk = \" \":\r\n      {set chk to ucase(slice(body, idx, 1))}\r\n      {set part to slice(body, 0, (idx))}\r\n   \r\n      {  if chk = \"A\": {set chk to \"Alpha\"}\r\n      |elif chk = \"B\": {set chk to \"Bravo\"}\r\n      |elif chk = \"C\": {set chk to \"Charlie\"}\r\n      |elif chk = \"D\": {set chk to \"Delta\"}\r\n      |elif chk = \"E\": {set chk to \"Ecko\"}\r\n      |elif chk = \"F\": {set chk to \"Foxtrott\"}\r\n      |elif chk = \"G\": {set chk to \"Golf\"}\r\n      |elif chk = \"H\": {set chk to \"Hotel\"}\r\n      |elif chk = \"I\": {set chk to \"India\"}\r\n      |elif chk = \"J\": {set chk to \"Juliett\"}\r\n      |elif chk = \"K\": {set chk to \"Kilo\"}\r\n      |elif chk = \"L\": {set chk to \"Lima\"}\r\n      |elif chk = \"M\": {set chk to \"Mike\"}\r\n      |elif chk = \"N\": {set chk to \"November\"}\r\n      |elif chk = \"O\": {set chk to \"Oscar\"}\r\n      |elif chk = \"P\": {set chk to \"Pappa\"}\r\n      |elif chk = \"Q\": {set chk to \"Quebec\"}\r\n      |elif chk = \"R\": {set chk to \"Romeo\"}\r\n      |elif chk = \"S\": {set chk to \"Sierra\"}\r\n      |elif chk = \"T\": {set chk to \"Tango\"}\r\n      |elif chk = \"U\": {set chk to \"Juniform\"}\r\n      |elif chk = \"V\": {set chk to \"Victor\"}\r\n      |elif chk = \"W\": {set chk to \"Whiskey\"}\r\n      |elif chk = \"X\": {set chk to \"X-ray\"}\r\n      |elif chk = \"Y\": {set chk to \"Yankee\"}\r\n      |elif chk = \"Z\": {set chk to \"Zulu\"}\r\n      |else          : {set chk to []}\r\n      }\r\n\r\n      {if chk:\r\n          {set body to cat(part,chk)}\r\n      }\r\n\r\n      {if find(body, \".\") > -1:\r\n          {set dot to []}\r\n          {set dot to split(body,\".\")}\r\n          {set body to cat(dot[0],\" \",dot[1],\" \",dot[2])}\r\n      }\r\n   }\r\n}",
      "name": "Body Name Tidy",
      "description": "OK ! Function to shorten body names, and pronounce body name letters",
      "default": false,
      "defaultValue": null
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body report\")}\r\n\r\n{_ SetState('eddi_context_body_system', \"Sol\")}\r\n{_ SetState('eddi_context_body_name', \"Earth\")}\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: {set reportbody to BodyDetails(state.eddi_context_body_name)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\" : Bitte das astronomische Objekt spezifizieren.\r\n|else:\r\n\r\n    {  if reportbody.planettype = \"Metallreicher Körper\"               \t: {set planettype to \"Metall reiches Objekt\"}                \t{set article to \"das\"}\r\n    |elif reportbody.planettype = \"Welt mit hohem Metallgehalt\"         : {set planettype to \"Planet mit hochwertigen Metallen\"}        {set article to \"der\"}\r\n    |elif reportbody.planettype = \"Felsiger Körper\"                     : {set planettype to \"felsiger Körper\"}                      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Eisiger Körper\"                      : {set planettype to \"Eisplanet\"}                            \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Felsige Eiswelt\"                   \t: {set planettype to \"felsiger Eisplanet\"}                   \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Erdähnliche Welt\"                 \t: {set planettype to \"erd ähnlicher Planet\"}            \t \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Wasserwelt\"                      \t: {set planettype to \"Wasserwelt\"}                           \t{set article to \"die\"}\r\n    |elif reportbody.planettype = \"Ammoniakwelt\"                    \t: {set planettype to \"Ammoniak Welt\"}                        \t{set article to \"die\"}\r\n    |elif reportbody.planettype = \"Wasserriese\"                      \t: {set planettype to \"Wasserriese\"}                          \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Wasserriese mit Leben\"           \t: {set planettype to \"belebter Wasserriese\"}                 \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Gasriese mit wasserbasiertem Leben\"  : {set planettype to \"Gasriese mit wasserbasiertem Leben\"}   \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Gasriese mit ammoniakbasiertem Leben\": {set planettype to \"Gasriese mit ammoniakbasiertem Leben\"} \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse I Gasriese\"                \t: {set planettype to \"Klasse Eins Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse II Gasriese\"              \t: {set planettype to \"Klasse Zwei Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse III Gasriese\"              \t: {set planettype to \"Klasse Drei Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse IV Gasriese\"              \t: {set planettype to \"Klasse Vier Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse V Gasriese\"              \t\t: {set planettype to \"Klasse Fünf Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class I gas giant\"       \t: {set planettype to \"Sudarskie Klasse Eins Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class II gas giant\"      \t: {set planettype to \"Sudarskie Klasse Zwei Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class III gas giant\"     \t: {set planettype to \"Sudarskie Klasse Drei Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class IV gas giant\"      \t: {set planettype to \"Sudarskie Klasse Vier Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class V gas giant\"       \t: {set planettype to \"Sudarskie Klasse Fünf Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Heliumreicher Gasriese\"            \t: {set planettype to \"Helium reicher Gas Riese\"}\t\t      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Heliumgasriese\"                 \t\t: {set planettype to \"Helium Gas Riese\"}                        {set article to \"der\"}\r\n    |else                                                            \t: Fehler! \"planettype\" nicht gefunden: {reportbody.planettype}  {set article to []}\r\n    }\r\n\r\n    {  if article = \"der\": {set PossArt to \"Sein\"} {set PersPron to \"Er\"}  {set RelaPron to \"Dessen\"}\r\n    |elif article = \"die\": {set PossArt to \"Ihr\"}  {set PersPron to \"Sie\"} {set RelaPron to \"Deren\"}\r\n    |elif article = \"das\": {set PossArt to \"Sein\"} {set PersPron to \"Es\"}  {set RelaPron to \"Dessen\"}\r\n    |else                : Fehler! Artikel nicht belegt: ({ article })\r\n    }\r\n\r\n    {if find(lcase(planettype), \"riese\")  > 0 :\r\n\r\n        {_ Radius _}\r\n        {  if reportbody.radius < 15000 : {set radius to \"winzige\"}\r\n        |elif reportbody.radius < 20000 : {set radius to \"sehr kleine\"}\r\n        |elif reportbody.radius < 30000 : {set radius to \"kleine\"}\r\n        |elif reportbody.radius < 55000 : {set radius to \"mittelgroße\"}\r\n        |elif reportbody.radius < 63000 : {set radius to \"große\"}\r\n        |elif reportbody.radius < 69000 : {set radius to \"riesige\"}\r\n        |elif reportbody.radius < 71000 : {set radius to \"gigantische\"}\r\n        |else                           : {set radius to: {OneOf('unglaublich', 'ungeheuer')} große}\r\n        }\r\n\r\n    |else:\r\n        {set planettype to join(split(planettype, \" I \"), \" 1 \"))}\r\n        {set planettype to join(split(planettype, \" II \"), \" 2 \"))}\r\n        {set planettype to join(split(planettype, \" III \"), \" 3 \"))}\r\n        {set planettype to join(split(planettype, \" IV \"), \" 4 \"))}\r\n        {set planettype to join(split(planettype, \" V \"), \" 5 \"))}\r\n\r\n        {  if reportbody.radius <   300 : {set radius to \"winzige\"}\r\n        |elif reportbody.radius <  1000 : {set radius to \"sehr kleine\"}\r\n        |elif reportbody.radius <  3000 : {set radius to \"kleine\"}\r\n        |elif reportbody.radius <  7500 : {set radius to \"mittelgroße\"}\r\n        |elif reportbody.radius < 12500 : {set radius to \"große\"}\r\n        |elif reportbody.radius < 19000 : {set radius to \"riesige\"}\r\n        |elif reportbody.radius < 25000 : {set radius to \"gigantische\"}\r\n        |else                           : {set radius to: {OneOf('unglaublich', 'ungeheuer')} große}\r\n        }\r\n\r\n        {_ Temperatur _}\r\n        {  if reportbody.temperature <   123 : {set temperature to \"gefrorene\"}\r\n        |elif reportbody.temperature <   173 : {set temperature to \"vereiste\"}\r\n        |elif reportbody.temperature <   213 : {set temperature to \"arktische\"}\r\n        |elif reportbody.temperature <   243 : {set temperature to \"frostige\"}\r\n        |elif reportbody.temperature <   258 : {set temperature to \"kalte\"}\r\n        |elif reportbody.temperature <   273 : {set temperature to \"kühle\"}\r\n        |elif reportbody.temperature <   300 : {set temperature to \"gemäßigte\"}\r\n        |elif reportbody.temperature <   315 : {set temperature to \"warme\"}\r\n        |elif reportbody.temperature <   375 : {set temperature to \"erhitzte\"}\r\n        |elif reportbody.temperature <   500 : {set temperature to \"heiße\"}\r\n        |elif reportbody.temperature <   700 : {set temperature to \"drückend heiße\"}\r\n        |elif reportbody.temperature <  1000 : {set temperature to \"brennend heiße\"}\r\n        |elif reportbody.temperature <  1500 : {set temperature to \"schmelzende\"}\r\n        |elif reportbody.temperature <  2300 : {set temperature to \"geschmolzene\"}\r\n        |elif reportbody.temperature <  3300 : {set temperature to \"siedende\"}\r\n        |elif reportbody.temperature < 10000 : {set temperature to \"glühend heiße\"}\r\n        |else                                : {set temperature to \"extrem heiße\"}\r\n        }\r\n    }\r\n\r\n\t{_ Beginn Sprache _}\r\n\r\n    {F(\"Body Name Tidy\")}{body} ist\r\n\r\n    {if radius:\r\n        {  if article = \"der\": ein {cat(radius, \"r\")}\r\n        |elif article = \"die\": eine {radius}\r\n        |elif article = \"das\": ein {cat(radius, \"s\")}\r\n        |else                : Artikel für den Radius ist fehlerhaft\r\n        }\r\n\t\t{if temperature: und}\r\n    }\r\n\r\n    {if temperature:\r\n        {  if article = \"der\": {if !radius: ein} {cat(temperature, \"r\")}\r\n        |elif article = \"die\": {if !radius: eine} {temperature}\r\n        |elif article = \"das\": {if !radius: ein} {cat(temperature, \"s\")}\r\n        |else                : Artikel für die Temperatur ist fehlerhaft\r\n        }\r\n    }\r\n\r\n    {planettype}\r\n    { if find(planettype,\"mit\") = -1 : mit\r\n    |else                            : {if reportbody.tidallylocked || len(reportbody.rings) > 0 : , |else: und}\r\n    }\r\n\r\n    {  if reportbody.gravity < 0.5 : geringer\r\n    |elif reportbody.gravity < 2   : mittlerer\r\n    |elif reportbody.gravity < 4   : hoher\r\n    |else                          : extrem hoher\r\n    }\r\n    Gravitation\r\n\r\n\t\r\n\t{_ Ringe _}\r\n\t{if state.ringe_ansagen = 1:\r\n    \t{if len(reportbody.rings) > 0 && Ringe_ansagen = 1 : \r\n    \t\t{if reportbody.tidallylocked: , \r\n    \t\t|else: und\r\n    \t\t} Partikelringen\r\n    \t}\r\n    }\r\n\r\n    {_ if reportbody.tidallylocked: und OneOf(\"synchroner\", \"synchronisierter\") OneOf(\"Rotation\", \"Umlaufbahn\") _}\r\n\r\n    {  if reportbody.terraformstate = \"Kandidat zur Terraformierung\": {article} terraformierbar ist\r\n    |elif reportbody.terraformstate = \"Terraformiert\"\t\t\t\t: {article} terraformiert ist\r\n    |elif reportbody.terraformstate = \"Terraformierung\"\t\t\t\t: {article} sich im Prozess der Terraformierung befindet\r\n    }\r\n\r\n\r\n\t{_ Landen _}\r\n    {if state.landen_ansagen = 1 :\r\n    \t{set V to rand(1 ,4)}\r\n    \t{article}\r\n    \t{if V <= 2 : sich} {OneOf(\"zur Landung\",\"für einen Außeneinsatz\",\"für eine Expedition\")}\r\n    \t{if !reportbody.landable: {if V <=2 : nicht |else: {OneOf(\"nicht \", \"uhn\")}}}\r\n    \t{if V <= 2 : eignet |else: geeignet ist}\r\n\t}.\r\n\r\n\t{_ Vergleich mit der Erde}\r\n\t\t{_ F(\"Body compare\")}\r\n\r\n    {_ Atmosphere _}\r\n    \t{_ F(\"Body atmosphere\")}\r\n\t\t{_ F(\"Body atmosphere report\")}\r\n\r\n    {_ Volcanism _}\r\n\t\t{F(\"Body volcanism\")} \r\n\t\t{_ F(\"Body volcanism2\")}\r\n\t\t{_ F(\"Body volcanism report\")}\r\n\t\r\n\t{F(\"Body materials report\")}\r\n}\r\n\r\n{SetState('scanned_yet', reportbody.name)}\r\n",
      "name": "Body report",
      "description": "OK ! alte Variante",
      "default": false,
      "defaultValue": "{_ Preferences _}\r\n{set reportGravity to 1}        {_ Set to 0 if you don't want to hear about the body's gravity. _} \r\n{set reportTerraformState to 1} {_ Set to 0 if you don't want to hear about the terraform state of the body. _}\r\n{set reportRings to 1}          {_ Set to 0 if you don't want to hear about the body's rings. _}\r\n{set reportRotation to 0}       {_ Set to 1 if you want to hear about the body's rotation. _}\r\n{set reportVolcanism to 1}      {_ Set to 0 if you don't want to hear about the body's volcanism. _}\r\n{set reportAtmosphere to 1}     {_ Set to 0 if you don't want to hear about the body's atmosphere. _}\r\n{set reportMaterials to 1}      {_ Set to 0 if you don't want to hear about the body's materials. _}\r\n{set reportScanValue to 0}      {_ Set to 1 if you want to hear about the body's estimated value. _}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n|else:\r\n    {if reportbody.shortname != reportbody.name: \r\n        {if reportbody.bodytype:\r\n            {reportbody.bodytype}\r\n        |else:\r\n            {OneOf(\"Body\", \"Object\")} \r\n        }\r\n    }\r\n    {P(reportbody.shortname, \"body\")} is\r\n\r\n    {if reportGravity > 0:\r\n        {if reportbody.gravity < 0.5:\r\n            a low-gravity\r\n        |elif reportbody.gravity < 2:\r\n            a medium-gravity\r\n        |elif reportbody.gravity < 4:\r\n            a high-gravity\r\n        |else:\r\n            an extremely high-gravity\r\n        }\r\n    |else:\r\n        a\r\n    }\r\n\r\n    {if reportTerraformState > 0:\r\n        {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n            terraformable\r\n        |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n            terraformed\r\n        }\r\n    }\r\n\r\n    {if find(reportbody.planettype, \"Class\") >= 0 && find(reportbody.planettype, \"gas giant\") >= 0:\r\n        {set sudarsky to Occasionally(2, \"Sud-dar-ski\")}\r\n        {if find(reportbody.planettype, \"Class V\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class five\")}\r\n        |elif find(reportbody.planettype, \"Class IV\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class four\")}\r\n        |elif find(reportbody.planettype, \"Class III\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class three\")}\r\n        |elif find(reportbody.planettype, \"Class II\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class two\")}\r\n        |elif find(reportbody.planettype, \"Class I\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class one\")}\r\n        }\r\n        gas giant\r\n    |elif reportbody.planettype:\r\n        {P(reportbody.planettype, \"planettype\")}\r\n    |else: \r\n        {if reportbody.bodytype:\r\n            {reportbody.bodytype}\r\n        |else:\r\n            world\r\n        }\r\n    }\r\n\r\n    {if len(reportbody.rings) && reportRings > 0:\r\n        with {if len(reportbody.rings) = 1: a}\r\n        {if find(reportbody.reserves, \"Pristine\") >= 0:\r\n            pristine\r\n        |elif find(reportbody.reserves, \"Major\") >= 0:\r\n            rich\r\n        }\r\n        {set ringname to []}\r\n        {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n            {if find(ringcomposition, Ring.composition) < 0:\r\n                {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n            }\r\n        }\r\n        {if len(ringcomposition) > 0:\r\n            {List(ringcomposition)}\r\n        }\r\n        {if find(ringname[0], \"Belt\") >= 0: \r\n            {set ring to \"belt\"}\r\n        |else:\r\n            {set ring to \"ring\"}\r\n        }\r\n        {ring}{if len(reportbody.rings) > 1 || len(event.rings) > 1:s}\r\n    }\r\n\r\n    {if reportbody.terraformState.invariantName = \"Terraforming\" && reportTerraformState > 0:\r\n      in the process of being terraformed\r\n    }\r\n\r\n    {if reportbody.landable:\r\n        that is suitable for landing\r\n    }\r\n    . {_ note the  full stop}\r\n\r\n    {if reportbody.rotationalperiod && reportRotation > 0:\r\n        {Pause(100)}\r\n        It has a\r\n        {if reportbody.rotationalperiod < -20.0:\r\n            slow retrograde\r\n        |elif reportbody.rotationalperiod < -0.5:\r\n            retrograde\r\n        |elif reportbody.rotationalperiod < 0.0:\r\n            fast retrograde\r\n        |elif reportbody.rotationalperiod <= 0.5:\r\n            fast\r\n        |elif reportbody.rotationalperiod > 20.0:\r\n            slow\r\n        }\r\n        rotational period of {Humanise(round(reportbody.rotationalperiod, 1))} days\r\n        {if reportbody.tidallylocked:\r\n           and is tidally-locked\r\n        }.\r\n    }\r\n\r\n    {if reportVolcanism: {F(\"Body volcanism report\")} }\r\n\r\n    {if reportAtmosphere: {F(\"Body atmosphere report\")} }\r\n\r\n    {if reportMaterials: {F(\"Body materials report\")} }\r\n\r\n    {if reportScanValue: {F(\"Report last scan value\")} }\r\n}"
    },
    "Body report summary": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n\r\n{set reportTerraformables to 1}         {_ Reports terraformable and terraformed bodies _}\r\n{set reportPlanetTypes to 1}            {_ Reports Earth-like and water worlds _}\r\n{set reportMass to 0}                   {_ Reports notable masses (relative to Earth's) _}\r\n{set reportRadius to 0}                 {_ Reports notable radii (in kilometers) _}\r\n{set reportDensity to 0}                {_ Reports notable densities (in kilograms per cubic meter) _}\r\n{set reportGravity to 1}                {_ Reports notable gravity (in G's) for landable bodies _}\r\n{set reportTemperature to 0}            {_ Reports notable temperatures (in Kelvin) _}\r\n{set reportMaterials to 1}              {_ Reports materials per preferences in the `Body materials` script. _}\r\n{set reportLandableVolcanism to 1}      {_ Reports volcanism on landable worlds _}\r\n{set reportRings to 1}                  {_ Reports ring details _}\r\n{set reportInterestingOrbits to 0}      {_ Reports notable orbital characteristics _}\r\n{set reportRapidRotation to 0}          {_ Reports very fast rotating bodies _}\r\n{set reportRingedTypes to:\r\n[\r\n    \"Ammonia world\": false,\r\n    \"High metal content world\": true,\r\n    \"local\": true,\r\n    \"multicrew\": true,\r\n    \"npc\": true,\r\n    \"player\": true,\r\n    \"squadron\": true,\r\n    \"starsystem\": false,\r\n    \"voicechat\": false,\r\n    \"wing\": true,\r\n]}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{_ Begin processing _}\r\n\r\n{if !reportbody.name || reportbody.name = \"\": Welchen {OneOf(\"Himmelskörper\", \"Planet oder Mond\", \"Körper\")} meinst Du ?\r\n|else:\r\n\r\n    {set notables to []}\r\n\r\n    {if reportInterestingOrbits:\r\n\r\n        {set orbitNotables to []}\r\n\r\n        {if reportbody.eccentricityprobability:\r\n            {if reportbody.eccentricityprobability > 99.9:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            |elif reportbody.eccentricityprobability > 99:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            |elif reportbody.eccentricityprobability > 97:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.inclinationprobability:\r\n            {if reportbody.inclinationprobability > 99.9:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly inclined\")])}\r\n            |elif reportbody.inclinationprobability > 99:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely inclined\")])}\r\n            |elif reportbody.inclinationprobability > 97:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually inclined\")])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.orbitalperiodprobability:\r\n            {if reportbody.orbitalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n            {if reportbody.orbitalperiodprobability < 0.1:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly fast\", retrograde)])}\r\n            |elif reportbody.orbitalperiodprobability < 1:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely fast\", retrograde)])}\r\n            |elif reportbody.orbitalperiodprobability < 3:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually fast\", retrograde)])}\r\n            }\r\n        }\r\n\r\n        {if len(orbitNotables) > 0:\r\n            {if StartsWithVowel(orbitNotables[0]): {set a to \"an\"} |else: {set a to \"a\"} }\r\n            {set cur to 0}\r\n            {set length to len(orbitNotables) - 1}\r\n            {while cur < len(orbitNotables):\r\n                {set orbitdescription to cat(orbitdescription, orbitNotables[cur])}\n                {set cur to cur + 1}\n                {if cur = length: \r\n                    {set orbitdescription to cat(orbitdescription, \" and \")}\n                |elif cur < length:\r\n                    {set orbitdescription to cat(orbitdescription, \", \")}\n                }\n            }\r\n            {set notables to cat(notables, [cat(a, \" \", orbitdescription, \" \", \"orbit\")])}\r\n        }\r\n    }\r\n\r\n    {if reportbody.rotationalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n    {if reportRapidRotation && reportbody.rotationalperiodprobability:\r\n        {if !retrograde && reportbody.rotationalperiodprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif !retrograde && reportbody.rotationalperiodprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif !retrograde && reportbody.rotationalperiodprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        }\r\n    }\r\n\r\n    {if reportMass && reportbody.massprobability:\r\n        {if reportbody.massprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low mass at \", Humanise(reportbody.earthmass), \" times Earth's \")])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRadius && reportbody.radiusprobability:\r\n        {if reportbody.radiusprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an incredibly large radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        }\r\n    }\r\n\r\n    {if reportTemperature && reportbody.tempprobability:\r\n        {if reportbody.tempprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        }\r\n    }\r\n\r\n    {if reportGravity && reportbody.landable && reportbody.gravityprobability:\r\n        {if reportbody.gravityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportDensity && reportbody.densityprobability:\r\n        {if reportbody.densityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        }\r\n    }\r\n\r\n    {if reportVolcanism:\r\n        {if reportbody.volcanism && reportbody.landable:\r\n            {set notables to cat(notables, [cat(OneOf(\"volcanic\", \"tectonic\"), \" activity\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRings:\r\n        {if reportbody.rings:\r\n            {set ringcompositions to []}\r\n            {set cur to 0}\r\n            {for ring in reportbody.rings:\r\n                {if find(ring.name, \"Ring\") > -1:\r\n                    {if find(ringcompositions, ring.composition) = -1:\r\n                        {set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n                    }\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n            {set cur to 0}\r\n            {set length to len(ringcompositions) - 1}\r\n            {while cur < len(ringcompositions):\r\n                {set ringsdescription to cat(ringsdescription, ringcompositions[cur])}\n                {set cur to cur + 1}\n                {if cur = length: \r\n                    {set ringsdescription to cat(ringsdescription, \" and \")}\n                |elif cur < length:\r\n                    {set ringsdecription to cat(ringsdescription, \", \")}\n                }\n            }\r\n            {if ringsdescription:\r\n                {if len(ringcompositions) = 1:\r\n                    {if StartsWithVowel(reportbody.reserves): \r\n                        {set a to \"an \"} \r\n                    |else: \r\n                        {set a to \"a \"}\r\n                    }\r\n                    {set rings to \"ring\"}\r\n                |else:\r\n                    {set rings to \"rings\"} \r\n                }\r\n                {if reportbody.reserveLevel.invariantName != \"None\": \r\n                    {set reserves to reportbody.reserves}\r\n                }\r\n                {set notables to cat(notables, [cat(a, \" \", reserves, \" \", ringsdescription, \" \", rings)])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportTerraformables:\r\n        {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n            {set notables to cat(notables, [OneOf(\"potential for terraforming\", \"terraformable conditions\")])}\r\n        |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n            {set notables to cat(notables, [\"terraformed conditions\"])}\r\n        }\r\n    }\r\n\r\n    {if reportPlanetTypes:\r\n        {if reportbody.planetClass.invariantName = \"Earth-like world\":\r\n            {set notables to cat(notables, [\"Earth-like conditions\"])}\r\n        |elif reportbody.planetClass.invariantName = \"Water world\":\r\n            {set notables to cat(notables, [OneOf(\"abundant liquid water\", \"abundant liquid water at the surface\")])}\r\n        }\r\n    }\r\n\r\n    {_ Begin speaking _}\r\n\r\n    {if !reportbody.name || reportbody.name = \"\": Welchen {OneOf(\"Himmelskörper\", \"Planet oder Mond\", \"Körper\")} meinst Du ?\r\n\r\n    |else:\r\n\r\n        {if len(notables) > 0:\r\n            {if reportbody.shortname != reportbody.bodyname:\r\n                {if reportbody.bodytype\t: {reportbody.bodytype}\r\n                |else\t\t\t\t\t: Körper\r\n                }\r\n                {P(reportbody.shortname)}\r\n            |else:\r\n                {P(reportbody.bodyname)}\r\n            }\r\n            ist\r\n\r\n            {if len(notables) = 1:\r\n                {set desc to \"notable\"}\r\n            |elif len(notables) = 2:\r\n                {set desc to OneOf('interessant', 'bemerkenswert',\"beeindruckend\")}\r\n            |elif len(notables) = 3:\r\n                {set desc to OneOf('einzigartig', 'außergewöhnlich',\"selten\")}\r\n            |elif len(notables) = 4:\r\n                {set desc to OneOf('außergewöhnlich',\"außerordentlich\",\"ungewöhnlich\")}\r\n            |elif len(notables) >= 5:\r\n                {set desc to OneOf('einzigartig', 'einmalig')}\r\n            }\r\n            {OneOf(\"{desc},\", \"{if StartsWithVowel(desc): an |else: a } {desc} {P(reportbody.planettype, \"planettype\")}\")}\r\n\r\n            mit {List(notables)}.\r\n        }\r\n\r\n        {if reportMaterials:\r\n            {F(\"Body materials report\")}\r\n        }\r\n    }\r\n}",
      "name": "Body report summary",
      "description": "z.Z. nicht genutzt ! v.3.7.2-b1 - Function to report on summary details of the contextual body",
      "default": false,
      "defaultValue": "{_ Preferences _}\r\n\r\n{set reportTerraformables to 1}         {_ Reports terraformable and terraformed bodies _}\r\n{set reportPlanetTypes to 1}            {_ Reports Earth-like and water worlds _}\r\n{set reportMass to 1}                   {_ Reports notable masses (relative to Earth's) _}\r\n{set reportRadius to 1}                 {_ Reports notable radii (in kilometers) _}\r\n{set reportDensity to 0}                {_ Reports notable densities (in kilograms per cubic meter) _}\r\n{set reportGravity to 1}                {_ Reports notable gravity (in G's) for landable bodies _}\r\n{set reportTemperature to 1}            {_ Reports notable temperatures (in Kelvin) _}\r\n{set reportMaterials to 1}              {_ Reports materials per preferences in the `Body materials` script. _}\r\n{set reportLandableVolcanism to 0}      {_ Reports volcanism on landable worlds _}\r\n{set reportRings to 1}                  {_ Reports ring details _}\r\n{set reportInterestingOrbits to 1}      {_ Reports notable orbital characteristics _}\r\n{set reportRapidRotation to 1}          {_ Reports very fast rotating bodies _}\r\n{set reportRingedTypes to:\r\n[\r\n    \"Ammonia world\": false,\r\n    \"High metal content world\": true,\r\n    \"local\": true,\r\n    \"multicrew\": true,\r\n    \"npc\": true,\r\n    \"player\": true,\r\n    \"squadron\": true,\r\n    \"starsystem\": false,\r\n    \"voicechat\": false,\r\n    \"wing\": true,\r\n]}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{_ Begin processing _}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    Which body are you\r\n    {OneOf(\"asking about\",\"referring to\")}?\r\n\r\n|else:\r\n\r\n    {set notables to []}\r\n\r\n    {if reportInterestingOrbits:\r\n\r\n        {set orbitNotables to []}\r\n\r\n        {if reportbody.eccentricityprobability:\r\n            {if reportbody.eccentricityprobability > 99.9:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            |elif reportbody.eccentricityprobability > 99:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            |elif reportbody.eccentricityprobability > 97:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually \", OneOf(\"elliptical\", \"oblong\", \"elongated\"))])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.inclinationprobability:\r\n            {if reportbody.inclinationprobability > 99.9:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly inclined\")])}\r\n            |elif reportbody.inclinationprobability > 99:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely inclined\")])}\r\n            |elif reportbody.inclinationprobability > 97:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually inclined\")])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.orbitalperiodprobability:\r\n            {if reportbody.orbitalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n            {if reportbody.orbitalperiodprobability < 0.1:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"incredibly fast\", retrograde)])}\r\n            |elif reportbody.orbitalperiodprobability < 1:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"extremely fast\", retrograde)])}\r\n            |elif reportbody.orbitalperiodprobability < 3:\r\n                {set orbitNotables to cat(orbitNotables, [cat(\"unusually fast\", retrograde)])}\r\n            }\r\n        }\r\n\r\n        {if len(orbitNotables) > 0:\r\n            {if StartsWithVowel(orbitNotables[0]): {set a to \"an\"} |else: {set a to \"a\"} }\r\n            {set cur to 0}\r\n            {set length to len(orbitNotables) - 1}\r\n            {while cur < len(orbitNotables):\r\n                {set orbitdescription to cat(orbitdescription, orbitNotables[cur])}\n                {set cur to cur + 1}\n                {if cur = length: \r\n                    {set orbitdescription to cat(orbitdescription, \" and \")}\n                |elif cur < length:\r\n                    {set orbitdescription to cat(orbitdescription, \", \")}\n                }\n            }\r\n            {set notables to cat(notables, [cat(a, \" \", orbitdescription, \" \", \"orbit\")])}\r\n        }\r\n    }\r\n\r\n    {if reportbody.rotationalperiod < 0: {set retrograde to cat(\" \", \"retrograde\", \" \")} }\r\n    {if reportRapidRotation && reportbody.rotationalperiodprobability:\r\n        {if !retrograde && reportbody.rotationalperiodprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif !retrograde && reportbody.rotationalperiodprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif !retrograde && reportbody.rotationalperiodprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        }\r\n    }\r\n\r\n    {if reportMass && reportbody.massprobability:\r\n        {if reportbody.massprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low mass at \", Humanise(reportbody.earthmass), \" times Earth's \")])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        |elif reportbody.massprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high mass at \", Humanise(reportbody.earthmass), \" times Earth's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRadius && reportbody.radiusprobability:\r\n        {if reportbody.radiusprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an incredibly large radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        |elif reportbody.radiusprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high radius of \", Humanise(reportbody.radius), \" kilometers\")])}\r\n        }\r\n    }\r\n\r\n    {if reportTemperature && reportbody.tempprobability:\r\n        {if reportbody.tempprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        }\r\n    }\r\n\r\n    {if reportGravity && reportbody.landable && reportbody.gravityprobability:\r\n        {if reportbody.gravityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        |elif reportbody.gravityprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high gravity of \", Humanise(reportbody.gravity), \" times Earth's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportDensity && reportbody.densityprobability:\r\n        {if reportbody.densityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually low density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an extremely high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 97:\r\n            {set notables to cat(notables, [cat(\"an unusually high density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        }\r\n    }\r\n\r\n    {if reportVolcanism:\r\n        {if reportbody.volcanism && reportbody.landable:\r\n            {set notables to cat(notables, [cat(OneOf(\"volcanic\", \"tectonic\"), \" activity\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRings:\r\n        {if reportbody.rings:\r\n            {set ringcompositions to []}\r\n            {set cur to 0}\r\n            {for ring in reportbody.rings:\r\n                {if find(ring.name, \"Ring\") > -1:\r\n                    {if find(ringcompositions, ring.composition) = -1:\r\n                        {set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n                    }\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n            {set cur to 0}\r\n            {set length to len(ringcompositions) - 1}\r\n            {while cur < len(ringcompositions):\r\n                {set ringsdescription to cat(ringsdescription, ringcompositions[cur])}\n                {set cur to cur + 1}\n                {if cur = length: \r\n                    {set ringsdescription to cat(ringsdescription, \" and \")}\n                |elif cur < length:\r\n                    {set ringsdecription to cat(ringsdescription, \", \")}\n                }\n            }\r\n            {if ringsdescription:\r\n                {if len(ringcompositions) = 1:\r\n                    {if StartsWithVowel(reportbody.reserves): \r\n                        {set a to \"an \"} \r\n                    |else: \r\n                        {set a to \"a \"}\r\n                    }\r\n                    {set rings to \"ring\"}\r\n                |else:\r\n                    {set rings to \"rings\"} \r\n                }\r\n                {if reportbody.reserveLevel.invariantName != \"None\": \r\n                    {set reserves to reportbody.reserves}\r\n                }\r\n                {set notables to cat(notables, [cat(a, \" \", reserves, \" \", ringsdescription, \" \", rings)])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportTerraformables:\r\n        {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n            {set notables to cat(notables, [OneOf(\"potential for terraforming\", \"terraformable conditions\")])}\r\n        |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n            {set notables to cat(notables, [\"terraformed conditions\"])}\r\n        }\r\n    }\r\n\r\n    {if reportPlanetTypes:\r\n        {if reportbody.planetClass.invariantName = \"Earth-like world\":\r\n            {set notables to cat(notables, [\"Earth-like conditions\"])}\r\n        |elif reportbody.planetClass.invariantName = \"Water world\":\r\n            {set notables to cat(notables, [OneOf(\"abundant liquid water\", \"abundant liquid water at the surface\")])}\r\n        }\r\n    }\r\n\r\n    {_ Begin speaking _}\r\n\r\n    {if !reportbody.name || reportbody.name = \"\":\r\n\r\n        I'm not sure which body you are asking about.\r\n\r\n    |else:\r\n\r\n        {if len(notables) > 0:\r\n            {if reportbody.shortname != reportbody.bodyname:\r\n                {if reportbody.bodytype:\r\n                    {reportbody.bodytype}\r\n                |else:\r\n                    Body\r\n                }\r\n                {P(reportbody.shortname, \"body\")}\r\n            |else:\r\n                {P(reportbody.bodyname, \"body\")}\r\n            }\r\n            is\r\n\r\n            {if len(notables) = 1:\r\n                {set desc to \"notable\"}\r\n            |elif len(notables) = 2:\r\n                {set desc to OneOf('interesting', 'notable', 'remarkable')}\r\n            |elif len(notables) = 3:\r\n                {set desc to OneOf('exceptional', 'remarkable')}\r\n            |elif len(notables) = 4:\r\n                {set desc to OneOf('extraordinary')}\r\n            |elif len(notables) >= 5:\r\n                {set desc to OneOf('one of a kind', 'unique')}\r\n            }\r\n            {OneOf(\"{desc},\", \"{if StartsWithVowel(desc): an |else: a } {desc} {P(reportbody.planettype, \"planettype\")}\")}\r\n\r\n            with {List(notables)}.\r\n        }\r\n\r\n        {if reportMaterials:\r\n            {F(\"Body materials report\")}\r\n        }\r\n    }\r\n}"
    },
    "Body report v.3.7.2-b1": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\": \r\n\t{OneOf(\"Welchen Körper meinst Du?\", \"Über welchen Körper möchtest Du etwas wissen?\")}\r\n|else:\r\n    {if reportbody.shortname != reportbody.name: \r\n        {if reportbody.bodytype: {reportbody.bodytype}\r\n        |else: {OneOf(\"Körper\", \"Objekt\")} \r\n        }\r\n    }\r\n    {P(reportbody.shortname, \"Körper\")} hat eine\r\n\r\n    {if state.report_gravity > 0 :\r\n        {if reportbody.gravity < 0.5 : geringe\r\n        |elif reportbody.gravity < 2 : mittlerer\r\n        |elif reportbody.gravity < 4 : hohe\r\n        |else: extrem hohe\r\n        }Gravitation und ist \r\n    |else: ein\r\n    }\r\n\r\n    {if state.report_terraform_state > 0 :\r\n        {if reportbody.terraformState.invariantName = \"Candidate for terraforming\" : terraformbar\r\n        |elif reportbody.terraformState.invariantName = \"Terraformed\" : terraformierter\r\n        }\r\n    }\r\n\r\n    {if find(reportbody.planettype, \"Class\") >= 0 && find(reportbody.planettype, \"gas giant\") >= 0 :\r\n        {set sudarsky to Occasionally(2, \"Sud-dar-ski\")}\r\n        {  if find(reportbody.planettype, \"Class V\") >= 0   : {Occasionally(2, \"{Sudarsky} class five\")}\r\n        |elif find(reportbody.planettype, \"Class IV\") >= 0  : {Occasionally(2, \"{Sudarsky} class four\")}\r\n        |elif find(reportbody.planettype, \"Class III\") >= 0 : {Occasionally(2, \"{Sudarsky} class three\")}\r\n        |elif find(reportbody.planettype, \"Class II\") >= 0  : {Occasionally(2, \"{Sudarsky} class two\")}\r\n        |elif find(reportbody.planettype, \"Class I\") >= 0   : {Occasionally(2, \"{Sudarsky} class one\")}\r\n        }\r\n        Gas-Gigant\r\n    |elif reportbody.planettype: {P(reportbody.planettype)}\r\n    |else: \r\n        {if reportbody.bodytype: {reportbody.bodytype}\r\n        |else: welt\r\n        }\r\n    }\r\n\r\n    {if len(reportbody.rings) && reportRings > 0 : mit\r\n\t\t{if len(reportbody.rings) = 1 : einem}\r\n        {if find(reportbody.reserves, \"Pristine\") >= 0 : ünberührten\r\n        |elif find(reportbody.reserves, \"Major\") >= 0  : reichhaltigen\r\n        }\r\n        {set ringname to []}\r\n        {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n            {if find(ringcomposition, Ring.composition) < 0 :\r\n                {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n            }\r\n        }\r\n        {if len(ringcomposition) > 0 : {List(ringcomposition)}\r\n        }\r\n        {if find(ringname[0], \"Belt\") >= 0 : {set ring to \"Guertel\"}\r\n        |else: {set ring to \"Ring\"}\r\n        }\r\n        {ring}{if len(reportbody.rings) > 1 || len(event.rings) > 1 : en}\r\n    }\r\n\r\n    {if reportbody.terraformState.invariantName = \"Terraforming\" && reportTerraformState > 0 :\r\n    \tund befindet sich im Prozess der Terraformierung\r\n    }\r\n\r\n    {if reportbody.landable : mit der Möglichkeit der Landung\r\n    }\r\n    . {_ note the  full stop}\r\n\r\n    {if reportbody.rotationalperiod && reportRotation > 0 :\r\n        {Pause(100)}\r\n        Der Körper hat eine\r\n        {if reportbody.rotationalperiod < -20.0  : langsam und entgegengesetzte\r\n        |elif reportbody.rotationalperiod < -0.5 : entgegengesetzte\r\n        |elif reportbody.rotationalperiod < 0.0  : schnelle und entgegengesetzte\r\n        |elif reportbody.rotationalperiod <= 0.5 : schnelle\r\n        |elif reportbody.rotationalperiod > 20.0 : langsame\r\n        }\r\n        Rotationsperiode von {Humanise(round(reportbody.rotationalperiod, 1))} Tagen\r\n        {if reportbody.tidallylocked: mit einer gebundenen Rotation\r\n        }.\r\n    }\r\n\r\n    {if state.report_volcanism: {F(\"Body volcanism report\")} }\r\n    {if state.report_atmosphere: {F(\"Body atmosphere report\")} }\r\n    {if state.report_materials: {F(\"Body materials report\")} }\r\n    {if state.report_scan_value: {F(\"Report last scan value\")} }\r\n}",
      "name": "Body report v.3.7.2-b1",
      "description": "zu testen !",
      "default": false,
      "defaultValue": null
    },
    "Body report v3.5.3": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportGravity to 1}        {_ Set to 0 if you don't want to hear about the body's gravity. _} \r\n{set reportTerraformState to 1} {_ Set to 0 if you don't want to hear about the terraform state of the body. _}\r\n{set reportRings to 1}          {_ Set to 0 if you don't want to hear about the body's rings. _}\r\n{set reportRotation to 0}       {_ Set to 1 if you want to hear about the body's rotation. _}\r\n{set reportVolcanism to 1}      {_ Set to 0 if you don't want to hear about the body's volcanism. _}\r\n{set reportAtmosphere to 1}     {_ Set to 0 if you don't want to hear about the body's atmosphere. _}\r\n{set reportMaterials to 1}      {_ Set to 0 if you don't want to hear about the body's materials. _}\r\n{set reportScanValue to 0}      {_ Set to 1 if you want to hear about the body's estimated value. _}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n|else:\r\n    {if reportbody.shortname != reportbody.name: \r\n        {if reportbody.bodytype:\r\n            {reportbody.bodytype}\r\n        |else:\r\n            {OneOf(\"Body\", \"Object\")} \r\n        }\r\n    }\r\n    {P(reportbody.shortname)} is\r\n\r\n    {if reportGravity > 0:\r\n        {if reportbody.gravity < 0.5:\r\n            a low-gravity\r\n        |elif reportbody.gravity < 2:\r\n            a medium-gravity\r\n        |elif reportbody.gravity < 4:\r\n            a high-gravity\r\n        |else:\r\n            an extremely high-gravity\r\n        }\r\n    |else:\r\n        a\r\n    }\r\n\r\n    {if reportTerraformState > 0:\r\n        {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n            terraformable\r\n        |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n            terraformed\r\n        }\r\n    }\r\n\r\n    {if find(reportbody.planettype, \"Class\") >= 0 && find(reportbody.planettype, \"gas giant\") >= 0:\r\n        {set sudarsky to Occasionally(2, \"Sud-dar-ski\")}\r\n        {if find(reportbody.planettype, \"Class V\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class five\")}\r\n        |elif find(reportbody.planettype, \"Class IV\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class four\")}\r\n        |elif find(reportbody.planettype, \"Class III\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class three\")}\r\n        |elif find(reportbody.planettype, \"Class II\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class two\")}\r\n        |elif find(reportbody.planettype, \"Class I\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class one\")}\r\n        }\r\n        gas giant\r\n    |elif reportbody.planettype:\r\n        {P(reportbody.planettype)}\r\n    |else: \r\n        {if reportbody.bodytype:\r\n            {reportbody.bodytype}\r\n        |else:\r\n            world\r\n        }\r\n    }\r\n\r\n    {if len(reportbody.rings) && reportRings > 0:\r\n        with {if len(reportbody.rings) = 1: a}\r\n        {if find(reportbody.reserves, \"Pristine\") >= 0:\r\n            pristine\r\n        |elif find(reportbody.reserves, \"Major\") >= 0:\r\n            rich\r\n        }\r\n        {set ringname to []}\r\n        {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n            {if find(ringcomposition, Ring.composition) < 0:\r\n                {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n            }\r\n        }\r\n        {if len(ringcomposition) > 0:\r\n            {List(ringcomposition)}\r\n        }\r\n        {if find(ringname[0], \"Belt\") >= 0: \r\n            {set ring to \"belt\"}\r\n        |else:\r\n            {set ring to \"ring\"}\r\n        }\r\n        {ring}{if len(reportbody.rings) > 1 || len(event.rings) > 1:s}\r\n    }\r\n\r\n    {if reportbody.terraformState.invariantName = \"Terraforming\" && reportTerraformState > 0:\r\n      in the process of being terraformed\r\n    }\r\n\r\n    {if reportbody.landable:\r\n        that is suitable for landing\r\n    }\r\n    . {_ note the  full stop}\r\n\r\n    {if reportbody.rotationalperiod && reportRotation > 0:\r\n        {Pause(100)}\r\n        It has a\r\n        {if reportbody.rotationalperiod < -20.0:\r\n            slow retrograde\r\n        |elif reportbody.rotationalperiod < -0.5:\r\n            retrograde\r\n        |elif reportbody.rotationalperiod < 0.0:\r\n            fast retrograde\r\n        |elif reportbody.rotationalperiod <= 0.5:\r\n            fast\r\n        |elif reportbody.rotationalperiod > 20.0:\r\n            slow\r\n        }\r\n        rotational period of {Humanise(round(reportbody.rotationalperiod, 1))} days\r\n        {if reportbody.tidallylocked:\r\n           and is tidally-locked\r\n        }.\r\n    }\r\n\r\n    {if reportVolcanism: {F(\"Body volcanism report\")} }\r\n\r\n    {if reportAtmosphere: {F(\"Body atmosphere report\")} }\r\n\r\n    {if reportMaterials: {F(\"Body materials report\")} }\r\n\r\n    {if reportScanValue: {F(\"Report last scan value\")} }\r\n}",
      "name": "Body report v3.5.3",
      "description": "z.Z. nicht genutzt ! Function to report on the details of the contextual body",
      "default": true,
      "defaultValue": "{_ Preferences _}\r\n{set reportGravity to 1}        {_ Set to 0 if you don't want to hear about the body's gravity. _} \r\n{set reportTerraformState to 1} {_ Set to 0 if you don't want to hear about the terraform state of the body. _}\r\n{set reportRings to 1}          {_ Set to 0 if you don't want to hear about the body's rings. _}\r\n{set reportRotation to 0}       {_ Set to 1 if you want to hear about the body's rotation. _}\r\n{set reportVolcanism to 1}      {_ Set to 0 if you don't want to hear about the body's volcanism. _}\r\n{set reportAtmosphere to 1}     {_ Set to 0 if you don't want to hear about the body's atmosphere. _}\r\n{set reportMaterials to 1}      {_ Set to 0 if you don't want to hear about the body's materials. _}\r\n{set reportScanValue to 0}      {_ Set to 1 if you want to hear about the body's estimated value. _}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n|else:\r\n    {if reportbody.shortname != reportbody.name: \r\n        {if reportbody.bodytype:\r\n            {reportbody.bodytype}\r\n        |else:\r\n            {OneOf(\"Body\", \"Object\")} \r\n        }\r\n    }\r\n    {P(reportbody.shortname)} is\r\n\r\n    {if reportGravity > 0:\r\n        {if reportbody.gravity < 0.5:\r\n            a low-gravity\r\n        |elif reportbody.gravity < 2:\r\n            a medium-gravity\r\n        |elif reportbody.gravity < 4:\r\n            a high-gravity\r\n        |else:\r\n            an extremely high-gravity\r\n        }\r\n    |else:\r\n        a\r\n    }\r\n\r\n    {if reportTerraformState > 0:\r\n        {if reportbody.terraformState.invariantName = \"Candidate for terraforming\":\r\n            terraformable\r\n        |elif reportbody.terraformState.invariantName = \"Terraformed\":\r\n            terraformed\r\n        }\r\n    }\r\n\r\n    {if find(reportbody.planettype, \"Class\") >= 0 && find(reportbody.planettype, \"gas giant\") >= 0:\r\n        {set sudarsky to Occasionally(2, \"Sud-dar-ski\")}\r\n        {if find(reportbody.planettype, \"Class V\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class five\")}\r\n        |elif find(reportbody.planettype, \"Class IV\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class four\")}\r\n        |elif find(reportbody.planettype, \"Class III\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class three\")}\r\n        |elif find(reportbody.planettype, \"Class II\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class two\")}\r\n        |elif find(reportbody.planettype, \"Class I\") >= 0:\r\n            {Occasionally(2, \"{Sudarsky} class one\")}\r\n        }\r\n        gas giant\r\n    |elif reportbody.planettype:\r\n        {P(reportbody.planettype)}\r\n    |else: \r\n        {if reportbody.bodytype:\r\n            {reportbody.bodytype}\r\n        |else:\r\n            world\r\n        }\r\n    }\r\n\r\n    {if len(reportbody.rings) && reportRings > 0:\r\n        with {if len(reportbody.rings) = 1: a}\r\n        {if find(reportbody.reserves, \"Pristine\") >= 0:\r\n            pristine\r\n        |elif find(reportbody.reserves, \"Major\") >= 0:\r\n            rich\r\n        }\r\n        {set ringname to []}\r\n        {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n            {if find(ringcomposition, Ring.composition) < 0:\r\n                {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n            }\r\n        }\r\n        {if len(ringcomposition) > 0:\r\n            {List(ringcomposition)}\r\n        }\r\n        {if find(ringname[0], \"Belt\") >= 0: \r\n            {set ring to \"belt\"}\r\n        |else:\r\n            {set ring to \"ring\"}\r\n        }\r\n        {ring}{if len(reportbody.rings) > 1 || len(event.rings) > 1:s}\r\n    }\r\n\r\n    {if reportbody.terraformState.invariantName = \"Terraforming\" && reportTerraformState > 0:\r\n      in the process of being terraformed\r\n    }\r\n\r\n    {if reportbody.landable:\r\n        that is suitable for landing\r\n    }\r\n    . {_ note the  full stop}\r\n\r\n    {if reportbody.rotationalperiod && reportRotation > 0:\r\n        {Pause(100)}\r\n        It has a\r\n        {if reportbody.rotationalperiod < -20.0:\r\n            slow retrograde\r\n        |elif reportbody.rotationalperiod < -0.5:\r\n            retrograde\r\n        |elif reportbody.rotationalperiod < 0.0:\r\n            fast retrograde\r\n        |elif reportbody.rotationalperiod <= 0.5:\r\n            fast\r\n        |elif reportbody.rotationalperiod > 20.0:\r\n            slow\r\n        }\r\n        rotational period of {Humanise(round(reportbody.rotationalperiod, 1))} days\r\n        {if reportbody.tidallylocked:\r\n           and is tidally-locked\r\n        }.\r\n    }\r\n\r\n    {if reportVolcanism: {F(\"Body volcanism report\")} }\r\n\r\n    {if reportAtmosphere: {F(\"Body atmosphere report\")} }\r\n\r\n    {if reportMaterials: {F(\"Body materials report\")} }\r\n\r\n    {if reportScanValue: {F(\"Report last scan value\")} }\r\n}"
    },
    "Body report1": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body report1\")}\r\n\r\n{_ SetState('eddi_context_body_system', \"Sol\")}\r\n{_ SetState('eddi_context_body_name', \"Earth\")}\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: {set reportbody to BodyDetails(state.eddi_context_body_name)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\" : Bitte das astronomische Objekt spezifizieren.\r\n|else:\r\n\r\n    {  if reportbody.planettype = \"Metallreicher Körper\"               \t: {set planettype to \"Metall reiches Objekt\"}                \t{set article to \"das\"}\r\n    |elif reportbody.planettype = \"Welt mit hohem Metallgehalt\"         : {set planettype to \"Planet mit hochwertigen Metallen\"}        {set article to \"der\"}\r\n    |elif reportbody.planettype = \"Felsiger Körper\"                     : {set planettype to \"felsiger Körper\"}                      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Eisiger Körper\"                      : {set planettype to \"Eisplanet\"}                            \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Felsige Eiswelt\"                   \t: {set planettype to \"felsiger Eisplanet\"}                   \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Erdähnliche Welt\"                 \t: {set planettype to \"erd ähnlicher Planet\"}            \t \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Wasserwelt\"                      \t: {set planettype to \"Wasserwelt\"}                           \t{set article to \"die\"}\r\n    |elif reportbody.planettype = \"Ammoniakwelt\"                    \t: {set planettype to \"Ammoniak Welt\"}                        \t{set article to \"die\"}\r\n    |elif reportbody.planettype = \"Wasserriese\"                      \t: {set planettype to \"Wasserriese\"}                          \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Wasserriese mit Leben\"           \t: {set planettype to \"belebter Wasserriese\"}                 \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Gasriese mit wasserbasiertem Leben\"  : {set planettype to \"Gasriese mit wasserbasiertem Leben\"}   \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Gasriese mit ammoniakbasiertem Leben\": {set planettype to \"Gasriese mit amonnjakbasiertem Leben\"} \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse I Gasriese\"                \t: {set planettype to \"Klasse Eins Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse II Gasriese\"              \t: {set planettype to \"Klasse Zwei Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse III Gasriese\"              \t: {set planettype to \"Klasse Drei Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse IV Gasriese\"              \t: {set planettype to \"Klasse Vier Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Klasse V Gasriese\"              \t\t: {set planettype to \"Klasse Fünf Gas Riese\"}                \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class I gas giant\"       \t: {set planettype to \"Sudarskie Klasse Eins Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class II gas giant\"      \t: {set planettype to \"Sudarskie Klasse Zwei Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class III gas giant\"     \t: {set planettype to \"Sudarskie Klasse Drei Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class IV gas giant\"      \t: {set planettype to \"Sudarskie Klasse Vier Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Sudarsky class V gas giant\"       \t: {set planettype to \"Sudarskie Klasse Fünf Gas Riese\"}      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Heliumreicher Gasriese\"            \t: {set planettype to \"Helium reicher Gas Riese\"}\t\t      \t{set article to \"der\"}\r\n    |elif reportbody.planettype = \"Heliumgasriese\"                 \t\t: {set planettype to \"Helium Gas Riese\"}                        {set article to \"der\"}\r\n    |else                                                            \t: Fehler! \"planettype\" nicht gefunden: {reportbody.planettype}  {set article to []}\r\n    }\r\n\r\n    {  if article = \"der\": {set PossArt to \"Sein\"} {set PersPron to \"Er\"}  {set RelaPron to \"Dessen\"}\r\n    |elif article = \"die\": {set PossArt to \"Ihr\"}  {set PersPron to \"Sie\"} {set RelaPron to \"Deren\"}\r\n    |elif article = \"das\": {set PossArt to \"Sein\"} {set PersPron to \"Es\"}  {set RelaPron to \"Dessen\"}\r\n    |else                : Fehler! Artikel nicht belegt\r\n    }\r\n\r\n    {if find(lcase(planettype), \"riese\")  > 0 :\r\n\r\n        {_ Radius _}\r\n        {  if reportbody.radius < 15000 : {set radius to \"winzige\"}\r\n        |elif reportbody.radius < 20000 : {set radius to \"sehr kleine\"}\r\n        |elif reportbody.radius < 30000 : {set radius to \"kleine\"}\r\n        |elif reportbody.radius < 55000 : {set radius to \"mittelgroße\"}\r\n        |elif reportbody.radius < 63000 : {set radius to \"große\"}\r\n        |elif reportbody.radius < 69000 : {set radius to \"riesige\"}\r\n        |elif reportbody.radius < 71000 : {set radius to \"gigantische\"}\r\n        |else                           : {set radius to: {OneOf('unglaublich', 'ungeheuer')} große}\r\n        }\r\n\r\n    |else:\r\n        {set planettype to join(split(planettype, \" I \"), \" 1 \"))}\r\n        {set planettype to join(split(planettype, \" II \"), \" 2 \"))}\r\n        {set planettype to join(split(planettype, \" III \"), \" 3 \"))}\r\n        {set planettype to join(split(planettype, \" IV \"), \" 4 \"))}\r\n        {set planettype to join(split(planettype, \" V \"), \" 5 \"))}\r\n\r\n        {  if reportbody.radius <   300 : {set radius to \"winzige\"}\r\n        |elif reportbody.radius <  1000 : {set radius to \"sehr kleine\"}\r\n        |elif reportbody.radius <  3000 : {set radius to \"kleine\"}\r\n        |elif reportbody.radius <  7500 : {set radius to \"mittelgroße\"}\r\n        |elif reportbody.radius < 12500 : {set radius to \"große\"}\r\n        |elif reportbody.radius < 19000 : {set radius to \"riesige\"}\r\n        |elif reportbody.radius < 25000 : {set radius to \"gigantische\"}\r\n        |else                           : {set radius to: {OneOf('unglaublich', 'ungeheuer')} große}\r\n        }\r\n\r\n        {_ Temperatur _}\r\n        {  if reportbody.temperature <   123 : {set temperature to \"gefrorene\"}\r\n        |elif reportbody.temperature <   173 : {set temperature to \"vereiste\"}\r\n        |elif reportbody.temperature <   213 : {set temperature to \"arktische\"}\r\n        |elif reportbody.temperature <   243 : {set temperature to \"frostige\"}\r\n        |elif reportbody.temperature <   258 : {set temperature to \"kalte\"}\r\n        |elif reportbody.temperature <   273 : {set temperature to \"kühle\"}\r\n        |elif reportbody.temperature <   300 : {set temperature to \"gemäßigte\"}\r\n        |elif reportbody.temperature <   315 : {set temperature to \"warme\"}\r\n        |elif reportbody.temperature <   375 : {set temperature to \"erhitzte\"}\r\n        |elif reportbody.temperature <   500 : {set temperature to \"heiße\"}\r\n        |elif reportbody.temperature <   700 : {set temperature to \"drückend heiße\"}\r\n        |elif reportbody.temperature <  1000 : {set temperature to \"brennend heiße\"}\r\n        |elif reportbody.temperature <  1500 : {set temperature to \"schmelzende\"}\r\n        |elif reportbody.temperature <  2300 : {set temperature to \"geschmolzene\"}\r\n        |elif reportbody.temperature <  3300 : {set temperature to \"siedende\"}\r\n        |elif reportbody.temperature < 10000 : {set temperature to \"glühend heiße\"}\r\n        |else                                : {set temperature to \"extrem heiße\"}\r\n        }\r\n    }\r\n\r\n\t{_ Beginn Sprache _}\r\n\r\n\t{set ringname to []}          {_ Original im \"Body report\" EDDI v.3.7.0 _}\r\n\t{set a_ring_com to \"\"}\r\n\t{set b_ring_com to \"\"}\r\n\r\n    {F(\"Body Name Tidy\")}{body}\r\n    \r\n    {_ Ringe _}\r\n    {if state.ringe_ansagen = 1 :\r\n\t\t{if len(reportbody.rings) > 0 : besitzt\r\n\t\t\t{for Ring in reportbody.rings:\r\n        \t\t{if find(Ring.name, \"A Ring\") > 0 : \r\n        \t\t\t{set a_ring_com to Ring.composition}\r\n        \t\t}\r\n        \t\t{if find(Ring.name, \"B Ring\") > 0 : \r\n        \t\t\t{set b_ring_com to Ring.composition}\r\n        \t\t}\r\n\t\t\t}\t\r\n\t\t\t{if len(reportbody.rings) = 1 : einen {a_ring_com}en Ring.\r\n\t\t\t|else:\r\n\t\t\t\t{if a_ring_com != b_ring_com :\r\n        \t\t\t{if a_ring_com : {a_ring_com}e\r\n        \t\t\t\t{if b_ring_com: und {b_ring_com}e\r\n        \t\t\t\t}\r\n        \t\t\t}Ringe\r\n        \t\t|else: {a_ring_com}e Ringe\r\n        \t\t}\r\n        \t}mit {reportbody.reserves}n Vorkommen und\r\n\t\t}\r\n\t}\r\n\tist\r\n    {if radius:\r\n        {  if article = \"der\": ein {cat(radius, \"r\")}\r\n        |elif article = \"die\": eine {radius}\r\n        |elif article = \"das\": ein {cat(radius, \"s\")}\r\n        |else                : Artikel für den Radius ist fehlerhaft\r\n        }\r\n    }\r\n    \r\n        \r\n\t{if !reportbody.landable:\r\n\t\t{planettype}\r\n    \t{  if reportbody.terraformstate = \"Kandidat zur Terraformierung\": {article} terraformierbar ist\r\n    \t|elif reportbody.terraformstate = \"Terraformiert\"\t\t\t\t: {article} terraformiert ist\r\n    \t|elif reportbody.terraformstate = \"Terraformierung\"\t\t\t\t: {article} sich im Prozess der Terraformierung befindet und somit\r\n    \t}\r\n    \t\t\r\n\t\t{_ Landen ansagen _}\r\n    \t{if state.landen_ansagen = 1 :\r\n\t   \t\t{set V to rand(1 ,4)}\r\n\t   \t\t{if V <= 2 : {article} sich {OneOf(\"zur Landung\",\"für einen Außeneinsatz\",\"für eine Expedition\")}\r\n\t   \t\t|else: {article} {OneOf(\"zur Landung\",\"für einen Außeneinsatz\",\"für eine Expedition\")}\r\n\t   \t\t} \r\n\t   \t\t{if !reportbody.landable: {if V <=2 : nicht |else: {OneOf(\"nicht \", \"uhn\")}}}\r\n\t   \t\t{if V <= 2 : eignet |else: geeignet ist}\r\n\t   \t}.\r\n\t|else:\r\n\t   \t{if temperature:\r\n\t   \t    {  if article = \"der\": {if !radius: ein} {cat(temperature, \"r\")}\r\n    \t    |elif article = \"die\": {if !radius: eine} {temperature}\r\n\t   \t    |elif article = \"das\": {if !radius: ein} {cat(temperature, \"s\")}\r\n\t   \t    |else                : Artikel für die Temperatur ist fehlerhaft\r\n\t   \t    }\r\n    \t}\r\n\t   \r\n\t\t{planettype}\r\n\t\t\r\n\t\tmit\r\n\t\t{  if reportbody.gravity < 0.2 : sehr geringer\r\n\t\t|elif reportbody.gravity < 2   : geringer\r\n\t    |elif reportbody.gravity < 4   : mittlerer\r\n\t    |elif reportbody.gravity < 10  : hoher\r\n\t    |else                          : extrem hoher\r\n\t    }\r\n\t    {OneOf(\"Gravitation\", \"Schwerkraft\",\"Anziehungskraft\")}.   {_ Ja ich weiß, Schwerkraft ist nicht ganz korrekt :-) _}\r\n\r\n\t\t{F(\"Body materials report\")}\r\n\r\n\t\t{_ Vergleich mit der Erde}\r\n\t\t\t{_ F(\"Body compare\")}\r\n\t\t\t\r\n    \t{_ Atmosphere _}\r\n    \t\t{_ F(\"Body atmosphere\")}\r\n\t\t\t{_ F(\"Body atmosphere report\")}\r\n\t\t\t\r\n    \t{_ Volcanism _}\r\n\t\t{F(\"Body volcanism\")} \r\n\t\t\t{_ F(\"Body volcanism2\")}\r\n\t\t\t{_ F(\"Body volcanism report\")}\r\n\t}\r\n\r\n}\r\n{SetState('scanned_yet', reportbody.name)}",
      "name": "Body report1",
      "description": "alte Variante verkürzt",
      "default": false,
      "defaultValue": null
    },
    "Body scanned": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Body scanned\")}\r\n\r\n{_ Context _}\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{_ Process the event _}\r\n{set reportbody to event}\r\n{if reportbody.estimatedvalue > 30000 || find(lcase(reportbody.planettype), \"riese\")  > 0 :\r\n\t{F(\"Body worth\")}\r\n\t{Pause(500)}\r\n|else:\r\n}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {Pause(500)}\r\n    \t{if state.body_report = 0: kein Report gewünscht!\r\n    \t|elif state.body_report = 1: {F(\"Body report1\")}\r\n    \t|elif state.body_report = 2: {F(\"Body report\")}\r\n    \t|elif state.body_report = 3: {F(\"Body report v.3.7.2-b1\")}\r\n    \t|elif state.body_report = 4: {F(\"Body report summary\")}\r\n    \t}\r\n}",
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body",
      "default": false,
      "defaultValue": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n{_ Preferences _}\r\n\r\n{set fullBodyReport to 0}\r\n\r\n{_ Process the event _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {Pause(500)}\r\n    {if fullBodyReport:\r\n        {F(\"Body report\")}\r\n    |else:\r\n        {F(\"Body report summary\")}\r\n    }\r\n}"
    },
    "Body volcanism": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody:\r\n   {set reportbody to event}\r\n   {set planettype to bodyclass}\r\n}\r\n\r\n{_ Volcanism _}\r\n{if reportbody.landable:\r\n   \t{if reportbody.volcanism || len(reportbody.volcanism) > 0 :\r\n   \t\t{if reportbody.name = reportbody.shortname:\r\n            {P(reportbody.shortname)} {OneOf(\"hat\", \"beinhaltet\", \"zeigt\")}\r\n\t\t|else:\r\n       \t\t{OneOf(\"Die Sensoren entdecken\", \"Die Sensoren finden\", \r\n       \t\t\t\t\"Dieser {reportbody.bodytype} hat\")}\r\n       \t}\r\n       \t{OneOf(\"Zeichen\", \"Spuren\", \"Merkmale\")} von \r\n       \t{OneOf(\"Vulkanismus\", \"tektonischen Aktivitäten\")},\r\n       \t{if reportbody.volcanism.type = 'Geysers'\t\t: mit einer\r\n\t\t\t{  if reportbody.volcanism.amount = 'Major'\t: hohen Anzahl von\r\n       \t    |elif reportbody.volcanism.amount = 'Minor'\t: geringen Anzahl von\r\n       \t    }\r\n       \t    aktiven {reportbody.volcanism.composition} Geysieren\r\n       \t    {Occasionally(2, \"auf der Oberfläche\")}\r\n       \t|else\t\t\t\t\t\t\t\t\t\t\t: mit\r\n       \t    {  if reportbody.volcanism.amount = 'Major'\t: großen\r\n       \t    |elif reportbody.volcanism.amount = 'Minor'\t: kleinen\r\n       \t    }\r\n       \t    aktiven {reportbody.volcanism.composition} Magma Strömen\r\n       \t    {Occasionally(2, \"auf der Oberfläche\")}\r\n       \t}.\r\n   \t}\r\n}\r\n\r\n{Log(\"EDDI Fktn.: Body volcanism\")}\r\n    ",
      "name": "Body volcanism",
      "description": "OK but old - Reports on the volcanism of a body",
      "default": false,
      "defaultValue": null
    },
    "Body volcanism report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\": Welchen Himmelskörper meinst Du ?\r\n|else:\r\n\t{if reportbody.landable:\r\n    \t{if (reportbody.volcanism || len(reportbody.volcanism) > 0) && reportVolcanism > 0 :\r\n        \t{if reportbody.name = reportbody.shortname:\r\n        \t    {P(reportbody.shortname)} {OneOf(\"has\", \"contains\")}\r\n        \t|else:\r\n            \t{OneOf(\"Ich erkenne\", \"Die Sensoren erkennen\", \r\n            \t       \"Dieser {reportbody.bodytype} hat\")}\r\n        \t}\r\n\r\n        \t{if reportbody.volcanism.type = \"Geysers\":\r\n            \t{if reportbody.volcanism.invariantAmount = 'Major': eine große Anzahl an\r\n            \t|elif reportbody.volcanism.invariantAmount = 'Minor': eine kleine Anzahl an\r\n            \t}\r\n            \tactive {reportbody.volcanism.composition} Geisieren\r\n            \t{Occasionally(3, \"auf der Oberfläche\")}.\r\n        \t|else:\r\n            \t{if reportbody.volcanism.invariantAmount = 'Major': viel\r\n            \t|elif reportbody.volcanism.invariantAmount = 'Minor': ein wenig\r\n            \t}\r\n            \tactive {reportbody.volcanism.composition} \r\n            \t{OneOf(\r\n            \t    \"Lava {Occasionally(3, \\\"auf der Oberfläche\\\")}\",\r\n            \t    OneOf(\"Magma nahe der Oberfläche\", \"unterirdisches Magma\")\r\n            \t)}.\r\n        \t}\r\n    \t}\r\n\t}\r\n}\r\n\r\n\r\n{Log(\"EDDI Fktn.: Body volcanism report\")}",
      "name": "Body volcanism report",
      "description": "OK ! Report on the volcanism of the contextual body",
      "default": false,
      "defaultValue": "{_ Fetch from context _}\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n|else:\r\n    {if (reportbody.volcanism || len(reportbody.volcanism) > 0) && reportVolcanism > 0:\r\n        {if reportbody.name = reportbody.shortname:\r\n            {P(reportbody.shortname, \"body\")} {OneOf(\"has\", \"contains\")}\r\n        |else:\r\n            {OneOf(\"I detect\", \r\n                   \"I am detecting\", \r\n                   \"Sensors detect\", \r\n                   \"This {reportbody.bodytype} has\", \r\n            )}\r\n        }\r\n\r\n        {if reportbody.volcanism.type = \"Geysers\":\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                high numbers of\r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                low numbers of\r\n            }\r\n            active {reportbody.volcanism.composition} geysers\r\n            {Occasionally(3, \"at the surface\")}.\r\n        |else:\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                high levels of\r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                low levels  of\r\n            }\r\n            active {reportbody.volcanism.composition} \r\n            {OneOf(\r\n                \"lava flows {Occasionally(3, \\\"at the surface\\\")}\",\r\n                OneOf(\"magma flows near the surface\", \"sub-surface magma flows\")\r\n            )}.\r\n        }\r\n    }\r\n}"
    },
    "Body volcanism2": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n{if !reportbody:\r\n   {set reportbody to event}\r\n   {set planettype to bodyclass}\r\n}\r\n\r\n{if reportbody.landable:\r\n\t{if reportbody.volcanism:\r\n\t\tDie {OneOf(\"Scanner\",\"Sensoren\")} {OneOf(\"zeigen\",\"registrieren\",\"orten\")}\r\n\t\r\n\t\t{  if reportbody.volcanism.amount = 'Großer'  : hohe\r\n\t\t|elif reportbody.volcanism.amount = 'Geringer': geringe\r\n\t\t}\r\n\t\tvulkanische Aktivität in Form von \r\n\t\t{  if reportbody.volcanism.composition = 'Ammoniak'     : Ammoniak\r\n\t\t|elif reportbody.volcanism.composition = 'Kohlendioxid' : Kohlenstoff\r\n\t\t|elif reportbody.volcanism.composition = 'Eisen'        : Eisen\r\n\t\t|elif reportbody.volcanism.composition = 'Methan'       : Methan\r\n\t\t|elif reportbody.volcanism.composition = 'Stickstoff'   : Stickstoff  \r\n\t\t|elif reportbody.volcanism.composition = 'Silikat'      : Silikat\r\n\t\t|elif reportbody.volcanism.composition = 'Silikatdampf' : Silikat-Dampf\r\n\t\t|elif reportbody.volcanism.composition = 'Wasser'       : Wasser\r\n\t\t|else                                                   : Volcanism nicht gefunden: {reportbody.volcanism.composition}\r\n    \t}\r\n\t\thaltigen\r\n    \r\n\t\t{if reportbody.volcanism.type = 'Geysir': Geysiren\r\n    \t|else                                   : Magma Strömungen\r\n    \t}.\r\n\t}\t\r\n}\r\n\r\n{Log(\"EDDI Fktn.: Body volcanism2\")}",
      "name": "Body volcanism2",
      "description": "Variante 2 (alt)",
      "default": false,
      "defaultValue": null
    },
    "Body worth": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Body worth\")}\r\n\r\n{_ Fetch from context _}\r\n\r\n{if event: {set reportbody to event}}\r\n{if !event.name || event.name = \"\": {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}}\r\n{if !reportbody.name || reportbody.name = \"\": {set reportbody to BodyDetails(state.eddi_context_body_name)}}\r\n\r\n{set planettype to bodyclass}\r\n\r\n{if state.discovery_scanner:\r\n   {if state.surface_scanner:\r\n      {set exploration_maxvalue to high}\r\n      {set exploration_minvalue to med}\r\n   }\r\n|else:\r\n   {set exploration_value to low}\r\n}\r\n\r\n{if reportbody.planettype = \"Welt mit hohem Metallgehalt\" && reportbody.terraformstate = \"Kandidat zur Terraformierung\" :\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 684000}\r\n       {set lowvalue to 163000}\r\n    |elif exploration_minvalue = med: \r\n       {set lowvalue to 163000}\r\n    }\r\n|elif reportbody.planettype = \"Wasserwelt\" && reportbody.terraformstate = \"Kandidat zur Terraformierung\" :\r\n    {if exploration_maxvalue = high: \r\n        {set highvalue to 1120000}\r\n        {set lowvalue to 268000}\r\n    |elif exploration_minvalue = med: \r\n        {set lowvalue to 268000}\r\n    }\r\n|elif reportbody.planettype = \"Wasserwelt\":\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 416000}\r\n       {set lowvalue to 99000}\r\n    |elif exploration_minvalue = med: \r\n       {set lowvalue to 99000}\r\n    }\r\n|elif reportbody.planettype = \"Erdähnliche Welt\":\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 1127000}\r\n       {set lowvalue to 270000}\r\n    |elif exploration_minvalue = med: \r\n       {set lowvalue to 270000}\r\n    }\r\n|elif reportbody.planettype = \"Ammoniakwelt\":\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 598000}\r\n       {set lowvalue to 143000}\r\n    |elif exploration_minvalue = med: \r\n       {set lowvalue to 143000}\r\n    }\r\n|elif reportbody.planettype = \"Metallreicher Körper\":\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 132000}\r\n       {set lowvalue to 31632}\r\n    |elif exploration_minvalue = med: \r\n       {set lowvalue to 31632}\r\n    }\r\n|elif reportbody.planettype = \"Felsiger Körper\" && reportbody.terraformstate = \"Kandidat zur Terraformierung\" :\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 540000}\r\n       {set lowvalue to 129504}\r\n    |elif exploration_minvalue = med: \r\n       {set lowvalue to 129504}\r\n    }\r\n|elif reportbody.planettype = \"Klasse II Gasriese\":\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 119000}\r\n       {set lowvalue to 28405}\r\n    |elif exploration_minvalue = med: \r\n       {set lowvalue to 28405}\r\n    }\r\n|elif reportbody.stellarclass = \"N\":\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 22864}\r\n    }\r\n|elif reportbody.stellarclass = \"H\":\r\n    {if exploration_maxvalue = high: \r\n       {set highvalue to 24180}\r\n    }\r\n}\r\n\r\n{if highvalue:\r\n   {Pause(500)}\r\n   Herzlichen Glückwunsch.\r\n   {if reportbody.planettype = \"Erdähnliche Welt\":\r\n      {OneOf(\"Diese Entdeckung\", \"Dieser Scan\", \"{reportbody.planettype} {reportbody.bodytype}\")}\r\n      ist {OneOf(\"typischerweise\", \"normalerweise\")} zwischen  {set value to (lowvalue)} {F(\"Humanise ValueGer\")} und\r\n      {set value to (highvalue)} {F(\"Humanise ValueGer\")} credditts wert. Wir sollten das Objekt zusätzlich kartografieren.\r\n   |elif reportbody.planettype = \"Ammoniakwelt\":\r\n      {OneOf(\"Diese Erfassung\", \"Dieser Scan\", \"{reportbody.planettype} {reportbody.bodytype}\")}\r\n      ist {OneOf(\"typischerweise\", \"normalerweise\")} zwischen {set value to (lowvalue)} {F(\"Humanise ValueGer\")} und\r\n      {set value to (highvalue)} {F(\"Humanise ValueGer\")} credditts wert. Wir sollten das Objekt zusätzlich kartografieren.\r\n   |elif reportbody.planettype = \"Klasse II Gasriese\":\r\n        {OneOf(\"Diese Erfassung\", \"Dieser Scan\", \"Dieser {reportbody.bodytype}\", \"Der {if reportbody.planettype = 'Klasse II Gasriese' : Klasse zwei Gasriese}\")}\r\n        ist {OneOf(\"typischerweise\", \"normalerweise\")} zwischen {set value to (lowvalue)} {F(\"Humanise ValueGer\")} und\r\n        {set value to (highvalue)} {F(\"Humanise ValueGer\")} credditts wert.\r\n   |else:\r\n      {OneOf(\"Diese Entdeckung\", \"Dieser Scan\", \"Dieses Objekt, {reportbody.planettype}, {reportbody.terraformstate},\")}\r\n      ist {OneOf(\"typischerweise\", \"normalerweise\")} zwischen  {set value to (lowvalue)} {F(\"Humanise ValueGer\")} und\r\n      {set value to (highvalue)} {F(\"Humanise ValueGer\")} credditts wert. Wir sollten das Objekt zusätzlich kartografieren.\r\n   }\r\n}\r\n\r\n{_ Exploration values are per https://forums.frontier.co.uk/showthread.php/339546-2-3-exploration-payouts-visual-guide https://forums.frontier.co.uk/threads/exploration-value-formulae.232000/ _}\r\n\r\n",
      "name": "Body worth",
      "description": "OK ! Checks for high value exploration body scans",
      "default": false,
      "defaultValue": null
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Bond awarded\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\n{set translate to event.victimfaction} {set faction to F(\"Translate Power\")}\r\n{OneOf(\"Ziel\",\"Feindlicher Kämpfer\",\"Bandit\",\"Bo-ghee\",\"Schiff von {faction}\",\"{faction} Schiff\")}\r\n{OneOf(\"zerstört\",\"eliminiert\",\"zerplatzt\")}.\r\n\r\n{set faction to []}\r\n{set value to event.reward}\r\n{Occasionally(3, \"{set translate to event.awardingfaction} {set faction to cat('von ', F('Translate Power'))}\")}\r\n{OneOf(\"Das bringt weitere {F('Humanise ValueGer')} credditts {faction} für die Kaffekasse\",\r\n       \"Empfange {F('Humanise ValueGer')} credditts {faction}\",\r\n       \"Und weitere {F('Humanise ValueGer')} credditts {faction} auf dem Konto\",\r\n       \"Gutschrift über {F('Humanise ValueGer')} credditts {faction} empfangen\")}.\r\n\r\n{Pause(250)}\r\n\r\n{Occasionally(3,\"{OneOf('Wer will der nächste sein?^',\r\n                        'Der nächste bitte?',\r\n                        'Und der nächste bitte!',\r\n                        'Cool bleiben, Commahnder!!',\r\n                        'Jetzt nur nicht übermütig werden, {F(\"Honorific\")}!',\r\n                        'Gleich nach dem nächsten ausschau halten, {F(\"Honorific\")}')}\")}\r\n\r\n{_\r\n- awardingfaction  The name of the faction awarding the bond\r\n- victimfaction    The name of the faction whose ship you destroyed\r\n- reward           The number of credits received\r\n_}\r\n",
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond",
      "default": false,
      "defaultValue": "{_ Bond awarded }\r\n{_ Triggered when you are awarded a combat bond }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\n{event.victimfaction} ship {OneOf(\"destroyed\",\"eliminated\",\"down\")},\r\n\r\n{Humanise(event.reward)} credits awarded from {event.awardingfaction}.\r\n"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Bond redeemed\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bond_amount', event.amount)}\r\n\r\nKampf Belohnungen über {set value to event.amount} {F(\"Humanise ValueGer\")} credditts\r\n{Occasionally(2, \"{set from to 1}\r\n  {if len(event.rewards) = 1 : von {set translate to event.rewards[0].faction} {F(\"Translate Power\")}\r\n  |else: von\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0 :\r\n        |elif cur < len(event.rewards) - 1 : , \r\n        |else: und\r\n        }\r\n        \r\n        {set translate to event.rewards[cur].faction} {F(\"Translate Power\")}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")} eingelöst.\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0 : nach Abzug\r\n    {OneOf(\"von Zahlungen\", \"der Gebühren\")} von\r\n    {Humanise(round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0))} credditts\r\n}.\r\n\r\n{_\r\n- rewards           The rewards obtained broken down by faction\r\n- amount            The amount rewarded (after any broker fees)\r\n- brokerpercentage  Broker precentage fee (if paid via a Broker)\r\n_}",
      "name": "Bond redeemed",
      "description": "Triggered when you redeem a combat bond",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bond_amount', event.amount)}\r\n\r\nCombat bonds for {Humanise(event.amount)} credits \r\n{Occasionally(2, OneOf(\"have been\", \"have now been\"))}\r\n{OneOf(\"redeemed\", \"claimed\")}\r\n\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\r\n    from {P(event.rewards[0].faction, \"faction\")}\r\n  |else:\r\n    . \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n      {if len(event.rewards[cur].faction) > 0:\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            and\r\n        }\r\n        {Humanise(event.rewards[cur].amount)} credits from\r\n        {P(event.rewards[cur].faction, \"faction\")} \r\n        {set cur to cur + 1}\r\n      }\r\n    }\r\n  }\r\n\")}\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0:\r\n    after deducting\r\n    {OneOf(\"payments\", \"fees\")} of\r\n    {Humanise(round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0))} credits\r\n}."
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Bounty awarded\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(2000)}\r\n\r\n{Occasionally(3, OneOf('jippie jai jäh, Schweinebacke.','Glückwunsch {F(\"Honorific\")}.','Und wieder einer weniger.'))}\r\n{Occasionally(3, OneOf('Sie haben soeben','Mit diesem Abschuss haben Sie'))}\r\n\r\n{set value to (event.reward)}\r\n\r\n{if len(event.rewards) = 1: einen Kopfgeldbescheid von {F(\"Humanise ValueGer\")} credditts \r\n\tvon {set from to 1} {set translate to event.rewards[0].faction} {F(\"Translate Power\")} erhalten\r\n|elif len(event.rewards) > 1: {len(event.rewards)} Kopfgeldbescheide über insgesamt \r\n\t{F(\"Humanise ValueGer\")} credditts erhalten\r\n}\r\n\r\n{if event.shared: , und mit Ihrem Geschwader geteilt\r\n}.\r\n\r\n{_\r\n- target   The name of the pilot or ship you destroyed (if applicable)\r\n- faction  The name of the faction whose ship you destroyed\r\n- reward   The total number of credits obtained for destroying the ship\r\n- rewards  The rewards obtained for destroying the ship\r\n- shared   True if the rewards have been shared with wing-mates\r\n_}",
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Bounty voucher of {Humanise(event.reward)} credits received from {P(event.rewards[0].faction, \"faction\")}\r\n|elif len(event.rewards) > 1:\r\n    {len(event.rewards)} bounty vouchers received for a total of {Humanise(event.reward)} credits\r\n}\r\n{if event.shared:\r\n    to share between yourself and your wing-mates\r\n}.\r\n"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Bounty incurred\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{set translate to event.faction}\r\n{OneOf(\"{F('Translate Power')} hat gerade ein Kopfgeld von {event.bounty} credditts \r\n\t\t{F('Crime descriptions')}\", \"{F('Crime descriptions')} \r\n\t\twurde soeben {set from to 1} {F('Translate Power')} \r\n\t\tein Kopfgeld in Höhe von {event.bounty} credditts\")} auf Sie ausgesetzt.\r\n\r\n{_\r\n- crimetype  The type of crime committed\r\n- crime      The decription of the crime committed\r\n- victim     The name of the victim of the crime\r\n- faction    The name of the faction issuing the bounty\r\n- bounty     The number of credits issued as the bounty\r\n_}\r\n",
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{P(event.faction, \"faction\")} just put a bounty of {Humanise(event.bounty)} credits on your head for {event.crime}."
    },
    "Bounty paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Bounty paid\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nStrafe von {Humanise(event.amount)} credditts bezahlt.\r\n\r\n{_\r\n- amount            The amount of the bounty paid\r\n- brokerpercentage  Broker percentage (if paid via a Broker)\r\n- allbounties       Whether this payment covers all current bounties (true or false)\r\n- faction           The faction to which the bounty was paid\r\n- shipid            The ship id of the ship associated with the fine\r\n_}",
      "name": "Bounty paid",
      "description": "Triggered when you pay a bounty",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nPaid bounty of {Humanise(event.amount)} credits."
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Bounty redeemed\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\nKopfgeldbescheinigung über {set value to event.amount} {F(\"Humanise ValueGer\")} credditts\r\n{Occasionally(2, \"{set from to 1}\r\n  {if len(event.rewards) = 1 : von {set translate to event.rewards[0].faction} {F(\"Translate Power\")}\r\n  |else: von\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1 : , \r\n        |else: und\r\n        }\r\n        \r\n        {set translate to event.rewards[cur].faction} {F(\"Translate Power\")}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")} eingelöst.\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0 : nach Abzug\r\n    {OneOf(\"von Zahlungen\", \"der Gebühren\")} von\r\n    {Humanise(round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0))} credditts\r\n}.\r\n\r\n{_\r\n- rewards           The rewards obtained broken down by faction\r\n- amount            The amount rewarded (after any broker fees)\r\n- brokerpercentage  Broker precentage fee (if paid via a Broker)\r\n_}\r\n",
      "name": "Bounty redeemed",
      "description": "Triggered when you redeem a bounty voucher",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\nBounty vouchers for {Humanise(event.amount)} credits \r\n{Occasionally(2, OneOf(\"have been\", \"have now been\"))}\r\n{OneOf(\"redeemed\", \"claimed\")}\r\n\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\r\n    from {P(event.rewards[0].faction, \"faction\")}\r\n  |else:\r\n    . \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n      {if len(event.rewards[cur].faction) > 0:\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            and\r\n        }\r\n        {Humanise(event.rewards[cur].amount)} credits from\r\n        {P(event.rewards[cur].faction, \"faction\")} \r\n        {set cur to cur + 1}\r\n      }\r\n    }\r\n  }\r\n\")}\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0:\r\n    after deducting\r\n    {OneOf(\"payments\", \"fees\")} of\r\n    {Humanise(round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0))} credits\r\n}."
    },
    "Cargo": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI EVENT: Cargo\")}\r\n\r\n{SetState(\"cargo_carried\", cargoCarried)}\r\n\r\n{if state.ansage_frachtraum = 1 :\r\n\t{if ship.role != \"Bergbau\":\r\n\t\t{if state.last_skript = \"Cargo depot\" \r\n\t\t|| state.last_skript = \"Commodity purchased\" \r\n\t\t|| state.last_skript = \"Commodity sold\" :\r\n\t\t\t{ if ship.cargocapacity - cargoCarried > 0 : \r\n\t\t\t\tIn unserem Frachtraum ist noch Platz für \r\n\t\t\t\t{if ship.cargocapacity - cargoCarried = 1: eine Tonne \r\n\t\t\t\t|else: {ship.cargocapacity - cargoCarried} Tonnen} Fracht.\r\n\t\t\t|else: {OneOf(\"Unser Frachtraum ist voll!\", \r\n\t\t\t\t\t\t\"Es steht Kein freier Frachtraum mehr zur Verfügung\")}\r\n\t\t\t}\r\n\t\t}\r\n\t|else:\r\n\t}\r\n|else:\r\n}",
      "name": "Cargo",
      "description": "Triggered when a vehicle cargo inventory is updated.",
      "default": false,
      "defaultValue": null
    },
    "Cargo alt": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI EVENT: Cargo\")}\r\n\r\n{Pause(500)}\r\n\r\n{set cargo to CargoDetails(\"Drohne\")}\r\n{_ 1. Vergleich Cargo total gleich _cargo.total_ , Merker A gleich _state.merker_drohnen_a_,  _}\r\n{if cargo.total < state.merker_drohnen_a:\r\n\t{_ 2. Vergleich Cargo total gleich _cargo.total_, Merker B gleich _state.merker_drohnen_b_, _}\r\n\t{if cargo.total < state.merker_drohnen_b - 10: \r\n\t\tWir haben mehr als 10 {cargo.name}{if cargo.total != 1:n} verbraucht.\r\n\t\t{set cargo_frei to ship.cargocapacity - cargoCarried}\r\n\t\t{if cargo_frei = 0\t: {OneOf(\"Der Frachtraum ist voll.\", \r\n\t\t\t\"Es steht kein Frachtraum mehr zur Verfügung.\", \"Wir haben leider keinen Platz mehr, alles voll.\")}\r\n\t\t|elif cargoCarried = 0\t: {OneOf(\"Wir haben einen leeren Frachtraum.\", \r\n\t\t\t\"{OneOf('Der', 'Unser')} Frachtraum ist leer.\")}\r\n\t\t|else\t: Der Frachtraum beinhaltet zur Zeit {cargoCarried} \r\n\t\t\t{if cargoCarried = 1: Tonne |else: Tonnen} Fracht von möglichen {ship.cargocapacity},.\r\n\t\t\tEs stehen {cargo_frei} Tonnen freier Frachtraum zur Verfügung.\r\n\t\t} \t\r\n\t\t{SetState(\"merker_drohnen_b\", cargo.total)}\r\n\t\t{SetState(\"merker_drohnen_a\", cargo.total)}\r\n\t|else: {SetState(\"merker_drohnen_a\", cargo.total)}\r\n\t}\r\n|else:\r\n\t{SetState(\"merker_drohnen_b\", cargo.total)}\r\n\t{SetState(\"merker_drohnen_a\", cargo.total)}\r\n\t{set cargo_frei to ship.cargocapacity - cargoCarried}\r\n\t{if cargo_frei = 0\t: {OneOf(\"Der Frachtraum ist voll.\", \r\n\t\t\"Es steht kein Frachtraum mehr zur Verfügung.\", \"Wir haben leider keinen Platz mehr, alles voll.\")}\r\n\t|elif cargoCarried = 0\t: {OneOf(\"Wir haben einen leeren Frachtraum, {cargo_frei} Tonnen.\", \r\n\t\t\"{OneOf('Der', 'Unser')} Frachtraum, {cargo_frei} Tonnen, ist leer.\")}\r\n\t|else\t: Der Frachtraum beinhaltet zur Zeit {cargoCarried} \r\n\t\t{if cargoCarried = 1: Tonne |else: Tonnen} Fracht von möglichen {ship.cargocapacity},.\r\n\t\tEs stehen {cargo_frei} Tonnen freier Frachtraum zur Verfügung.\r\n\t}\r\n}\r\n\r\n{_ inventory[0].name}\r\n\r\n",
      "name": "Cargo alt",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Cargo collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Cargo collected\")}\n\n{if event.cargo: {set translate to event.cargo} {F(\"Translate Commodity\")}\n|else:           Ware\n}\n{set translate to event.cargo} {F(\"Translate Commodity\")} {OneOf(\"ist jetzt an Bord\",\"eingesammelt\",\"zur Fracht hinzu gefügt\")}.\n\n{if event.stolen:\n  Achtung: Diese Ware ist als gestohlen markiert..\n}\n\n{if len(event.missionid) > 0:\n  Diese Ware ist ein Missionsziel. Sie sollten sie gut sichern.\n}\n",
      "name": "Cargo collected",
      "description": "Triggered when you pick up cargo in your ship or SRV",
      "default": false,
      "defaultValue": null
    },
    "Cargo depot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Cargo mission-depot\")}\r\n\r\n{_ Cargo depot _}\r\n{_ Triggered when engaging with a mission depot _}\r\n{SetState('last_skript', \"Cargo depot\")}\r\n\r\n\r\n{if event.updatetype = \"Collect\": Wir haben {event.amount} Tonne{if event.amount != 1:n} \r\n\t{set translate to event.commodity} {F(\"Translate Commodity\")} aus dem Missionslager eingeladen.\r\n\r\n|elif event.updatetype = \"Deliver\": Wir haben {event.amount} Tonne{if event.amount != 1:n} \r\n\t{set translate to event.commodity} {F(\"Translate Commodity\")} an das Missionslager geliefert.\r\n\r\n    {Pause(500)}\r\n    {set remaining to event.totaltodeliver - event.delivered}\r\n    {set haulage to HaulageDetails(event.missionid)}\r\n\r\n    {if find(haulage.name, \"Wing\") > -1:   Geschwader\r\n    |elif find(haulage.name, \"Rank\") > -1: Rang\r\n    |else:                                 Einzel\r\n    }\r\n\r\n    {if remaining = 0 : Mission wurde erfolgreich beendet.\r\n    |else:              Mission ist jetzt zu \r\n    \t\t\t{round(event.delivered / event.totaltodeliver * 100, 0)} Prozent abgeschlossen.\r\n    }\r\n}\r\n\r\n{SetState('mission_depot', true)}\r\n\r\n{_\r\n- missionid       The ID of the mission\r\n- updatetype      The update type. One of: 'Collect', 'Deliver', 'WingUpdate'\r\n- cargotype       The type of cargo (commodity)\r\n- startmarketid   The Market ID of the 'collection' mission depot, 0 if not applicable\r\n- endmarketid     The Market ID of the 'delivery' mission depot\r\n- amount          The amount of cargo collected or delivered for this event\r\n- collected       The total amount of cargo collected\r\n- delivered       The total amount of cargo delivered\r\n- totaltodeliver  The total amount of cargo to deliver to complete the mission\r\n_}",
      "name": "Cargo depot",
      "description": "Triggered when engaging with a mission depot",
      "default": false,
      "defaultValue": "{_ Cargo depot }\r\n{_ Triggered when engaging with a mission depot }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    You have collected {event.amount} tonne{if event.amount != 1:s} of {event.commodity} from the mission depot.\r\n|elif event.updatetype = \"Deliver\":\r\n    You have delivered {event.amount} tonne{if event.amount != 1:s} of {event.commodity} to the mission depot.\r\n\r\n    {Pause(500)}\r\n    {set remaining to event.totaltodeliver - event.delivered}\r\n    {set haulage to HaulageDetails(event.missionid)}\r\n\r\n    {if find(haulage.name, \"Wing\") > -1:\r\n        Wing\r\n    |elif find(haulage.name, \"Rank\") > -1:\r\n        Naval\r\n    |else:\r\n        Solo\r\n    }\r\n\r\n    {if remaining = 0:\r\n        mission requirements are now completed.\r\n    |else:\r\n        mission is now {round(event.delivered / event.totaltodeliver * 100, 0)} percent complete.\r\n    }\r\n}\r\n\r\n"
    },
    "Cargo ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Cargo ejected\")}\n\n{if event.cargo: {set translate to event.cargo} {F(\"Translate Commodity\")}\n|else:           Fracht\n}\n{OneOf(\"ausgestoßen\", \"abgeworfen\")}.",
      "name": "Cargo ejected",
      "description": "Triggered when you eject cargo from your ship or SRV",
      "default": false,
      "defaultValue": null
    },
    "Cargo inventory": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI Fktn.: Cargo inventory\")}\r\n\r\n{Pause(3000)}\r\n\r\nDer Frachtraum beinhaltet zur Zeit {cargoCarried} \r\n{if cargoCarried = 1: Tonne |else: Tonnen} Fracht von möglichen {ship.cargocapacity}.\r\n{set cargo_frei to ship.cargocapacity - cargoCarried}\r\nEs stehen {cargo_frei} Tonnen freier Frachtraum zur Verfügung.\r\n",
      "name": "Cargo inventory",
      "description": "Triggered when you obtain an inventory of your cargo",
      "default": false,
      "defaultValue": null
    },
    "Cargo legality check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Cargo legality check\")}\r\n\r\n{set station to StationDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{_ Function to find a given commodity in market _}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.EDDBID = commodity.EDDBID:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name != 'Drohne':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {_ We have no market information for this commodity.  Legal status unknown. _}\r\n        {if !marketcommodity: {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        }\r\n        {if cargo.stolen = true: {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any stolen commodities in their hold _}\r\n{set cargo_desc to OneOf(\"Fracht\", \"Waren\")}\r\n{set stolen to OneOf(\"gestohlene\", \"illegale\")}\r\n\r\n{if len(stolencommodities) > 0: Erinnerung: Wir\r\n     {OneOf(\"haben {stolen} {cargo_desc} an Bord\",\"transportieren {stolen} {cargo_desc}\")}.\r\n|elif len(stolencommodities) = 0 && len(unknowncommodities) > 0: Ein Teil \r\n\t{set pref to OneOf(\"unserer\", \"Ihrer\", \"der\")}\r\n    {OneOf(\"{pref} Waren\", \"{pref} Güter\", \"{pref} Fracht\")}\r\n    im Frachtraum konnte nicht katalogisiert werden. Wir \r\n    {OneOf(\"könnten {stolen} {cargo_desc} an Bord haben\",\r\n    \"transportieren möglicherweise {stolen} {cargo_desc}\"\r\n     )}.\r\n}",
      "name": "Cargo legality check",
      "description": "(TESTING) Check to make sure that your not carrying illegal cargo",
      "default": false,
      "defaultValue": null
    },
    "Cargo report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI-Fktn.: Cargo report\")}\r\n\r\n{_ Cargo report _}\r\n{_ Report current cargo manifest _}\r\n{_ set translate to (event.power)} {_ F('Translate Power') _}\r\n\r\n{set cargocarried to 0}\r\n{set haulage to 0}\r\n{set illegal to false}\r\n{set stolen to false}\r\n\r\n{if len(inventory) > 0:\r\n    {for cargo in inventory:\r\n        {set cargocarried to cargocarried + cargo.total}\r\n        {set haulage to haulage + cargo.haulage}\r\n        {if cargo.stolen > 0: {set stolen to true}}\r\n        {if status.docked:\r\n            {for prohibited in station.prohibited:\r\n                {if cargo.name = prohibited.name: {set illegal to true}}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{if cargocarried > 0:\r\n    {if cargocarried = ship.cargocapacity: Unser Frachtraum ist voll\r\n    |else : Wir transportieren {cargocarried} Tonne{if cargocarried != 1:n}\r\n    }\r\n\r\n    {if len(inventory) = 1:\r\n        {if inventory[0].name = \"Limpet\" || inventory[0].name = \"Drohne\": Drohnen.\r\n        |else:\r\n            {inventory[0].name}.\r\n            {if haulage = cargocarried: Info: Alle Fracht ist missionsbezogen.\r\n            }\r\n        }\r\n    |else:\r\n        {if cargocarried < ship.cargocapacity: Fracht}.\r\n        {Occasionally(2, \"Fracht\")} {OneOf(\"Liste\", \"Inventar\")} ist wie folgt:\r\n        {set c to []}\r\n        {for cargo in inventory:\r\n            {if cargo.total > 0:\r\n                {set c to cat(c, [cargo])}\r\n            }\r\n        }\r\n\r\n        {set position to 0}\r\n        {for cargo in c:\r\n            {cargo.total}  Tonne{if cargo.total != 1:n}\r\n            {if cargo.name = \"Limpet\" || cargo.name = \"Drohne\"\t: Drohnen\r\n            |else: {set translate to (cargo.name)} {F('Translate Commodity')}\r\n            }\r\n            {set position to position + 1}\r\n            {if position = len(c) - 1: und |else:,}\r\n        }\r\n        {if haulage > 0: Info: {haulage} Tonne{if haulage != 1:n} auf unserer Frachtliste{if haulage = 1:ist} \r\n        \t{if haulage != 1:sind} missionsbezogen.\r\n        }\r\n    }.\r\n\r\n    {if cargocarried < ship.cargocapacity:\r\n        {set free to ship.cargocapacity - cargocarried}\r\n        Wir {OneOf(\"haben {free} Tonne{if free != 1:n} freie Kapazität\",\r\n            \"haben noch Platz für {free} Tonne{if free != 1:n}\",\r\n            \"können noch {free} tonne{if free != 1:n} Fracht aufnehmen\")}.\r\n    }\r\n\r\n    {if stolen || illegal: Warnung: Wir transportieren\r\n        {if stolen: gestohlene Waren}\r\n        {if illegal:\r\n            {if stolen:, und }\r\n            und Fracht, die in diesem System illegal ist.\r\n        }.\r\n    }\r\n\r\n|else: {OneOf(\"Unser Frachtraum ist leer.\",\"Wir haben keine Fracht an Bord.\",\"Wir transportieren keine Fracht.\")}\r\n}\r\n",
      "name": "Cargo report",
      "description": "Report current cargo manifest",
      "default": false,
      "defaultValue": "{_ Cargo report }\r\n{_ Report current cargo manifest }\r\n\r\n{set cargocarried to 0}\r\n{set haulage to 0}\r\n{set illegal to false}\r\n{set stolen to false}\r\n\r\n{if len(inventory) > 0:\r\n    {for cargo in inventory:\r\n        {set cargocarried to cargocarried + cargo.total}\r\n        {set haulage to haulage + cargo.haulage}\r\n        {if cargo.stolen > 0: {set stolen to true}}\r\n        {if status.docked:\r\n            {for prohibited in station.prohibited:\r\n                {if cargo.name = prohibited.name: {set illegal to true}}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{if cargocarried > 0:\r\n    {if cargocarried = ship.cargocapacity:\r\n        Your cargo {OneOf(\"bay\", \"hold\")} is full\r\n    |else:\r\n        You are carrying {cargocarried} tonne{if cargocarried != 1:s}\r\n    }\r\n\r\n    {if len(inventory) = 1:\r\n        {if inventory[0].name = \"Limpet\":\r\n            of limpets.\r\n        |else:\r\n            of {inventory[0].name}.\r\n            {if haulage = cargocarried:\r\n                Note: All cargo is mission related haulage.\r\n            }\r\n        }\r\n    |else:\r\n        {if cargocarried < ship.cargocapacity: of cargo}.\r\n        {Occasionally(2, \"Cargo\")} {OneOf(\"Manifest\", \"Inventory\")} is as follows:\r\n\r\n        {set c to []}\r\n        {for cargo in inventory:\r\n            {if cargo.total > 0:\r\n                {set c to cat(c, [cargo])}\r\n            }\r\n        }\r\n\r\n        {set position to 0}\r\n        {for cargo in c:\r\n            {cargo.total} tonne{if cargo.total != 1:s} of \r\n            {if cargo.name = \"Limpet\":\r\n                limpets\r\n            |else:\r\n                {cargo.name}\r\n            }\r\n            {set position to position + 1}\r\n            {if position = len(c) - 1: and |else:,}\r\n        }\r\n        {if haulage > 0:\r\n            Note: {haulage} tonne{if haulage != 1:s} of your manifest is mission related haulage.\r\n        }\r\n    }.\r\n\r\n    {if cargocarried < ship.cargocapacity:\r\n        {set free to ship.cargocapacity - cargocarried}\r\n        You {OneOf(\"have {free} tonne{if free != 1:s} free\",\r\n            \"have {free} tonne{if free != 1:s} of free space\",\r\n            \"can carry an additional {free} tonne{if free != 1:s}\")}.\r\n    }\r\n\r\n    {if stolen || illegal:\r\n        Warning: You are carrying\r\n        {if stolen: stolen goods}\r\n        {if illegal:\r\n            {if stolen:, and }\r\n            goods that are illegal in this jurisdiction\r\n        }.\r\n    }\r\n\r\n|else:\r\n    {OneOf(\"Your cargo bay is empty.\",\"You have no cargo.\",\"You are carrying no cargo.\")}\r\n}"
    },
    "Cargo Report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI-Fktn.: Cargo Report\")}\n\n{_ ehemals Cargo _}\n{_ Report current cargo manifest _}\n{_ set translate to (event.power)} {_ F('Translate Power') _}\n\n{Pause(500)}\n\n{set cargocarried to 0}\n{set haulage to 0}\n{set illegal to false}\n{set stolen to false}\n\n{if len(inventory) > 0:\n    {for cargo in inventory:\n        {set cargocarried to cargocarried + cargo.total}\n        {set haulage to haulage + cargo.haulage}\n        {if cargo.stolen > 0: {set stolen to true}}\n        {if status.docked:\n            {for prohibited in station.prohibited:\n                {if cargo.name = prohibited: {set illegal to true}}\n            }\n        }\n    }\n} \n\n\n{Pause(500)}\n\n{if state.cargo_carried > 0:\n    {if state.cargo_carried = ship.cargocapacity: Unser Frachtraum ist voll\n    |else : Wir transportieren {state.cargo_carried} Tonne{if state.cargo_carried != 1:n}\n    }\n\n    {if len(inventory) = 1:\n        {if inventory[0].name = \"Limpet\" || inventory[0].name = \"Drohne\": Drohnen.\n        |else:\n            {set translate to (inventory[0].name)} {F('Translate Commodity')}.\n            {if haulage = cargocarried: Info: Alle Fracht ist missionsbezogen.\n            }\n        }\n    |else:\n        {if cargocarried < ship.cargocapacity: Fracht}.\n        Frachtliste:\n        {set c to []}\n        {for cargo in inventory:\n            {if cargo.total > 0:\n                {set c to cat(c, [cargo])}\n            }\n        }\n\n        {set position to 0}\n        {for cargo in c:\n            {cargo.total}  Tonne{if cargo.total != 1:n}\n            {if cargo.name = \"Limpet\" || cargo.name = \"Drohne\"\t: Drohnen\n            |else\t\t\t\t\t\t\t\t: {set translate to (cargo.name)} {F('Translate Commodity')}\n            }\n            {set position to position + 1}\n            {if position = len(c) - 1: und |else:,}\n        }\n        {if haulage > 0: Info: {haulage} Tonne{if haulage != 1:n} auf unserer Frachtliste{if haulage = 1:ist} \n        \t{if haulage != 1:sind} missionsbezogen.\n        }\n    }.\n\n    {if cargocarried < ship.cargocapacity:\n        {set free to ship.cargocapacity - cargocarried}\n        Wir {OneOf(\"haben {free} Tonne{if free != 1:n} freie Kapazität\",\n            \"haben noch Platz für {free} Tonne{if free != 1:n}\",\n            \"können noch {free} tonne{if free != 1:n} Fracht aufnehmen\")}.\n    }\n\n    {if stolen || illegal: Warnung: Wir transportieren\n        {if stolen: gestohlene Waren}\n        {if illegal:\n            {if stolen:, und }\n            und Fracht, die in diesem System illegal ist.\n        }.\n    }\n\n|else: {OneOf(\"Unser Frachtraum ist leer.\",\"Wir haben keine Fracht an Bord.\",\"Wir transportieren keine Fracht.\")}\n}",
      "name": "Cargo Report",
      "description": "Test (EVENT Cargo)",
      "default": false,
      "defaultValue": null
    },
    "Cargo scoop": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI Event: Cargo scoop\")}\r\n\r\n{OneOf(\"Frachtluke\",\"Ladeluke\")} \r\n{  if event.deployed: offen\r\n|else               : geschlossen\r\n}.\r\n\r\n{_\r\n- deployed A boolean value. True if your cargo scoop is deployed.\r\n_}",
      "name": "Cargo scoop",
      "description": "Triggered when you deploy or retract your cargo scoop",
      "default": false,
      "defaultValue": null
    },
    "Cargo updated": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Cargo updated\")}\r\n\r\n{_ Cargo updated _}\r\n{_ Triggered when the cargo inventory is updated _}\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'cargo')}\r\n{SetState('eddi_context_last_action', 'updated')}\r\n{SetState('eddi_context_cargo_carried', event.cargocarried)}\r\n",
      "name": "Cargo updated",
      "description": "Triggered when the cargo inventory is updated",
      "default": false,
      "defaultValue": null
    },
    "Cargo wingupdate": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI Event: Cargo wingupdate\")}\r\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\r\n\r\n{if event.updatetype = \"Collect\":\r\n    Unser Geschwadermitglied hat {event.amount} Tonne{if event.amount != 1:n}\r\n    {if event.commodity != \"Unknown\": {event.commodity}} aus dem Missionsdepot geladen.\r\n|elif event.updatetype = \"Deliver\":\r\n    Unser Geschwadermitglied hat {event.amount} Tonne{if event.amount != 1:n} \r\n    {if event.commodity != \"Unknown\": {event.commodity}} an das Missionslager geliefert.\r\n}\r\n\r\n{Pause(500)}\r\n{set remaining to event.totaltodeliver - event.delivered}\r\n{if remaining = 0:\r\n    Geschwadermission ist jetzt vollständig erfüllt.\r\n|elif event.updatetype = \"Deliver\":\r\n    Geschwadermission ist nun zu {round(event.delivered / event.totaltodeliver * 100, 0)} Prozent erfüllt.\r\n}\r\n\r\n{_\r\n- missionid       The ID of the mission\r\n- updatetype      The update type. 'Collect' or 'Deliver'\r\n- commodity       The type of cargo (commodity)\r\n- amount          The amount of cargo collected or delivered for this event\r\n- collected       The total amount of cargo collected\r\n- delivered       The total amount of cargo delivered\r\n- totaltodeliver  The total amount of cargo to deliver to complete the mission\r\n_}",
      "name": "Cargo wingupdate",
      "description": "Triggered when a wing-mate collects or delivers cargo for a wing mission",
      "default": false,
      "defaultValue": "{_ Cargo wingupdate }\r\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    Your wing mate has collected {event.amount} tonne{if event.amount != 1:s}\r\n    {if event.commodity != \"Unknown\": of {event.commodity}} from the mission depot.\r\n|elif event.updatetype = \"Deliver\":\r\n    Your wing mate has delivered {event.amount} tonne{if event.amount != 1:s} \r\n    {if event.commodity != \"Unknown\": of {event.commodity}} to the mission depot.\r\n}\r\n\r\n{Pause(500)}\r\n{set remaining to event.totaltodeliver - event.delivered}\r\n{if remaining = 0:\r\n    Wing mission requirements are now completed.\r\n|elif event.updatetype = \"Deliver\":\r\n    Wing mission is now {round(event.delivered / event.totaltodeliver * 100, 0)} percent complete.\r\n}\r\n"
    },
    "Carrier cooldown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Carrier cooldown\")}\r\n\r\n{OneOf(\"Abkühlung\", \"Cooldown-Phase\", \"Flottenträger Kühlung\")} {OneOf(\"beendet\", \"abgeschlossen\")}.\r\n\r\n{_ -VARIABLEN- _}\r\n{_ event.systemname}\r\n{_ event.bodyname}\r\n{_ event.bodytype}\r\n{_ event.shortname}\r\n{_ event.carriername}",
      "name": "Carrier cooldown",
      "description": "Triggered when you either were docked at a fleet carrier during a jump or are the fleet carrier owner and it completes its cooldown",
      "default": false,
      "defaultValue": "Fleet carrier cooldown completed."
    },
    "Carrier jump cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Carrier jump cancelled\")}\r\n\r\nSprung abgebrochen.\r\n\r\n\r\n\r\n\r\n",
      "name": "Carrier jump cancelled",
      "description": "Triggered when you cancel a scheduled fleet carrier jump",
      "default": false,
      "defaultValue": "Fleet carrier jump cancelled."
    },
    "Carrier jump engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Carrier jump engaged\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'carrier jump')}\r\n{SetState('eddi_context_last_action', 'start')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_system_lastvisit', system.lastVisitSeconds)}\r\n\r\n{if environment = \"Docked\":\r\n\r\n    {_ Zero the 'remaining jump' context to only use values following this event _}\r\n    {SetState('eddi_context_remaining_jumps', 0)}\r\n\r\n    {set reportsystem to SystemDetails(event.systemname)}\r\n\r\n\tWir {OneOf(\"sind\", \"befinden uns\")} {OneOf(\"auf Kurs\", \"auf dem Weg\", \"auf dem Sprung\")} zum System \r\n\t{if (reportsystem.systemname) = \"Shinrarta Dezhra\": schinrata |else: {P(reportsystem.systemname)}}\r\n        {if len(event.shortname) > 0:\r\n        {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n        nahe\r\n        {if len(reportBody.bodytype) > 0: {reportBody.bodytype} |else: Himmelskörper}\r\n        {P(event.shortname)}\r\n    }.\r\n\r\n    {if reportsystem.systemname = homesystem.systemname:\r\n        Willkommen zu Hause, {F(\"Honorific\")}\r\n    |else:       \r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Keine\" \r\n        && lastsystem.allegiance != \"Independent\" && lastsystem.allegiance != \"Unabhängig\" \r\n        && (!reportsystem.allegiance || reportsystem.allegiance = \"None\" || reportsystem.allegiance = \"Keine\"\r\n        || reportsystem.allegiance = \"Independent\") || reportsystem.allegiance = \"Unabhängig\":\r\n            und verlassen {OneOf(\"jetzt\", \"gerade\", \"hiermit\", \"somit\", \"derzeit\")} {lastsystem.allegiance}s Raum.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != reportsystem.allegiance && system.allegiance \r\n        && system.allegiance != \"None\" && system.allegiance != \"Keine\":\r\n            und betreten {OneOf(\"jetzt\", \"gerade\", \"hiermit\", \"somit\", \"derzeit\")} {reportsystem.allegiance}s space.\r\n            {if cmdr.title != \"Commander\" && cmdr.title != \"Kommandant\" : {set welcome to cat('Willkommen zurück ', F('Honorific'))}.\r\n            }\r\n            \r\n        }\r\n\r\n        {if reportsystem.visits = 0: Dies ist unser erster Besuch.\r\n        |elif reportsystem.visits = 1: Wir haben dieses System bereits einmal besucht.\r\n        |elif reportsystem.visits = 2: {Occasionally(2, \"Dies ist unser dritter Besuch\")}\r\n        |elif reportsystem.visits = 3: {Occasionally(2, \"Dies ist unser vierter Besuch.\")}\r\n        |else: Wir haben dieses System {OneOf(\"bereits\", \"schon\")} {reportsystem.visits} mal besucht.\r\n        }\r\n\r\n        {if reportsystem.population && reportsystem.population > 0:\r\n            {if SecondsSince(reportsystem.lastVisitSeconds) > 3600:\r\n                {F(\"System report\")}\r\n            }\r\n        |else: {OneOf(\"Dieses System ist unbesiedelt\", \"Registriere keinerlei Anzeichen auf humanoiedes Leben\", \r\n\t\t\t\t\"Dieses  System wurde noch nicht kolonisiert\")}.\r\n        }\r\n\r\n        {if reportsystem.distancefromhome:\r\n            {set ReportDistanceFromHome() to:\r\n                {return cat(\r\n                \tOneOf(\"Wir sind\", \"aktuelle Position,\", \"Wir sind jetzt\"), \" \",\r\n\t                Humanise(reportsystem.distancefromhome), \" Lichtjahre von \",\r\n\t                OneOf(\"zu Hause\", \"{P(homesystem.name)}\"), \" entfernt.\"\r\n\t            )}\r\n            }\r\n            {Occasionally(7, ReportDistanceFromHome())}\r\n        }\r\n\r\n        {if reportsystem.comment:\r\n            Wir haben {OneOf(\"eine Notiz\", \"einen Vermerk\", \"Einen Kommentar\")} {OneOf(\"über\", \"für\", \"zu\")} diesem System.  \r\n\t\t\t{OneOf(\"Mit dem Inhalt:\", \"Der Besagt,\", \"lese vor:\", \" Der Inhalt lautet?\")} {reportsystem.comment}.\r\n        }\r\n    }\r\n|else:\r\n    {OneOf(\"Carrier\", \"Träger\", \"Flottenträger\")} in {P(event.systemname)} angekommen,\r\n    {if len(event.shortname) > 0:\r\n        {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n        {OneOf(\"nahe\", \"in der Nähe von\")}\r\n        {if len(reportBody.bodytype) > 0: {reportBody.bodytype} |else: einem unbekanntem Himmelskörper}\r\n        {P(event.shortname)}\r\n    }.\r\n}\r\n\r\n{_ VARIABLEN _}\r\n{_ event.systemname - The name of the destination star system}\r\n{_ event.bodyname - The name of the destination body, if any}\r\n{_ event.shortname - The short name of the destination body, if any}\r\n\r\n",
      "name": "Carrier jump engaged",
      "description": "Triggered when your fleet carrier performs a jump",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'carrier jump')}\r\n{SetState('eddi_context_last_action', 'start')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_system_lastvisit', system.lastVisitSeconds)}\r\n\r\n{if environment = \"Docked\":\r\n\r\n    {_ Zero the 'remaining jump' context to only use values following this event _}\r\n    {SetState('eddi_context_remaining_jumps', 0)}\r\n\r\n    {set reportsystem to SystemDetails(event.systemname)}\r\n\r\n    {OneOf(\"Jump in progress\",\"Entering portal\")} to the {P(reportsystem.systemname, \"starsystem\")} system\r\n        {if len(event.shortname) > 0:\r\n        {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n        near\r\n        {if len(reportBody.bodytype) > 0: {reportBody.bodytype} |else: body}\r\n        {P(event.shortname, \"body\")}\r\n    }.\r\n\r\n    {if reportsystem.systemname = homesystem.systemname:\r\n        Welcome home, {F(\"Honorific\")}\r\n    |else:       \r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!reportsystem.allegiance || reportsystem.allegiance = \"None\" || reportsystem.allegiance = \"Independent\"):\r\n            You {OneOf(\"are leaving\", \"have left\", \"are no longer in\")} {lastsystem.allegiance} space.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != reportsystem.allegiance && system.allegiance && system.allegiance != \"None\":\r\n            You {OneOf(\"are now in\", \"have entered\", \"are entering\")} {reportsystem.allegiance} space.\r\n            {if cmdr.title != \"Commander\":\r\n                Welcome back {F(\"Honorific\")}.\r\n            }\r\n        }\r\n\r\n        {if reportsystem.visits = 0:\r\n            This is your first visit to this system.\r\n        |elif reportsystem.visits = 1:\r\n            This is your second visit to this system.\r\n        |elif reportsystem.visits = 2:\r\n            {Occasionally(2, \"This is your third visit to this system.\")}\r\n        |elif reportsystem.visits = 3:\r\n            {Occasionally(2, \"This is your fourth visit to this system.\")}\r\n        |else:\r\n            {Occasionally(3, \"You have visited this system {reportsystem.visits} times.\")}\r\n        }\r\n\r\n        {if reportsystem.population && reportsystem.population > 0:\r\n            {if SecondsSince(reportsystem.lastVisitSeconds) > 3600:\r\n                {F(\"System report\")}\r\n            }\r\n        |else:\r\n            {OneOf(\"This system is not populated\",\"There is no human presence here\", \"Humans have yet to colonise this system\")}.\r\n        }\r\n\r\n        {if reportsystem.distancefromhome:\r\n            {set ReportDistanceFromHome() to:\r\n                {return cat(\r\n                \tOneOf(\"You are\", \"Current location is\", \"You are now\"), \" \",\r\n\t                Humanise(reportsystem.distancefromhome), \" lightyears from \",\r\n\t                OneOf(\"home\", \"{P(homesystem.name, \"starsystem\")}\"), \".\"\r\n\t            )}\r\n            }\r\n            {Occasionally(7, ReportDistanceFromHome())}\r\n        }\r\n\r\n        {if reportsystem.comment:\r\n            You made a {OneOf(\"note\", \"comment\", \"remark\")} {OneOf(\"about\", \"for\", \"on\")} this system.  It {OneOf(\"is as follows\", \"says\", \"reads\", \"is\")} {reportsystem.comment}.\r\n        }\r\n    }\r\n|else:\r\n    Fleet carrier arriving at the {P(event.systemname, \"starsystem\")} system\r\n    {if len(event.shortname) > 0:\r\n        {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n        near\r\n        {if len(reportBody.bodytype) > 0: {reportBody.bodytype} |else: body}\r\n        {P(event.shortname, \"body\")}\r\n    }.\r\n}"
    },
    "Carrier jump request": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Carrier jump request\")}\r\n\r\n{OneOf(\"Carrier\", \"Träger\", \"Flotten Träger\")} Sprung ist geplant mit Kurs auf das system {P(event.systemname)}.\r\n{if len(event.shortname) > 0:\r\n    {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n    , Ankunft in der Nähe von\r\n    {if len(reportBody.bodytype) > 0: {reportBody.bodytype} |else: einem unbekannten Himmelskörper}\r\n    {P(event.shortname)}\r\n}.\r\n\r\n{_ Variablen _}\r\n{_ event.systemname - The name of the destination star system}\r\n{_ event.bodyname - The name of the destination body, if any}\r\n{_ event.shortname - The short name of the destination body, if any}\r\n\r\n",
      "name": "Carrier jump request",
      "description": "Triggered when you request that your fleet carrier performs a jump",
      "default": false,
      "defaultValue": "Fleet carrier jump scheduled. Course laid in for the {P(event.systemname, \"starsystem\")} star system\r\n{if len(event.shortname) > 0:\r\n    {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n    , arriving near\r\n    {if len(reportBody.bodytype) > 0: {reportBody.bodytype}: |else: body: }\r\n    {P(event.shortname, \"body\")}\r\n}."
    },
    "Carrier jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EVENT: Carrier jumped\")}\r\n{_ Triggered when you are docked at a fleet carrier as it completes a jump }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'carrier jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', event.systemname)}\r\n{SetState('eddi_context_system_system', event.systemname)}\r\n{SetState('eddi_context_wanted_list', \"\")}\r\n\r\n{OneOf(\"Carrier\", \"Träger\", \"Flotten Träger\")} {P(event.carriername)} ist im System {P(event.systemname)} angekommen\r\n{if event.bodyname && len(event.bodyname) > 0:\r\n    , in der Nähe von {event.bodytype} {P(event.bodyname)}\r\n}.\r\n{Pause(1000)}\r\n\r\n{_ Update mission data if we have arrived at our mission destination. _}\r\n{if destinationsystem && destinationsystem.name != \"\":\r\n    {RouteDetails(\"update\")}\r\n}\r\n\r\n{_ Report faction states only if it's been more than an hour (3600 seconds) since our last visit. _}\r\n{if SecondsSince(state.eddi_context_system_lastvisit) / 3600 > 1:\r\n    {set state_report to F(\"System state report\")}\r\n}\r\n\r\n{set system_missions to F(\"Mission check system\")}\r\n{set system_crimes to F(\"Crime check system\")}\r\n\r\n{if state_report || system_missions || (system_crimes && find(system_crimes, \"Warning\") < 0):\r\n    {Pause(500)}\r\n    Information zum System:\r\n}\r\n\r\n{if state_report:\r\n    {Pause(500)}\r\n    {state_report}\r\n}\r\n{if system_missions:\r\n    {Pause(500)}\r\n    {system_missions}\r\n}\r\n{if system_crimes:\r\n    {Pause(500)}\r\n    {system_crimes}\r\n}\r\n\r\n{_ VARIABLEN _}\r\n{_ event.systemname The name of the system into which the carrier has jumped}\r\n{_ event.x The X co-ordinate of the system into which the carrier has jumped}\r\n{_ event.y The Y co-ordinate of the system into which the carrier has jumped}\r\n{_ event.z The Z co-ordinate of the system into which the carrier has jumped}\r\n{_ event.economy The economy of the system into which the carrier has jumped, if any}\r\n{_ event.economy2 The secondary economy of the system into which the carrier has jumped, if any}\r\n{_ event.security The security of the system into which the carrier has jumped, if any}\r\n{_ event.population The population of the system into which the carrier has jumped, if any}\r\n{_ event.systemfaction The faction controlling the system into which the carrier has jumped, if any}\r\n{_ event.systemstate The state of the faction controlling the system into which the carrier has jumped, if any}\r\n{_ event.systemgovernment The government of the system into which the carrier has jumped, if any}\r\n{_ event.systemallegiance The allegiance of the system into which the carrier has jumped, if any}\r\n{_ event.factions A list of faction objects describing the factions in the system, if any}\r\n{_ event.conflicts A list of conflict objects describing any conflicts between factions in the system, if any}\r\n{_ event.power (Only when pledged) The powerplay power exerting influence over the star system. If the star system is `Contested`, this will be empty}\r\n{_ event.powerstate (Only when pledged) The state of powerplay efforts within the star system, if any}\r\n{_ event.bodyname The nearest body to the carrier, if any}\r\n{_ event.bodytype The type of the body nearest to the carrier, if any}\r\n{_ event.shortname The short name of the nearest body, if any}\r\n{_ event.carriername The name of the carrier}\r\n\r\n",
      "name": "Carrier jumped",
      "description": "Triggered when you are docked at a fleet carrier as it completes a jump",
      "default": false,
      "defaultValue": "{_ Carrier jumped }\r\n{_ Triggered when you are docked at a fleet carrier as it completes a jump }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'carrier jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', event.systemname)}\r\n{SetState('eddi_context_system_system', event.systemname)}\r\n{SetState('eddi_context_wanted_list', \"\")}\r\n\r\nFleet carrier {Spacialise(event.carriername)} has arrived at the {P(event.systemname, \"starsystem\")} system\r\n{if event.bodyname && len(event.bodyname) > 0:\r\n    , near the {event.bodytype}: {P(event.bodyname, \"body\")}\r\n}.\r\n{Pause(1000)}\r\n\r\n{_ Update mission data if we have arrived at our mission destination. _}\r\n{if destinationsystem && destinationsystem.name != \"\":\r\n    {RouteDetails(\"update\")}\r\n}\r\n\r\n{_ Report faction states only if it's been more than an hour (3600 seconds) since our last visit. _}\r\n{if SecondsSince(state.eddi_context_system_lastvisit) / 3600 > 1:\r\n    {set state_report to F(\"System state report\")}\r\n}\r\n\r\n{set system_missions to F(\"Mission check system\")}\r\n{set system_crimes to F(\"Crime check system\")}\r\n\r\n{if state_report || system_missions || (system_crimes && find(system_crimes, \"Warning\") < 0):\r\n    {Pause(500)}\r\n    Information:\r\n}\r\n\r\n{if state_report:\r\n    {Pause(500)}\r\n    {state_report}\r\n}\r\n{if system_missions:\r\n    {Pause(500)}\r\n    {system_missions}\r\n}\r\n{if system_crimes:\r\n    {Pause(500)}\r\n    {system_crimes}\r\n}\r\n"
    },
    "Carrier pads locked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Carrier pads locked\")}\r\n\r\nLandeplätze verschlossen. Letzte Sprungvorbereitungen eingeleitet.",
      "name": "Carrier pads locked",
      "description": "Triggered when your fleet carrier locks landing pads prior to a jump",
      "default": false,
      "defaultValue": "Landing pads locked. Final jump preparations initiated."
    },
    "Check HGS": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Check HGS\")}\r\n\r\n{_ SetState('eddi_context_system_system', 'CD-72 190') _}\r\n{_ state.eddi_context_system_system _}\r\n\r\n{_ Fetch from context }\r\n{ set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n{_ reportsystem}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\": Welches System ist gemeint?\r\n|else:\r\n\r\n\t{if (reportsystem.population < 1000000) || (len(reportsystem.planetarystations) = 1)\r\n\t|else:\r\n\t\t{OneOf(\"Dieses System\", \"{(reportsystem.name)}\")} \r\n\r\n\t\t{  if (reportsystem.allegiance = \"Federation\" || reportsystem.allegiance = \"Föderation\") \r\n      \t&& (reportsystem.state = \"Wahlen\" || reportsystem.state = \"Election\" || reportsystem.state = \"None\" \r\n      \t|| reportsystem.state = \"Kein\") : \r\n      \t\that mit hoher Wahrscheinlichkeit eine hochgradige Signalquelle mit Core Dynamics Kompositwerkstoffen,\r\n\t\t|elif (reportsystem.allegiance = \"Independent\" || reportsystem.allegiance = \"Unabhängig\" \r\n\t\t|| reportsystem.allegiance = \"Alliance\" || reportsystem.allegiance = \"Allianz\") \r\n      \t&& (reportsystem.state = \"War\" || reportsystem.state = \"Krieg\" || reportsystem.state = \"Civil War\" \r\n      \t|| reportsystem.state = \"Bürgerkrieg\") : \r\n      \t\that mit hoher Wahrscheinlichkeit eine hochgradige Signalquelle mit Militärischen Superkondensatoren,\r\n\t\t|elif (reportsystem.allegiance = \"Independent\" || reportsystem.allegiance = \"Unabhängig\" \r\n\t\t|| reportsystem.allegiance = \"Alliance\" || reportsystem.allegiance = \"Allianz\") \r\n      \t&& (reportsystem.state = \"Civil Unrest\" || reportsystem.state = \"Unruhen\") : \r\n      \t\that mit hoher Wahrscheinlichkeit eine hochgradige Signalquelle mit Behelfskomponenten,\r\n\t\t|elif (reportsystem.allegiance = \"Empire\" || reportsystem.allegiance = \"Imperium\")\r\n      \t&& (reportsystem.state = \"Wahlen\" || reportsystem.state = \"Election\" || reportsystem.state = \"None\" \r\n      \t|| reportsystem.state = \"Kein\") : \r\n      \t\that mit hoher Wahrscheinlichkeit eine hochgradige Signalquelle mit Imperialen Schilden,\r\n\t\t|elif (reportsystem.allegiance = \"Independent\" || reportsystem.allegiance = \"Unabhängig\" \r\n\t\t|| reportsystem.allegiance = \"Alliance\" || reportsystem.allegiance = \"Allianz\") \r\n      \t&& (reportsystem.state = \"Outbreak\" || reportsystem.state = \"Ausbruch\") : \r\n      \t\that mit hoher Wahrscheinlichkeit eine hochgradige Signalquelle mit Pharmazeutischen Isolatoren,\r\n\t\t|elif (reportsystem.allegiance = \"Independent\" || reportsystem.allegiance = \"Unabhängig\" \r\n\t\t|| reportsystem.allegiance = \"Alliance\" || reportsystem.allegiance = \"Allianz\") \r\n      \t&& (reportsystem.state = \"Boom\" || reportsystem.state = \"Aufschwung\") : \r\n      \t\that mit hoher Wahrscheinlichkeit eine hochgradige Signalquelle mit Proto Wärmestrahler,\r\n\t\t|elif (reportsystem.allegiance = \"Independent\" || reportsystem.allegiance = \"Unabhängig\" \r\n\t\t|| reportsystem.allegiance = \"Alliance\" || reportsystem.allegiance = \"Allianz\") \r\n      \t&& (reportsystem.state = \"Expansion\") : \r\n      \t\that mit hoher Wahrscheinlichkeit eine hochgradige Signalquelle mit Proto Radiologische Legierungen\r\n\t\t|else : hat wahrscheinlich keine Hochgradige Signalquelle,\r\n\t\t}\r\n\t}\r\n}",
      "name": "Check HGS",
      "description": "Checkt auf eine hohe Wahrscheinlchkeit auf eine Hochgradige Signalquelle",
      "default": false,
      "defaultValue": null
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Cleared save\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'save')}\n{SetState('eddi_context_last_action', 'clear')}\n\nAuf wiedersehen {F(\"Honorific\")}. Es war mir eine Ehre.\n\n{_ - name The name of the player whose save has been cleared _}",
      "name": "Cleared save",
      "description": "Triggered when you clear your save",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nGoodbye {F(\"Honorific\")}.  It was a pleasure to serve you."
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Cockpit breached\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'cockpit')}\n{SetState('eddi_context_last_action', 'breach')}\n\n{OneOf(\"Houston, wir haben ein Problem.\", \"Verdammt, es wird kalt hier!\",\n\"Scheiße! Das Cockpit ist gebrochen!\")}",
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'cockpit')}\r\n{SetState('eddi_context_last_action', 'breach')}\r\n\r\nIs it me, or is it cold in here?"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Combat promotion\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'rank')}\n{SetState('eddi_context_last_action', 'promotion')}\n{SetState('eddi_context_rank_name', 'combat')}\n{SetState('eddi_context_rank_amount', event.rating)}\n\nGlückwunsch, {F(\"Honorific\")} {cmdr.name}.\nSie wurden auf Grund Ihrer {OneOf(\"guten\", \"ausgezeichneten\", \"hervorragenden\")} Kampfleistungen in den\nRang, {set CombatRank to cmdr.combatrating.rank + 1} {F(\"Honorific\")} eingestuft.\n\n{_ - rating The commander's new combat rating\ncmdr.combatrating.rank\n_}\n",
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\nYou have been recognised for your combat skills, {F(\"Honorific\")}."
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Commander continued\")}\r\n\r\n{SetState(\"systemlowvalue\", state.systemlowvalue = 0)}\r\n{SetState(\"systemhighvalue\", state.systemhighvalue = 0)}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n{SetState('time_start_game', SecondsSince(A))}\r\n\r\n{if cmdrcontinued = 0 || !cmdrcontinued:\r\n   Willkommen zurück {F(\"Honorific\")} \r\n   {Occasionally(2, cmdr.name)}.\r\n   {SetState('eddi_context_cmdrcontinued', 1)}\r\n   {set cmdrcontinued to 1}\r\n}\r\n\r\n{if event.mode = \"Private Gruppe\" : Verbinde mit privater Gruppe\r\n|elif event.mode = \"Offenes Spiel\": Verbinde mit offenem Spiel\r\n|elif event.mode = \"Einzelspieler\": Verbinde mit Einzelspieler Modus\r\n}.\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{F(\"Cargo legality check\")}\r\n{F(\"Mission check galaxy\")}\r\n{Pause(2500)}\r\n\r\n{_\r\n- commander    The commander's name\r\n- horizons     The game version is 'Horizons'\r\n- ship         The commander's ship\r\n- shipid       The ID of the commander's ship\r\n- mode         The game mode (Open, Group or Solo)\r\n- group        The name of the group (only if mode == Group)\r\n- credits      The number of credits the commander has\r\n- loan         The current loan the commander has\r\n- fuel         The current fuel level of the commander's vehicle\r\n- fuelcapacity The total fuel capacity of the commander's vehicle\r\n- startlanded  True if the commander is starting landed\r\n- startdead    True if the commander is starting dead / at the rebuy screen\r\n_}",
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game",
      "default": false,
      "defaultValue": "{_ Commander continued }\r\n{_ Triggered when you continue an existing game }\r\n\r\n\r\nWelcome back {F(\"Honorific\")}.\r\n\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n\r\n{F(\"Mission check galaxy\")}\r\n\r\n\r\n"
    },
    "Commander loading": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": null,
      "name": "Commander loading",
      "description": "Triggered at the very beginning of loading a game",
      "default": true,
      "defaultValue": null
    },
    "Commander progress": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": "{_\r\n- combat      The percentage progress of the commander's combat rating\r\n- trade       The percentage progress of the commander's trade rating\r\n- exploration The percentage progress of the commander's exploration rating\r\n- cqc         The percentage progress of the commander's CQC rating\r\n- empire      The percentage progress of the commander's empire rating\r\n- federation  The percentage progress of the commander's federation rating\r\n_}\r\n\r\nKampf {event.combat},\r\nHandel {event.trade},\r\nErkundung {event.exploration},\r\nPVP {event.cqc}",
      "name": "Commander progress",
      "description": "Triggered when your progress is reported",
      "default": false,
      "defaultValue": null
    },
    "Commander ratings": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": "{_\r\n- combat      The commander's combat rating\r\n- trading     The commander's trading rating\r\n- exploration The commander's exploration rating\r\n- cqc         The commander's CQC rating\r\n- empire      The commander's empire rating\r\n- federation  The commander's federation rating\r\n_}\r\n\r\n{event.combat}\r\n{cmdr.combatrating.rank},\r\n{cmdr.combatrating.name},\r\n{event.trading}\r\n{cmdr.traderating.rank},\r\n{cmdr.traderating.name},\r\n{event.exploration}\r\n{cmdr.explorationrating.rank},\r\n{cmdr.explorationrating.name},\r\n{event.cqc}\r\n{cmdr.cqcrating.rank},\r\n{cmdr.cqcrating.name}",
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported",
      "default": false,
      "defaultValue": null
    },
    "Commander reputation": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Commander reputation\")}\r\n\r\n{_ SecondsSince(a)} \t\t\t\t\t\t\t{_ - UNIX-Zeitstempel in Sek. , 01.01.1970 _}\r\n{_ SecondsSince(state.time_start_game)} \t\t\t{_ - Zeitstempel in Sek. für Variable _}\r\n\r\n{_ Zeit seit Spielstart > 5 Min. und < 1h Reputation NICHT ansagen_}\r\n{if SecondsSince(state.time_start_game) > 300 && SecondsSince(state.time_start_game) < 3600 :\r\n|else:\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t{Pause(1000)}\r\n\r\n\tUnser Ansehen beim Imperium ist\r\n\t{if event.empire < -90   : feindlich\r\n\t|elif event.empire < -35 : unfreundlich\r\n\t|elif event.empire < 4   : neutral\r\n\t|elif event.empire < 35  : herzlich\r\n\t|elif event.empire < 90  : befreundet\r\n\t|elif event.empire > 90  : verbündet\r\n\t},\r\n\t{round(event.empire,0)} %,\r\n\r\n\tbei der Förderation\r\n\t{if event.federation < -90   : feindlich\r\n\t|elif event.federation < -35 : unfreundlich\r\n\t|elif event.federation < 4   : neutral\r\n\t|elif event.federation < 35  : herzlich\r\n\t|elif event.federation < 90  : befreundet\r\n\t|elif event.federation > 90  : verbündet\r\n\t},\r\n\t{round(event.federation,0)} %,\r\n\r\n\tbei der Allianz\r\n\t{if event.alliance < -90   : feindlich\r\n\t|elif event.alliance < -35 : unfreundlich\r\n\t|elif event.alliance < 4   : neutral\r\n\t|elif event.alliance < 35  : herzlich\r\n\t|elif event.alliance < 90  : befreundet\r\n\t|elif event.alliance > 90  : verbündet\r\n\t},\r\n\t{round(event.alliance,0)} %,\r\n\t\r\n\tund bei den Unabhängigen\r\n\t{if event.independent < -90   : feindlich\r\n\t|elif event.independent < -35 : unfreundlich\r\n\t|elif event.independent < 4   : neutral\r\n\t|elif event.independent < 35  : herzlich\r\n\t|elif event.independent < 90  : befreundet\r\n\t|elif event.independent > 90  : verbündet\r\n\t},\r\n\t{round(event.independent,0)} %.\r\n}\r\n\r\n{_ A note on thresholds... _}\r\n{_ -100.. -90: hostile - feindlich _}\r\n{_ -90.. -35: unfriendly - unfreundlich _}\r\n{_ -35..+ 4: neutral - neutral _}\r\n{_ +4..+35: cordial - herzlich _}\r\n{_ +35..+90: friendly - befreundet _}\r\n{_ +90..+100: allied - alliiert/verbündet _}\r\n\r\n{_\r\n- empire      The percentage progress of the commander's empire superpower reputation\r\n- federation  The percentage progress of the commander's federation superpower reputation\r\n- independent The percentage progress of the commander's independent faction reputation\r\n- alliance    The percentage progress of the commander's alliance superpower reputation\r\nround(event.empire,2) _}\r\n",
      "name": "Commander reputation",
      "description": "Triggered when your reputation is reported",
      "default": false,
      "defaultValue": "{_ A note on thresholds... _}\r\n{_ -100.. -90: hostile _}\r\n{_ -90.. -35: unfriendly _}\r\n{_ -35..+ 4: neutral _}\r\n{_ +4..+35: cordial _}\r\n{_ +35..+90: friendly _}\r\n{_ +90..+100: allied _}\r\n"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Commander started\")}\r\n\r\nWillkommen {F(\"Honorific\")}\r\n{Occasionally(2, cmdr.name)}.\r\n\r\n{SetState('eddi_context_cmdrcontinued', 1)}\r\n{set cmdrcontinued to 1}\r\n\r\n{if event.mode = \"Gruppe\": \t\t\tVerbinde mit privater Gruppe\r\n|elif event.mode = \"Offenes Spiel\": Verbinde mit offenem Spiel\r\n|elif event.mode = \"Einzelspieler\": Verbinde mit Einzelspieler Modus\r\n}. Bitte warten.\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{SetState('eddi_context_bountyawarded', 0)}\r\n{SetState('eddi_context_bondawarded', 0)}\r\n{SetState('eddi_context_fineincurred', 0)}\r\n{SetState('eddi_context_bountyincurred', 0)}\r\n{SetState(\"use_srv\", false)}\r\n\r\n{_\r\n- name     The name of the new commander\r\n- package  The starting package of the new commander\r\n_}\r\n\r\n",
      "name": "Commander started",
      "description": "Triggered when you start a new game",
      "default": false,
      "defaultValue": "Welcome, Commander."
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Commodity collected\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'cargo')}\n{SetState('eddi_context_last_action', 'collect')}\n{SetState('eddi_context_cargo_name', event.cargo)}\n{SetState('eddi_context_bounty_name', event.target)}\n{SetState('eddi_context_bounty_faction', event.faction)}\n{SetState('eddi_context_bounty_amount', event.reward)}\n\n{if event.cargo: {set translate to event.cargo} {F(\"Translate Commodity\")}\n|else          : {OneOf(\"Ware\", \"Rohstoff\", \"Gegenstand\")} {_ Artikel _}\n}\n{OneOf(\"ist jetzt an Bord\", \"wurde aufgenommen\", \"eingesammelt\")}.\n\n{_\n- commodity     The name of the commodity collected\n- stolen        If the cargo is stolen\n- missionid ID  of the mission-related commodity, if applicable\n_}",
      "name": "Commodity collected",
      "description": "Triggered when you pick up a commodity in your ship or SRV",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.commodity)}\r\n\r\n{event.commodity} now on board."
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Commodity ejected\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\n{if event.cargo: {set translate to event.cargo} {F(\"Translate Commodity\")}\r\n|else          : {OneOf(\"Ware\", \"Rohstoff\", \"Gegenstand\")} {_ Artikel _}\r\n}\r\n{OneOf(\"ist jetzt von Bord\", \"abgeworfen\", \"entsorgt\")}.\r\n\r\n{_\r\n- commodity The name of the commodity ejected\r\n- amount The amount of cargo ejected\r\n- abandoned If the cargo has been abandoned\r\n- missionid ID of the mission-related commodity, if applicable\r\n_}",
      "name": "Commodity ejected",
      "description": "Triggered when you eject a commodity from your ship or SRV",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Commodity purchase check\")}\n\n{for commodity in station.commodities:\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\n\t\t{if commodity.name = \"Imperiale Sklaven\" :         {_ commodity.stock} {_ commodity.name}\n\t\t\t{set Kaufpreis to commodity.buyprice}          {_ Kaufpreis} \n\t\t\t{set Durchschnitt to commodity.avgprice}       {_ Durchschnitt}\n    \t\t\t{if commodity.buyprice < 3* (Durchschnitt): {set Imp_Sklaven to true}\n    \t\t\t}\n\t\t}\n        \n        {set discount to commodity.avgprice - commodity.buyprice}\n        {if discount > best.avgprice - best.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to best}\n            {set best to commodity}\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to commodity}\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\n            {set thirdbest to commodity}\n        }\n    }\n}\n\n{if best: Der lokale Markt hat {set translate to best.name} {F(\"Translate Commodity\")} im Angebot.\n    {if secondbest: {set translate to secondbest.name} {F(\"Translate Commodity\")} \n        {if thirdbest: und {set translate to thirdbest.name} {F(\"Translate Commodity\")} sind\n        |else        : ist\n        }\n     ebenfalls zu einem günstigen Preis verfügbar.\n    }\n}\n\n{if Imp_Sklaven = true : \n\t{OneOf(\"Und ein Angebot an unsere Sklaven händler, hier bekommen Sie Leiarbeiter für unter 30%\n\tdes Durchschnittspreises !\",\"Und das Tagesangebot, 3 Sklaven für Einen des Durchschnittspreises\",\n\t\"Spezialangebot ! Nur heute, bezahle eine Arbeitshilfe und bekomme 3!\")}\n}",
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase",
      "default": false,
      "defaultValue": "{for commodity in station.commodities:\r\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n        {set discount to commodity.avgprice - commodity.buyprice}\r\n        {if discount > best.avgprice - best.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to best}\r\n            {set best to commodity}\r\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to commodity}\r\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n            {set thirdbest to commodity}\r\n        }\r\n    }\r\n}\r\n\r\n{if best:\r\n    The local market is selling {best.name} at a good price\r\n    {if secondbest:\r\n       , as well as {secondbest.name}\r\n        {if thirdbest:\r\n            and {thirdbest.name}\r\n        }\r\n    }\r\n.}\r\n"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Commodity purchased\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'purchase')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n{SetState('eddi_context_commodity_amount', event.amount)}\n{SetState('last_skript', 'Commodity purchased')}\n\n{SetState('noch_frei',\" \")}\r\n\r\n{Pause(3000)}\r\n\n{if state.version_short = 1 :\n   {if event.amount = 1 :\n      {OneOf(\"Es wurde\", \"Wir haben\")} eine Tonne {set translate to event.commodity} {F(\"Translate Commodity\")} \n      für {set value to event.price} {F('Humanise ValueGer')} credditts gekauft\n   |elif event.amount > 1 :\n      {OneOf(\"Es wurden\", \"Sie haben\")} {event.amount} Tonnen {set translate to event.commodity} {F(\"Translate Commodity\")} \n      für insgesamt {set value to (event.amount * event.price)} {F('Humanise ValueGer')} credditts gekauft\n   }\n|else:\n   {if event.amount = 1 :\n      {OneOf(\"Es wurde\", \"Wir haben\")} eine Tonne {set translate to event.commodity} {F(\"Translate Commodity\")} \n      für {set value to event.price} {F('Humanise ValueGer')} credditts gekauft\n   |elif event.amount > 1 :\n      {OneOf(\"Es wurden\", \"Wir haben\")} {event.amount} Tonnen {set translate to event.commodity} {F(\"Translate Commodity\")} \n      für {set value to (event.amount * event.price)}\n      {OneOf(\"Insgesamt {F('Humanise ValueGer')} credditts, bei {event.price} credditts pro Einheit gekauft\", \n      \"{event.price} credditts pro Einheit gekauft. Gesamtkosten betragen {F('Humanise ValueGer')} credditts\")}\n   }\n}.\n\n{Pause(1000)}\n\n{_ aktuelle Lademenge\t\t\t-cargoCarried- _}\n{_ max. Lademenge des Shiffs\t-ship.cargocapacity- _}\n\n{_ set noch_frei to ship.cargocapacity - CargoAktuell - event.amount _}\n{_ noch_frei Tonnen Frachtraum _ OneOf(\"sind noch frei\", \"können noch belegt werden\") _}\n\n{_\n- marketid   The market ID of the purchased commodity\n- commodity  The name of the purchased commodity\n- amount     The amount of the purchased commodity\n- price      The price paid per unit of the purchased commodity\n_}\n",
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\n   You have just purchased one tonne of {event.commodity} for {Humanise(event.price)} credits.\r\n|elif event.amount > 1:\r\n    You have just purchased {event.amount} tonnes of {event.commodity} at {Humanise(event.price)} credits per tonne.  Total cost is {Humanise(event.amount * event.price)} credits.\r\n}"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Commodity refined\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'refine')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n\n{_ - commodity The name of the commodity refined _}",
      "name": "Commodity refined",
      "description": "Triggered when you refine a commodity from the refinery",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'refine')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\n"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Commodity sale check\")}\r\n\r\n{_ Function to find a given commodity in market}\r\n\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.EDDBID = commodity.EDDBID:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.amount}\r\n        {if cargo.stolen = true:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.missionid:\r\n            {_ don't do anything with mission cargo at the moment}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{if len(profitablecommodities) > 0:\r\n    Wir können hier\r\n    {if len(profitablecommodities) = 1:\r\n        {set translate to profitablecommodities[0].name} {F(\"Translate Commodity\")}\r\n    |elif len(profitablecommodities) = 2:\r\n        {set translate to profitablecommodities[0].name} {F(\"Translate Commodity\")} und {set translate to profitablecommodities[1].name} {F(\"Translate Commodity\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {set translate to profitablecommodities[cur].name} {F(\"Translate Commodity\")}\r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {set translate to profitablecommodities[cur].name} {F(\"Translate Commodity\")}\r\n            |else:\r\n                , und {set translate to profitablecommodities[cur].name} {F(\"Translate Commodity\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    mit einem Gewinn von {set value to totalprofit} {F(\"Humanise ValueGer\")} credditts verkaufen.\r\n}\r\n\r\n{if len(stolencommodities) > 0 && station.hasblackmarket:\r\n    Wir können hier die gestohlenen\r\n    {if len(stolencommodities) = 1:\r\n        {set translate to stolencommodities[0].name} {F(\"Translate Commodity\")}\r\n    |elif len(stolencommodities) = 2:\r\n        {set translate to stolencommodities[0].name} {F(\"Translate Commodity\")} und {set translate to stolencommodities[1].name} {F(\"Translate Commodity\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(stolencommodities):\r\n            {if cur = 0:\r\n                {set translate to stolencommodities[cur].name} {F(\"Translate Commodity\")}\r\n            |elif cur < len(stolencommodities) - 1:\r\n                , {set translate to stolencommodities[cur].name} {F(\"Translate Commodity\")}\r\n            |else:\r\n                , und {set translate to stolencommodities[cur].name} {F(\"Translate Commodity\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    los werden.\r\n}\r\n",
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here",
      "default": false,
      "defaultValue": "{_ Commodity sale check}\r\n{_ Check to see which commodities can be sold here}\r\n\r\n\r\n{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.name = commodity.name:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to find an illegal mission related to the commodity}\r\n{set illegalmission(haulageData) to:\r\n    {for haulage in haulageData:\r\n        {if haulage.illegal:\r\n            {return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set missioncommodities to []}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{for cargo in inventory:\r\n    {if cargo.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {set illegal to illegalmission(cargo.haulageData)}\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.owned}\r\n\r\n        {if cargo.stolen > 0 && !illegal:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.haulage > 0:\r\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\r\n        |elif !marketcommodity && lcase(cargo.category) != \"powerplay\" && cargo.total > 0:\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    You can sell your\r\n    {if len(profitablecommodities) = 1:\r\n        {profitablecommodities[0].name}\r\n    |elif len(profitablecommodities) = 2:\r\n        {profitablecommodities[0].name} and {profitablecommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {profitablecommodities[cur].name}\r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {profitablecommodities[cur].name}\r\n            |else:\r\n                , and {profitablecommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    for a profit of {Humanise(totalprofit)} credits.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    You could {if len(profitablecommodities) > 0: also } sell your\r\n    {if len(unknowncommodities) = 1:\r\n        {unknowncommodities[0].name}\r\n    |elif len(unknowncommodities) = 2:\r\n        {unknowncommodities[0].name} and {unknowncommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(unknowncommodities):\r\n            {if cur = 0:\r\n                {unknowncommodities[cur].name}\r\n            |elif cur < len(unknowncommodities) - 1:\r\n                , {unknowncommodities[cur].name}\r\n            |else:\r\n                , and {unknowncommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    , although check potential profits for {if len(unknowncommodities) > 1: these |else: this} before confirming the transaction.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        You can fence your stolen\r\n        {if len(stolencommodities) = 1:\r\n            {stolencommodities[0].name}\r\n        |elif len(stolencommodities) = 2:\r\n            {stolencommodities[0].name} and {stolencommodities[1].name}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(stolencommodities):\r\n                {if cur = 0:\r\n                    {stolencommodities[cur].name}\r\n                |elif cur < len(stolencommodities) - 1:\r\n                    , {stolencommodities[cur].name}\r\n                |else:\r\n                    , and {stolencommodities[cur].name}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        here.\r\n    |else:\r\n        Reminder: you {OneOf(\"have stolen cargo on-board\", \"have stolen goods on-board\", \"are carrying stolen goods\", \"are carrying stolen cargo\")}.\r\n    }\r\n}\r\n\r\n{_ Let the user know about any mission related commodities they can sell on the black market}\r\n{if len(missioncommodities) > 0 && station.hasblackmarket:\r\n\r\n    You can {if len(stolencommodities) > 0: also} {OneOf('offload', 'dump')} your mission related\r\n    {if len(missioncommodities) = 1:\r\n        {missioncommodities[0].name}\r\n    |elif len(missioncommodities) = 2:\r\n        {missioncommodities[0].name} and {missioncommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(missioncommodities):\r\n            {if cur = 0:\r\n                {missioncommodities[cur].name}\r\n            |elif cur < len(missioncommodities) - 1:\r\n                , {missioncommodities[cur].name}\r\n            |else:\r\n                , and {missioncommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    here.\r\n}\r\n"
    },
    "Commodity sale check 3.7.1": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Commodity sale check\")}\r\n\r\n{_ Check to see which commodities can be sold here}\r\n\r\n{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.name = commodity.name:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to find an illegal mission related to the commodity}\r\n{set illegalmission(haulageData) to:\r\n    {for haulage in haulageData:\r\n        {if haulage.illegal:\r\n            {return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set missioncommodities to []}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{for cargo in inventory:\r\n    {if cargo.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {set illegal to illegalmission(cargo.haulageData)}\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.owned}\r\n\r\n        {if cargo.stolen > 0 && !illegal:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.haulage > 0:\r\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\r\n        |elif !marketcommodity && lcase(cargo.category) != \"powerplay\" && cargo.total > 0:\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    You can sell your\r\n    {if len(profitablecommodities) = 1:\r\n        {profitablecommodities[0].name}\r\n    |elif len(profitablecommodities) = 2:\r\n        {profitablecommodities[0].name} and {profitablecommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {profitablecommodities[cur].name}\r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {profitablecommodities[cur].name}\r\n            |else:\r\n                , and {profitablecommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    for a profit of {Humanise(totalprofit)} credits.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    You could {if len(profitablecommodities) > 0: also } sell your\r\n    {if len(unknowncommodities) = 1:\r\n        {unknowncommodities[0].name}\r\n    |elif len(unknowncommodities) = 2:\r\n        {unknowncommodities[0].name} and {unknowncommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(unknowncommodities):\r\n            {if cur = 0:\r\n                {unknowncommodities[cur].name}\r\n            |elif cur < len(unknowncommodities) - 1:\r\n                , {unknowncommodities[cur].name}\r\n            |else:\r\n                , and {unknowncommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    , although check potential profits for {if len(unknowncommodities) > 1: these |else: this} before confirming the transaction.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        You can fence your stolen\r\n        {if len(stolencommodities) = 1:\r\n            {stolencommodities[0].name}\r\n        |elif len(stolencommodities) = 2:\r\n            {stolencommodities[0].name} and {stolencommodities[1].name}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(stolencommodities):\r\n                {if cur = 0:\r\n                    {stolencommodities[cur].name}\r\n                |elif cur < len(stolencommodities) - 1:\r\n                    , {stolencommodities[cur].name}\r\n                |else:\r\n                    , and {stolencommodities[cur].name}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        here.\r\n    |else:\r\n        Reminder: you {OneOf(\"have stolen cargo on-board\", \"have stolen goods on-board\", \"are carrying stolen goods\", \"are carrying stolen cargo\")}.\r\n    }\r\n}\r\n\r\n{_ Let the user know about any mission related commodities they can sell on the black market}\r\n{if len(missioncommodities) > 0 && station.hasblackmarket:\r\n\r\n    You can {if len(stolencommodities) > 0: also} {OneOf('offload', 'dump')} your mission related\r\n    {if len(missioncommodities) = 1:\r\n        {missioncommodities[0].name}\r\n    |elif len(missioncommodities) = 2:\r\n        {missioncommodities[0].name} and {missioncommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(missioncommodities):\r\n            {if cur = 0:\r\n                {missioncommodities[cur].name}\r\n            |elif cur < len(missioncommodities) - 1:\r\n                , {missioncommodities[cur].name}\r\n            |else:\r\n                , and {missioncommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    here.\r\n}\r\n",
      "name": "Commodity sale check 3.7.1",
      "description": "Check to see which commodities can be sold here",
      "default": false,
      "defaultValue": null
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Commodity sold\")}\r\n\r\n{_ Context }\r\n\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n{SetState('eddi_context_commodity_price', event.price)}\r\n{SetState('eddi_context_commodity_profit', event.profit)}\r\n{SetState('last_skript', 'Commodity sold')}\r\n\r\n{if event.amount = 1: \r\n   {OneOf(\"Es wurde\", \"Wir haben\")} eine Tonne {set translate to event.commodity} {F(\"Translate Commodity\")} \r\n   für {set value to event.price} {F(\"Humanise ValueGer\")} credditts\r\n|else:\r\n   \t{OneOf(\"Es wurden\", \"Wir haben\")} {event.amount} Tonnen {set translate to event.commodity} {F(\"Translate Commodity\")}\r\n   \t\r\n\t\t{if state.ansage_einzelpreis = 1 :\r\n   \t\t\tfür {set value to event.price} {F(\"Humanise ValueGer\")} credditts pro Tonne für einen Gesamtbetrag von\r\n   \t\t}\t\r\n   \t\tfür {set value to (event.amount * event.price)} {F(\"Humanise ValueGer\")} credditts\r\n   \t\t\r\n\t{if state.ansage_profit = 1:\r\n\t\t{if event.price != event.profit:\r\n   \t\t\t{if event.profit < 0: mit einem Verlust von {set value to ((event.profit * event.amount) * -1)} {F(\"Humanise ValueGer\")} credditts\r\n   \t\t\t|elif event.profit = 0: ohne Gewinnerzielung\r\n   \t\t\t|else: mit einem {OneOf(\"Gewinn\",\"Profit\")} von {set value to (event.profit * event.amount)} {F(\"Humanise ValueGer\")} credditts\r\n   \t\t\t}\t\r\n   \t\t}\r\n   \t}\t\r\n}\r\nverkauft.\r\n\r\n{Pause(1000)}\r\n\r\n{_ set noch_frei to ship.cargocapacity - CargoAktuell + event.amount _}\r\n{_ noch_frei Tonnen Frachtraum OneOf(\"sind noch frei\", \"können noch belegt werden\") _}\r\n\r\n{_ Triggered when you sell a commodity to the markets. _}\r\n\r\n{_ \r\n- marketid     The market ID of the commodity sold\r\n- commodity    The name of the commodity sold\r\n- amount       The amount of the commodity sold\r\n- price        The price obtained per unit of the commodity sold\r\n- profit       The number of credits profit per unit of the commodity sold\r\n- illegal      True if the commodity is illegal at the place of sale\r\n- stolen       True if the commodity was stolen\r\n- blackmarket  True if the commodity was sold to a black market\r\n_}",
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\n   You have just sold one tonne of {event.commodity} for {Humanise(event.price)} credits\r\n|elif event.amount > 1:\r\n    You have just sold {event.amount} tonnes of {event.commodity} at {Humanise(event.price)} credits per tonne for a total of {Humanise(event.amount * event.price)} credits\r\n}\r\n\r\n{if event.price != event.profit:\r\n    {if event.profit < 0:\r\n        with a loss of {Humanise(-1 * event.profit * event.amount)} credits.\r\n    |elif event.profit = 0:\r\n        and broke even on the trade.\r\n    |else:\r\n        with a profit of {Humanise(event.profit * event.amount)} credits.\r\n    }\r\n}"
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Community goal\")}\r\n\r\n{_ Set Context _}\r\n{SetState('eddi_context_last_subject', 'community goal')}\r\n{_ Save goal location to context if there is only one goal present _}\r\n{if len(event.cgid) = 1:\r\n   {SetState('eddi_context_goal_system_name', event.system[0])}\r\n   {SetState('eddi_context_goal_station_name', event.station[0])}\r\n}\r\n\r\n{F('Honorific')}, \r\n\r\n{if len(event.name) > 1:\r\n    {OneOf(\"Wir haben Interesse bekundet an den\", \"Ich verfolge die\")} folgenden Gemeinschaftszielen:\r\n|else: \r\n    Das Gemeinschaftsziel,    \r\n}\r\n\r\n{set cur to 0}\r\n{while cur < len(event.name):\r\n\r\n   {if cur = 0 && len(event.name) = 1 : {_ nothing _}\r\n   |elif cur = 0 && len(event.name) > 1 : Das Erste,\r\n   |elif cur < (len(event.name) - 1) : Das Nächste, \r\n   |else: Das Letzte,\r\n   }\r\n\r\n   {event.name[cur]},\r\n\r\n   {if event.iscomplete[cur]:\r\n      {OneOf(\"ist beendet\", \"ist fertig\")} \r\n   |else: \r\n      {if (event.expiry[cur] / 3600) < 12:\r\n         {OneOf(\"steht kurz vor dem Abschluss\", \r\n                \"endet in {Humanise(round(event.expiry[cur] / 3600, 1))} Stunden\", \r\n                \"ist fast abgeschlossen\")}\r\n      |else:\r\n         {OneOf(\"ist noch nicht vollständig\", \"ist aktiv\", \"ist unvollständig\", \"läuft noch\")} \r\n      }\r\n   }\r\n\r\n   {if event.tier[cur]: und steht derzeit bei {event.tier[cur]},\r\n       {if event.contribution[cur] > 0:\r\n           Unsere {Occasionally(2, \"zur Zeit\", \"momentan\")} erwartete Belohnung,\r\n           {Occasionally(2, \"wird berechnet auf\", \"berechnet sich auf\")}\r\n           {Humanise(event.tierreward[cur])} credditts\r\n           {Occasionally(2, \"in the {event.percentileband[cur]}th percentile\") _}\r\n       }\r\n   }.\r\n\r\n   {_ Create a comparison function _}\r\n   {set compare(stat) to:     \r\n       {if stat < 0.01   : gerade ein Bruchteil vom            \r\n       |elif stat < 0.10 : weniger als ein Zehntel vom\r\n       |elif stat < 0.25 : weniger als ein Viertel vom\r\n       |elif stat < 0.5  : weniger als die Hälfte vom\r\n       |elif stat < 0.75 : weniger als den\r\n       |elif stat < 0.96 : ein {OneOf(\"Bruchteil\",\"bisschen\")} weniger als den\r\n       |elif stat < 1.05 : {OneOf(\"ungefähr\",\"etwa\",\"fast\")} den\r\n       |elif stat < 1.25 : ein bisschen mehr als den\r\n       |elif stat < 1.5  : mehr als den\r\n       |elif stat < 2    : bedeutend mehr als den\r\n       |else             : erheblich mehr als den\r\n       }\r\n    }\r\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\r\n\r\n    {if compare_contribution != 0:\r\n       {if event.toprank[cur]: \r\n          Gratulation! \r\n          Du bist einer von {event.topranksize[cur]} top Kommandanten bei diesem Event,\r\n          die {compare(compare_contribution)} Durchschnitt beigetragen haben.\r\n       |else:\r\n          {Occasionally(2, \"Du hast {compare(compare_contribution)}\r\n          Durchschnitt beigetragen.\")}\r\n       }\r\n    }\r\n\r\n    {if !event.iscomplete[cur]:\r\n       Du kannst\r\n       {if event.contribution[cur] > 0: \r\n          {OneOf(\"mehr beitragen\", \"einen zusätzlichen Beitrag leisten\")} \r\n       |else: \r\n          {OneOf(\"beitragen\", \"einen Beitrag leisten\")}\r\n       }\r\n       {if event.station[cur] = station.name:\r\n          {Occasionally(2, \"hier\")}\r\n          {Occasionally(2, \"auf dieser Station\")}.\r\n       |elif event.system[cur] = system.name:\r\n          auf {P(event.station[cur])}\r\n          {Occasionally(2, \"hier\")}\r\n          {Occasionally(2, \"in diesem System\", \"im aktuellen System\")}.\r\n       |else:\r\n          auf {P(event.station[cur])},\r\n          {OneOf(\"in {P(event.system[cur])}\", \"im {P(event.system[cur])} System\" )}.\r\n       }\r\n    }\r\n\r\n    {set cur to cur + 1}\r\n    {Pause(1000)}\r\n}\r\n\r\n{_\r\n- cgid       the unique id of the goal (this is a list containing values for all active goals)\r\n- name       The description of the goal (this is a list containing values for all active goals)\r\n- system     The system where the goal is located (this is a list containing values for all active goals)\r\n- station    The station where the goal is located (this is a list containing values for all active goals)\r\n- expiry     The expiration time for the goal in seconds (this is a list containing values for all active goals)\r\n- iscomplete The completion status of the goal (true/false) (this is a list containing values for all active goals)\r\n- total      The community's current total contributions (this is a list containing values for all active goals)\r\n- contribution      The commander's contribution (this is a list containing values for all active goals)\r\n- contributors      The number of commanders participating (this is a list containing values for all active goals)\r\n- percentileband    the commander's current rewards percentile (this is a list containing values for all active goals)\r\n- topranksize       The number of commanders in the top rank (only for goals with a fixed size top rank) \r\n\t\t\t\t\t(this is a list containing values for all active goals)\r\n- toprank Whether   the commander is currently in the top rank (true/false) (only for goals with a fixed size top rank) \r\n\t\t\t\t\t(this is a list containing values for all active goals)\r\n- tier              The current tier of the goal (only once the 1st tier is reached) (this is a list containing values for all active goals)\r\n- tierreward        The reward on offer for the current tier (this is a list containing values for all active goals)\r\n_}",
      "name": "Community goal",
      "description": "Triggered when checking the status of a community goal",
      "default": false,
      "defaultValue": "{_ Set Context _}\r\n{SetState('eddi_context_last_subject', 'community goal')}\r\n{_ Save goal location to context if there is only one goal present _}\r\n{if len(event.cgid) = 1:\r\n   {SetState('eddi_context_goal_system_name', event.system[0])}\r\n   {SetState('eddi_context_goal_station_name', event.station[0])}\r\n}\r\n\r\n{F('Honorific')}, \r\n\r\n{if len(event.name) > 1:\r\n    {OneOf(\"you have expressed interest in\", \"I am tracking\")}\r\n    the following community goals:\r\n|else: \r\n    The community goal,    \r\n}\r\n\r\n{set cur to 0}\r\n{while cur < len(event.name):\r\n\r\n   {if cur = 0 && len(event.name) = 1:\r\n      {_ nothing _}\r\n   |elif cur = 0 && len(event.name) > 1:\r\n      The first,\r\n   |elif cur < (len(event.name) - 1):\r\n      The next, \r\n   |else:\r\n      The last,\r\n   }\r\n\r\n   {event.name[cur]},\r\n\r\n   {if event.iscomplete[cur]:\r\n      {OneOf(\"is complete\", \"has finished\")} \r\n   |else: \r\n      {if (event.expiry[cur] / 3600) < 12:\r\n         {OneOf(\"is nearing completion\", \r\n                \"shall end in {Humanise(round(event.expiry[cur] / 3600, 1))} hours\", \r\n                \"is nearly complete\")}\r\n      |else:\r\n         {OneOf(\"is not yet complete\", \r\n                \"is active\", \r\n                \"is incomplete\")} \r\n      }\r\n   }\r\n\r\n   {if event.tier[cur]:\r\n       {OneOf(\"and has reached\", \"and currently at\")} {event.tier[cur]}.\r\n       {if event.contribution[cur] > 0:\r\n           Your expected reward is \r\n           {Occasionally(2, \"currently\")}\r\n           {Occasionally(2, \"calculated at\")}\r\n           {Humanise(event.tierreward[cur])} credits\r\n           {Occasionally(2, \"in the {event.percentileband[cur]}th percentile\")}\r\n       }\r\n   }.\r\n\r\n   {_ Create a comparison function _}\r\n   {set compare(stat) to:     \r\n       {if stat < 0.01:\r\n            just a {OneOf(\"fraction\", \"token\")} of            \r\n       |elif stat < 0.10:\r\n            less than a tenth of\r\n       |elif stat < 0.25:\r\n            less than a quarter of\r\n       |elif stat < 0.5:\r\n            less than half of\r\n       |elif stat < 0.75:\r\n            less than\r\n       |elif stat < 0.96: \r\n            {OneOf(\"fractionally\",\"just\")}\r\n            less than\r\n       |elif stat < 1.05:\r\n            {OneOf(\"approximately\",\"roughly\",\"nearly\")} \r\n            equal to \r\n       |elif stat < 1.25:\r\n            a little more than\r\n       |elif stat < 1.5:\r\n            more than\r\n       |elif stat < 2:\r\n            significantly more than\r\n       |else:\r\n            vastly more than\r\n       }\r\n    }\r\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\r\n\r\n    {if compare_contribution != 0:\r\n       {if event.toprank[cur]: \r\n          Congratulations! \r\n          You are one of {event.topranksize[cur]} top commanders in this event, having contributed \r\n          {compare(compare_contribution)}\r\n          the average.\r\n       |else:\r\n          {Occasionally(2, \"You have contributed \r\n          {compare(compare_contribution)}\r\n          the average.\")}\r\n       }\r\n    }\r\n\r\n    {if !event.iscomplete[cur]:\r\n       You may \r\n       {if event.contribution[cur] > 0: \r\n          {OneOf(\"contribute more\", \"make additional contributions\")} \r\n       |else: \r\n          {OneOf(\"contribute\", \"make a contribution\")}\r\n       }\r\n       {if event.station[cur] = station.name:\r\n          {Occasionally(2, \"here\")}\r\n          {Occasionally(2, \"at this station\")}.\r\n       |elif event.system[cur] = system.name:\r\n          at {P(event.station[cur], \"station\")}\r\n          {Occasionally(2, \"here\")}\r\n          {Occasionally(2, \"in this system\", \"in the current system\")}.\r\n       |else:\r\n          at {P(event.station[cur], \"station\")},\r\n          in {OneOf(\"{P(event.system[cur], \"starsystem\")}\", \"the {P(event.system[cur], \"starsystem\")} system\" )}.\r\n       }\r\n    }\r\n\r\n    {set cur to cur + 1}\r\n    {Pause(1000)}\r\n}"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Controlling fighter\")}\r\n\r\n{OneOf(\"Neuro nahle Verbindung\", \"Link\", \"applink\")} \r\n{Occasionally(2, \"zum fighter\")} \r\n{OneOf(\"initiiert\", \"hergestellt\", \"etabliert\")}.",
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter",
      "default": false,
      "defaultValue": "{OneOf(\"Neural link\", \"Link\", \"Uplink\")} {Occasionally(2, \"to fighter\")} {OneOf(\"initiated\", \"established\", \"engaged\")}."
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Controlling ship\")}\r\n\r\n{OneOf(\"Neuro nahle Verbindung\", \"Link\", \"applink\")} {OneOf(\"unterbrochen\", \"getrennt\")}.",
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship",
      "default": false,
      "defaultValue": "{OneOf(\"Neural link\", \"Link\", \"Uplink\")} {OneOf(\"terminated\", \"disengaged\")}."
    },
    "Credits": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set Geld to 77500000 _} {_ zum Testen _}\r\n\r\n{F(\"Honorific\")} \r\n{Occasionally(2, cmdr.name)}.\r\nsie besitzen zur Zeit\r\n{OneOf(\"{set value to cmdr.credits} {F('HuVal')}\", \"{Humanise(cmdr.credits)}\")}\r\nCredits!\r\n",
      "name": "Credits",
      "description": "für CMDR Melbar Kaasom",
      "default": false,
      "defaultValue": null
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Crew assigned\")}\r\n\r\n{if event.role = \"Active\" || event.role = \"aktiv\" :\r\n    Pilot {event.name} ist jetzt im aktiven Dienst.\r\n    {SetState('fighter_pilot', true)}\r\n|else:\r\n    Pilot {event.name} ist vom aktiven Dienst zurückgetreten.\r\n    {SetState('fighter_pilot', false)}\r\n\r\n}\r\n\r\n{_\r\n- name    The name of the crewmember being assigned\r\n- crewid  The ID of the crewmember being assigned\r\n- role    The role to which the crewmember is being assigned\r\n_}",
      "name": "Crew assigned",
      "description": "Triggered when you assign crew",
      "default": false,
      "defaultValue": "{if event.role = \"Active\":\r\n    {event.name} is now on active duty.\r\n|else:\r\n    {event.name} standing down from active duty.\r\n}"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Crew fired\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} {OneOf(\"ist nicht länger Bestandteil der crew\", \"wurde gefeuert\", \"wurde entlassen\")}.\r\n\r\n{_\r\n- name    The name of the crewmember being fired\r\n- crewid  The ID of the crewmember being assigned\r\n_}",
      "name": "Crew fired",
      "description": "Triggered when you fire crew",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} has been fired."
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Crew hired\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} {OneOf(\"hat sich unserer crew angeschlossen\", \"wurde aufgenommen\", \"tritt userer Crew bei\")}.\r\n\r\n{_\r\n- name         The name of the crewmember being hired\r\n- crewid       The ID of the crewmember being hired\r\n- faction      The faction of the crewmember being hired\r\n- price        The price of the crewmember being hired\r\n- combatrating The combat rating of the crewmember being hired\r\n_}",
      "name": "Crew hired",
      "description": "Triggered when you hire crew",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} has been hired."
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Crew joined\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'join')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nWir haben uns der Kruh von {event.captain} angeschlossen.\n\n{_ - captain The name of the captain of the crew you have joined _}",
      "name": "Crew joined",
      "description": "Triggered when you join a crew",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nYou have joined {event.captain}'s crew."
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI Event: Crew left\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nWir haben die Kruh von {event.captain} verlassen.\n\n{_ - captain The name of the captain of the crew you have left _}",
      "name": "Crew left",
      "description": "Triggered when you leave a crew",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nYou have left {event.captain}'s crew."
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew member joined\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'join')}\n{SetState('eddi_context_crew_name', event.crew)}\n\n{event.crew} hat sich unserer Kruh angeschlossen.\n\n{_ - crew The name of the crew member who joined _}",
      "name": "Crew member joined",
      "description": "Triggered when a commander joins your crew",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} has joined your crew."
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew member launched\"]}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'launch')}\n{SetState('eddi_context_crew_name', event.crew)}\n\n{event.crew} hat den {OneOf(\"Fighter\",\"Jäger\")} gestartet.\n\n{_ - crew The name of the crew member who launched _}",
      "name": "Crew member launched",
      "description": "Triggered when a crew member launches the fighter",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'launch')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} has launched their fighter."
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew member left\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.crew)}\n\n{event.crew} hat unsere Kruh verlassen.\n\n{_ - crew The name of the crew member who left _}",
      "name": "Crew member left",
      "description": "Triggered when a commander leaves your crew",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} has left your crew."
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew member removed\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'remove')}\n{SetState('eddi_context_crew_name', event.crew)}\n\nWir haben {event.crew} aus unserer Kruh geworfen.\n\n{_ - crew The name of the crew member who was removed _}",
      "name": "Crew member removed",
      "description": "Triggered when you remove a commander from your crew",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'remove')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nYou have removed {event.crew} from your crew."
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew member role changed\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'role')}\n{SetState('eddi_context_crew_name', event.crew)}\n{SetState('eddi_context_crew_role', event.role)}\n\n{if event.role = 'Idle':\n    {event.crew} hat seine Station verlassen\n|elif event.role = 'Fighter':\n    {event.crew} {OneOf(\"steuert\",\"besetzt\", \"fliegt\")} ab sofort den {OneOf(\"Fighter\",\"Jäger\")}\n|elif event.role = 'Gunner':\n    {event.crew} {OneOf(\"steuert\",\"besetzt\", \"führt\")} ab sofort die Waffen\n}.\n\n{_\n- crew The name of the crew member who changed their role\n- role The new role of the crew member\n_}",
      "name": "Crew member role changed",
      "description": "Triggered when a crew member changes their role",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'role')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n{SetState('eddi_context_crew_role', event.role)}\r\n\r\n{if event.role = 'Idle':\r\n    {event.crew} is no longer manning a position\r\n|elif event.role = 'Fighter':\r\n    {event.crew} is now manning the fighter\r\n|elif event.role = 'Gunner':\r\n    {event.crew} is now manning the guns\r\n}.\r\n"
    },
    "Crew paid wage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew paid wage\")}\r\n\r\n{_ Crew paid wage }\r\n{_ Triggered when npc crew receives a profit share }\r\n\r\n{_\r\n- name    The name of the crewmember\r\n- crewid  The ID of the crewmember\r\n- amount  The amount paid to the crewmember\r\n_}\r\n\r\n",
      "name": "Crew paid wage",
      "description": "Triggered when npc crew receives a profit share",
      "default": false,
      "defaultValue": "{_ Crew paid wage }\r\n{_ Triggered when npc crew receives a profit share }\r\n\r\n"
    },
    "Crew promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew promotion\")}\r\n\r\n{_ Crew promotion }\r\n{_ Triggered when crewmember combat rank increases }\r\n\r\nCrew Mitglied {event.name} ist im Kampfrang aufgestiegen. Der neue Rang ist {event.combatrating}.\r\n\r\n{_\r\n- name          The name of the crewmember promoted\r\n- crewid        The ID of the crewmember promoted\r\n- combatrating  The combat rating of the crewmember promoted\r\n_}",
      "name": "Crew promotion",
      "description": "Triggered when crewmember combat rank increases",
      "default": false,
      "defaultValue": "{_ Crew promotion }\r\n{_ Triggered when crewmember combat rank increases }\r\n\r\n\r\nCrew member {event.name} has been promoted to the combat rank of {event.combatrating}."
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Crew role changed\")}\n\n{if event.role = 'Gunner':\n  Sie sind ab sofort der Schütze dieser {OneOf(\"Kruh\",\"Schiffs Besatzung\")}.\n|elif event.role = 'Fighter':\n  Sie sind ab sofort der Kampfpilot dieser {OneOf(\"Kruh\",\"Schiffs Besatzung\")}.\n|elif event.role = 'Idle':\n  Sie haben ab sofort keinen aktiven Posten.\n}\n\n{_ - role The crew role you have been assigned (gunner, fighter, idle) _}",
      "name": "Crew role changed",
      "description": "Triggered when your role in the crew changes",
      "default": false,
      "defaultValue": "{if event.role = 'Gunner':\r\n  You are now this crew's gunner.\r\n|elif event.role = 'Fighter':\r\n  You are now this crew's fighter pilot.\r\n|elif event.role = 'Idle':\r\n  You have been unassigned from active duty.\r\n}"
    },
    "Crime check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Crime check station\")}\r\n\r\n{_ Crime check station }\r\n{_ Check claims, fines & bounties related to the current station }\r\n\r\n{set CheckPad(current_station) to:\r\n    {set largest_pad to lcase(current_station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\": {return true}\r\n        |elif largest_pad = \"medium\":\r\n            {if lcase(ship.size) = \"large\": {return false}\r\n            |else: {return true}\r\n\t\t\t}\r\n\t\t}\r\n        {if lcase(ship.size) = \"small\": {return true}\r\n\t\t}\r\n\t}\r\n\t{return false}\r\n}\r\n\r\n{set HasService(service) to:\r\n\t{if CheckPad(current_station):\r\n\t\t{if find(current_station.stationservices, service) > -1 : {return true}\r\n\t\t|else: {return false}\r\n\t\t}\r\n\t|else: {return false}\r\n\t}\r\n}\r\n\r\n{if state.eddi_context_body_type = 'Station' && station.name && station.name != \"\":\r\n    {set current_station to StationDetails(station.name)}\r\n    {set factions_claims to []}\r\n    {set factions_fines to []}\r\n    {set factions_bounties to []}\r\n    {set station_report to false}\r\n    {set system_claims to 0}\r\n    {set system_fines to 0}\r\n    {set system_bounties to 0}\r\n\r\n\t{for record in criminalrecord:\r\n\t\t{for faction in system.factions:\r\n\t\t\t{if record.faction = faction.name:\r\n\r\n\t\t\t\t{if record.claims > 0 :\r\n\t\t\t\t\t{set factions_claims to cat(factions_claims, [record.faction])}\r\n\t\t\t\t\t{set system_claims to system_claims + record.claims}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{set reports to record.finesIncurred}\r\n\t\t\t\t{if len(reports) > 0 :\r\n\t\t\t\t\t{for report in reports:\r\n\t\t\t\t\t\t{if report.shipId = ship.LocalId:\r\n\t\t\t\t\t\t\t{set system_fines to system_fines + report.amount}\r\n\t\t\t\t\t\t\t{if find(factions_fines, record.faction) < 0 :\r\n\t\t\t\t\t\t\t\t{set factions_fines to cat(factions_fines, [record.faction])}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{set reports to record.bountiesIncurred}\r\n\t\t\t\t{if len(reports) > 0 :\r\n\t\t\t\t\t{for report in reports:\r\n\t\t\t\t\t\t{if report.shipId = ship.LocalId:\r\n\t\t\t\t\t\t\t{set system_bounties to system_bounties + report.amount}\r\n\t\t\t\t\t\t\t{if find(factions_bounties, record.faction) < 0 :\r\n\t\t\t\t\t\t\t\t{set factions_bounties to cat(factions_bounties, [record.faction])}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t{set claim_count to len(factions_claims)}\r\n\t{set fine_count to len(factions_fines)}\r\n\t{set bounty_count to len(factions_bounties)}\r\n    {set bounties to system_bounties > 0 && HasService(\"Interstellar Factors Contact\")}\r\n    {set fines to system_fines > 0 && HasService(\"Contacts\")}\r\n    {set claims to system_claims > 0 && HasService(\"Contacts\")}\r\n\r\n    {if bounties || fines || claims:\r\n        {set actions to []}\r\n        {if bounties:\r\n            {set action to:\r\n            \tEinlösen\r\n                {if bounty_count = 1: eines offenen Kopfgeldes |else: von offenen Kopfgeldern } \r\n            }\r\n            {set actions to cat(actions, [action])}            \r\n        }\r\n        {if fines: \r\n            {set action to:\r\n                Bezahlen\r\n                {if fine_count = 1: einer offenen Geldstrafe |else: offener Geldstrafen }\r\n            }\r\n            {set actions to cat(actions, [action])}            \r\n        }\r\n        {if claims:\r\n            {set action to:\r\n                Einfordern\r\n                {if claim_count = 1: einer offenen Belohnung |else: offener Belohnungen }\r\n                für erbrachte Jagdleistungen\r\n            }\r\n            {set actions to cat(actions, [action])}\r\n        }\r\n        Auf dieser Station gibt es Einrichtungen zum {List(actions)}.\r\n    }\r\n}",
      "name": "Crime check station",
      "description": "OK ! Check claims, fines & bounties related to the current station",
      "default": false,
      "defaultValue": "{_ Crime check station }\r\n{_ Check claims, fines & bounties related to the current station }\r\n\r\n\r\n{set CheckPad(current_station) to:\r\n    {set largest_pad to lcase(current_station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\":\r\n            {return true}\r\n        |elif largest_pad = \"medium\":\r\n            {if lcase(ship.size) = \"large\":\r\n                {return false}\r\n            |else:\r\n                {return true}\r\n            }\r\n        }\r\n        {if lcase(ship.size) = \"small\":\r\n            {return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set HasService(service) to:\r\n    {if CheckPad(current_station):\r\n        {if find(current_station.stationservices, service) > -1:\r\n            {return true}\r\n        |else:\r\n            {return false}\r\n        }\r\n    |else: {return false}\r\n    }\r\n}\r\n\r\n{if state.eddi_context_body_type = 'Station' && station.name && station.name != \"\":\r\n    {set current_station to StationDetails(station.name)}\r\n    {set factions_claims to []}\r\n    {set factions_fines to []}\r\n    {set factions_bounties to []}\r\n    {set station_report to false}\r\n    {set system_claims to 0}\r\n    {set system_fines to 0}\r\n    {set system_bounties to 0}\r\n\r\n    {for record in criminalrecord:\r\n        {for faction in system.factions:\r\n            {if record.faction = faction.name:\r\n\r\n                {if record.claims > 0:\r\n                    {set factions_claims to cat(factions_claims, [record.faction])}\r\n                    {set system_claims to system_claims + record.claims}\r\n                }\r\n\r\n                {set reports to record.finesIncurred}\r\n                {if len(reports) > 0:\r\n                    {for report in reports:\r\n                        {if report.shipId = ship.LocalId:\r\n                            {set system_fines to system_fines + report.amount}\r\n                            {if find(factions_fines, record.faction) < 0:\r\n                                {set factions_fines to cat(factions_fines, [record.faction])}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                {set reports to record.bountiesIncurred}\r\n                {if len(reports) > 0:\r\n                    {for report in reports:\r\n                        {if report.shipId = ship.LocalId:\r\n                            {set system_bounties to system_bounties + report.amount}\r\n                            {if find(factions_bounties, record.faction) < 0:\r\n                                {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {set claim_count to len(factions_claims)}\r\n    {set fine_count to len(factions_fines)}\r\n    {set bounty_count to len(factions_bounties)}\r\n    {set bounties to system_bounties > 0 && HasService(\"Interstellar Factors Contact\")}\r\n    {set fines to system_fines > 0 && HasService(\"Contacts\")}\r\n    {set claims to system_claims > 0 && HasService(\"Contacts\")}\r\n    \r\n    {if bounties || fines || claims:\r\n        {set actions to []}\r\n        {if bounties:\r\n            {set action to:\r\n                clear your pending\r\n                {if bounty_count = 1: bounty |else: bounties }\r\n            }\r\n            {set actions to cat(actions, [action])}            \r\n        }\r\n        {if fines: \r\n            {set action to:\r\n                clear your pending\r\n                {if fine_count = 1: fine |else: fines }\r\n            }\r\n            {set actions to cat(actions, [action])}            \r\n        }\r\n        {if claims:\r\n            {set action to:\r\n                claim your pending\r\n                {if claim_count = 1: reward |else: rewards }\r\n                for hunting services rendered\r\n            }\r\n            {set actions to cat(actions, [action])}\r\n        }\r\n        There are facilities at this station to {List(actions)}.\r\n    }\r\n}"
    },
    "Crime check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Crime check system\")}\r\n\r\n{_ Crime check system }\r\n{_ Check claims, fines & bounties related to the current system }\r\n\r\n{set CheckPad(station) to:\r\n    {set largest_pad to lcase(station.largestpad)}\r\n    {if largest_pad != \"none\" || largest_pad != \"Kein\":\r\n        {if largest_pad = \"large\" || largest_pad != \"Groß\": {return true} }\r\n        |elif largest_pad = \"medium\" || largest_pad != \"Mittel\":\r\n            {if lcase(ship.size) = \"large\" || lcase(ship.size) = \"Groß\": {return false}\r\n            |else: {return true}\r\n\t\t\t}\r\n\t\t\t{if lcase(ship.size) = \"small\" || lcase(ship.size) = \"Klein\": {return true}\r\n\t\t}\r\n\t\t{return false}\r\n\t}\r\n\r\n\t{set NearestStation(service) to:\r\n\t\t{set distance to 0}\r\n\t\t{set station_count to 0}\r\n\t\t{set orbital_count to 0}\r\n\r\n    {_ If preferred & available, use orbital stations }\r\n\t\t{if orbitalpriority:\r\n\t\t\t{for station in system.orbitalstations:\r\n\t\t\t\t{if find(station.stationservices, service) > -1 :\r\n\t\t\t\t\t{set orbital_count to orbital_count + 1}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n    {_ Force orbital stations when game version is not 'Horizons' }\r\n\t\t{if orbital_count > 0 || !horizons : {set stations to system.orbitalstations}\r\n\t\t|else:\t{set stations to system.stations}\r\n\t\t}\r\n\r\n    {_ Get the total count and nearest station }\r\n\t\t{for station in stations:\r\n\t\t\t{if CheckPad(station):\r\n\t\t\t\t{if find(station.stationservices, service) > -1 :\r\n\t\t\t\t\t{set station_count to station_count + 1}\r\n\t\t\t\t\t{if distance = 0 || station.distancefromstar < distance:\r\n\t\t\t\t\t\t{set distance to station.distancefromstar}\r\n\t\t\t\t\t\t{set nearest_station to station.name}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t{set factions_claims to []}\r\n\t{set factions_fines to []}\r\n\t{set factions_bounties to []}\r\n\t{set station_report to false}\r\n\t{set system_claims to 0}\r\n\t{set system_fines to 0}\r\n\t{set system_bounties to 0}\r\n\t{set wanted_count to 0}\r\n\r\n\t{for record in criminalrecord:\r\n\t\t{for faction in system.factions:\r\n\t\t\t{if record.faction = faction.name:\r\n\t\t\t\t{if record.claims > 0 :\r\n\t\t\t\t\t{set factions_claims to cat(factions_claims, [record.faction])}\r\n\t\t\t\t\t{set system_claims to system_claims + record.claims}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{set reports to record.finesIncurred}\r\n\t\t\t\t{if len(reports) > 0 :\r\n\t\t\t\t\t{for report in reports:\r\n\t\t\t\t\t\t{if report.shipId = ship.LocalId:\r\n\t\t\t\t\t\t\t{set system_fines to system_fines + report.amount}\r\n\t\t\t\t\t\t\t{if find(factions_fines, record.faction) < 0 :\r\n\t\t\t\t\t\t\t\t{set factions_fines to cat(factions_fines, [record.faction])}\r\n\t\t\t\t\t\t\t\t{if find(factions_bounties, record.faction) < 0 :\r\n\t\t\t\t\t\t\t\t\t{set wanted_count to wanted_count + 1}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{set reports to record.bountiesIncurred}\r\n\t\t\t\t{if len(reports) > 0 :\r\n\t\t\t\t\t{for report in reports:\r\n\t\t\t\t\t\t{if report.shipId = ship.LocalId:\r\n\t\t\t\t\t\t\t{set system_bounties to system_bounties + report.amount}\r\n\t\t\t\t\t\t\t{if find(factions_bounties, record.faction) < 0 :\r\n\t\t\t\t\t\t\t\t{set factions_bounties to cat(factions_bounties, [record.faction])}\r\n\t\t\t\t\t\t\t\t{if find(factions_fines, record.faction) < 0 :\r\n\t\t\t\t\t\t\t\t\t{set wanted_count to wanted_count + 1}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t{set claim_count to len(factions_claims)}\r\n\t{set fine_count to len(factions_fines)}\r\n\t{set bounty_count to len(factions_bounties)}\r\n\r\n\t{if wanted_count > 0 :\r\n\t\tWarnung: {ShipName()} wird gesucht von {wanted_count}\r\n\t\t{if wanted_count = 1 : Fraktion |else: Fraktionen},\r\n\t\tfür eine Gesammtsumme von {Humanise(system_fines + system_bounties)} credditts.\r\n\t}\r\n\r\n{_ Report nearest station to clear bounties }\r\n\t{if system_bounties > 0 :\r\n\t\t{NearestStation(\"Interstellar Factors Contact\")}\r\n\t\t{if station_count > 0 :\r\n\t\t\tIn diesem system gibt es {if station_count = 1 : Eine |else: {station_count}} \r\n\t\t\t{if orbitalpriority: orbital}\r\n\t\t\t{if station_count = 1 : station |else: stationen} um die offenen Kopfgelder zu bezahlen.\r\n\t\t\t{nearest_station} ist die mit der geringsten Entfernung. Sie ist cirka\r\n\t\t\t{round(distance, 1)} Lichtsekunden vom Hauptstern entfernt.\r\n\t\t\t{set station_report to true}\r\n\t\t}\r\n\t}\r\n\r\n\t{if system_fines > 0 && !station_report:\r\n\t\t{NearestStation(\"Contacts\")}\r\n\t\t{if station_count > 0 :\r\n\t\t\tHier gibt es {if station_count = 1 : Eine |else: {station_count}} \r\n\t\t\t{if orbitalpriority: orbital}\r\n\t\t\t{if station_count = 1 : station |else: stationen} um die offenen Geldbußen zu bezahlen.\r\n\t\t\t{nearest_station} ist die mit der geringsten Entfernung. Sie ist cirka\r\n\t\t\t{round(distance, 1)} Lichtsekunden vom Hauptstern entfernt.\r\n\t\t\t{set station_report to true}\r\n\t\t}\r\n\t}\r\n\r\n{_ Report nearest station for pending claims }\r\n\t{if system_claims > 0 :\r\n\t\tWir haben Kopfgeldansprüche in diesem System bei {if claim_count = 1 : einer |else: {claim_count}}\r\n\t\t{if claim_count = 1 : Fraktion |else: Fraktionen}, über cirka {Humanise(system_claims)} credditts.\r\n\r\n\t\t{if !station_report:\r\n\t\t\t{if system_fines = 0 : {NearestStation(\"Contacts\")}}\r\n\t\t\t{if station_count > 0 :\r\n\t\t\t\tHier gibt es {if station_count = 1 : Eine |else: {station_count}} \r\n\t\t\t\t{if orbitalpriority: orbital}\r\n\t\t\t\t{if station_count = 1 : station |else: stationen} um die offenen {OneOf(\"Ansprüche einzulösen\", \"Belohnungen abzuholen\")}.\r\n\t\t\t\t{nearest_station} ist die mit der geringsten Entfernung. Sie ist cirka\r\n\t\t\t\t{round(distance, 1)} Lichtsekunden vom Hauptstern entfernt.\r\n\t\t\t\t{set station_report to true}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
      "name": "Crime check system",
      "description": "OK ! Check claims, fines & bounties related to the current system",
      "default": false,
      "defaultValue": "{_ Crime check system }\r\n{_ Check claims, fines & bounties related to the current system }\r\n\r\n\r\n{set CheckPad(station) to:\r\n    {set largest_pad to lcase(station.largestpad)}\r\n    {if largest_pad != \"none\":\r\n        {if largest_pad = \"large\":\r\n            {return true}\r\n        |elif largest_pad = \"medium\":\r\n            {if lcase(ship.size) = \"large\":\r\n                {return false}\r\n            |else:\r\n                {return true}\r\n            }\r\n        }\r\n        {if lcase(ship.size) = \"small\":\r\n            {return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set NearestStation(service) to:\r\n    {set distance to 0}\r\n    {set station_count to 0}\r\n    {set orbital_count to 0}\r\n\r\n    {_ If preferred & available, use orbital stations }\r\n    {if orbitalpriority:\r\n        {for station in system.orbitalstations:\r\n            {if find(station.stationservices, service) > -1:\r\n                {set orbital_count to orbital_count + 1}\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Force orbital stations when game version is not 'Horizons' }\r\n    {if orbital_count > 0 || !horizons:\r\n        {set stations to system.orbitalstations}\r\n    |else:\r\n        {set stations to system.stations}\r\n    }\r\n\r\n    {_ Get the total count and nearest station }\r\n    {for station in stations:\r\n        {if CheckPad(station):\r\n            {if find(station.stationservices, service) > -1:\r\n                {set station_count to station_count + 1}\r\n                {if distance = 0 || station.distancefromstar < distance:\r\n                    {set distance to station.distancefromstar}\r\n                    {set nearest_station to station.name}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_claims to []}\r\n{set factions_fines to []}\r\n{set factions_bounties to []}\r\n{set station_report to false}\r\n{set system_claims to 0}\r\n{set system_fines to 0}\r\n{set system_bounties to 0}\r\n{set wanted_count to 0}\r\n\r\n{for record in criminalrecord:\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n\r\n            {if record.claims > 0:\r\n                {set factions_claims to cat(factions_claims, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n\r\n            {set reports to record.finesIncurred}\r\n            {if len(reports) > 0:\r\n                {for report in reports:\r\n                    {if report.shipId = ship.LocalId:\r\n                        {set system_fines to system_fines + report.amount}\r\n                        {if find(factions_fines, record.faction) < 0:\r\n                            {set factions_fines to cat(factions_fines, [record.faction])}\r\n                            {if find(factions_bounties, record.faction) < 0:\r\n                                {set wanted_count to wanted_count + 1}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            {set reports to record.bountiesIncurred}\r\n            {if len(reports) > 0:\r\n                {for report in reports:\r\n                    {if report.shipId = ship.LocalId:\r\n                        {set system_bounties to system_bounties + report.amount}\r\n                        {if find(factions_bounties, record.faction) < 0:\r\n                            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n                            {if find(factions_fines, record.faction) < 0:\r\n                                {set wanted_count to wanted_count + 1}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set claim_count to len(factions_claims)}\r\n{set fine_count to len(factions_fines)}\r\n{set bounty_count to len(factions_bounties)}\r\n\r\n{if wanted_count > 0:\r\n    Warning: {ShipName()} is wanted in this system by {wanted_count}\r\n    {if wanted_count = 1: faction |else: factions},\r\n    for total fines and bounties of {Humanise(system_fines + system_bounties)} credits.\r\n}\r\n\r\n{_ Report nearest station to clear bounties }\r\n{if system_bounties > 0:\r\n    {NearestStation(\"Interstellar Factors Contact\")}\r\n    {if station_count > 0:\r\n        There are legal facilities at {station_count} {if orbitalpriority: orbital}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if bounty_count = 1: bounty |else: bounties}.\r\n        {if station_count = 1: It |else: The nearest} is {nearest_station},\r\n        {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{if system_fines > 0 && !station_report:\r\n    {NearestStation(\"Contacts\")}\r\n    {if station_count > 0:\r\n        There {if station_count = 1: is |else: are} {station_count} {if orbitalpriority: orbital}\r\n        {if station_count = 1: station |else: stations} to clear your pending\r\n        {if fine_count = 1: fine |else: fines}.\r\n        {if station_count = 1: It |else: The nearest} is {nearest_station},\r\n        {round(distance, 1)} light-seconds from the main star.\r\n        {set station_report to true}\r\n    }\r\n}\r\n\r\n{_ Report nearest station for pending claims }\r\n{if system_claims > 0:\r\n    You have bond and bounty claims in this system for {claim_count}\r\n    {if claim_count = 1: faction |else: factions}, for a total of {Humanise(system_claims)} credits.\r\n\r\n    {if !station_report:\r\n        {if system_fines = 0: {NearestStation(\"Contacts\")}}\r\n        {if station_count > 0:\r\n            There {if station_count = 1: is |else: are} {station_count} {if orbitalpriority: orbital}\r\n            {if station_count = 1: station |else: stations} to claim your\r\n            {if claim_count = 1: reward |else: rewards}.\r\n            {if station_count = 1: It |else: The nearest} is {nearest_station},\r\n            {round(distance, 1)} light-seconds from the main star.\r\n        }\r\n    }\r\n}\r\n"
    },
    "Crime descriptions": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Crime descriptions\")}\r\n\r\n{if event.crimetype = \"illegalCargo\":\r\n   {OneOf(\r\n      \"wegen Schmuggelns\", \r\n      \"für den Transport illegaler Güter\", \r\n      \"weil man illegale Fracht im Lade Raum gescannt hat\", \r\n      \"weil Sie illegale Fracht transportieren\"\r\n   )}\r\n|elif event.crimetype = \"disobeyPolice\":\r\n   {OneOf(\r\n      \"wegen ungehorsam gegenüber den lokalen Behörden\", \r\n      \"wegen Missachtung der polizeilichen Weisungen\", \r\n      \"wegen des ignorierens behördlicher Aufforderungen\", \r\n   )}\r\n|elif event.crimetype = \"fireInNoFireZone\":\r\n   {OneOf(\r\n      \"wegen Waffengebrauchs in einer waffenfreien Zone\", \r\n      \"für den Waffeneinsatz in einer waffenfreien Zone\", \r\n      \"für das Rumballan in einer waffenfreien Zone\", \r\n      \"weil Sie das Feuer in einer waffenfreien Zone eröffnet haben\"\r\n      \"weil Sie in einer waffenfreien Zone rumballan mussten\"\r\n   )}\r\n|elif event.crimetype = \"fireInStation\":\r\n   {OneOf(\r\n      \"wegen Waffengebrauchs innerhalb einer Raumstation\",\r\n      \"für den Waffeneinsatz innerhalb einer Raumstation\",\r\n      \"für das Rumballan in einer Raumstation\",\r\n      \"weil Sie das Feuer innerhalb einer Raumstation eröffnet haben\"\r\n   )}\r\n|elif event.crimetype = \"dumpingDangerous\":\r\n   {OneOf(\r\n      \"für {Occasionally(3, 'den Transport und')} {OneOf('den Abwurf','das Abladen','die Aufgabe','den Ausstoß')} {OneOf('gefährlicher Substanzen','von Gefahrenstoffen')}\",\r\n      \"weil Sie hier Ihren Sondermüll {OneOf('abladen','rausschmeißen','entsorgen')} mussten\"\r\n   )}\r\n|elif event.crimetype = \"dumpingNearStation\":\r\n   {OneOf(\r\n      \"für {OneOf('den Abwurf','das Abladen','die Aufgabe','den Ausstoß')} von {OneOf('Ladungsgut','Fracht','Frachtgut')} an einer Station\",\r\n      \"weil Sie {OneOf('Ihren Müll','Ihr Zeug','Ihren Krahm')} an einer Station {OneOf('abladen','rausschmeißen','entsorgen')} mussten\"\r\n   )}\r\n|elif event.crimetype = \"dockingMinorBlockingAirlock\":\r\n   {OneOf(\r\n      \"für das Blockieren der Luftschleuse\",\r\n      \"für das Rumlungern an einer Luftschleuse\",\r\n      \"für das Behindern des Durchgangs Verkehrs an einer Luftschleuse\",\r\n      \"weil Sie die Luftschleuse mit einer Andockbucht verwechselt haben\"\r\n   )}\r\n|elif event.crimetype = \"dockingMajorBlockingAirlock\":\r\n   {OneOf(\r\n      \"für das wiederholte Blockieren der Luftschleuse\",\r\n      \"für das wiederholte Rumlungern an einer Luftschleuse\",\r\n      \"für das wiederholte Behindern des Durchgangs Verkehrs an einer Luftschleuse\"\r\n      \"weil Sie wiederhohlt die Luftschleuse mit einer Andockbucht verwechselt haben\"\r\n   )}\r\n|elif event.crimetype = \"dockingMinorBlockingLandingPad\":\r\n   {OneOf(\r\n      \"für das Blockieren der Andockrampe\",\r\n      \"für das Rumlungern an einer Andockrampe\",\r\n      \"für das Behindern des Andock Verkehrs an einer Andockrampe\",\r\n    )}\r\n|elif event.crimetype = \"dockingMajorBlockingLandingPad\":\r\n   {OneOf(\r\n      \"für das wiederholte Blockieren der Andockrampe\",\r\n      \"für das wiederholte Rumlungern an einer Andockrampe\",\r\n      \"für das wiederholte Behindern des Andock Verkehrs an einer Andockrampe\",\r\n   )}\r\n|elif event.crimetype = \"dockingMinorTresspass\":\r\n   {OneOf(\r\n      \"für unbefugten Aufenthalt\",\r\n      \"für das {Occasionally(2, 'widerrechtliche')} Eindringen in {OneOf('eine zugangsbeschränkte Zone','einen zugangsbeschränkten Bereich')}\",\r\n      \"weil Sie {Occasionally(2, 'widerrechtlich')} {OneOf('eine zugangsbeschränkte Zone','einen zugangsbeschränkten Bereich')} betreten haben\",\r\n      \"weil Sie {Occasionally(2, 'widerrechtlich')} in {OneOf('eine zugangsbeschränkte Zone','einen zugangsbeschränkten Bereich')} eingedrungen sind\",\r\n   )}\r\n|elif event.crimetype = \"dockingMajorTrespass\":\r\n   {OneOf(\r\n      \"für unbefugtes Aufahlten in {OneOf('einer zugangsbeschränkten Zone','einem zugangsbeschränkten Bereich')}\", \r\n      \"für den {Occasionally(2, 'widerrechtlichen')} Aufenthalt in {OneOf('einer zugangsbeschränkten Zone','einem zugangsbeschränkten Bereich')}\",\r\n      \"weil Sie sich längere Zeit {Occasionally(2, 'widerrechtlich')} in {OneOf('einer zugangsbeschränkten Zone','einem zugangsbeschränkten Bereich')} aufgehalten haben\",\r\n   )}\r\n|elif event.crimetype = \"collidedAtSpeedInNoFireZone\":\r\n   {OneOf(\r\n      \"für das Rammen eines Schiffes mit hoher Geschwindigkeit in einer {OneOf('waffenfreien','entmilitarisierten')} Zone\", \r\n      \"weil Sie ein fremdes Schiff mit hoher Geschwindigkeit in einer {OneOf('waffenfreien','entmilitarisierten')} Zone gerammt haben\",\r\n      \"für die verschuldete Kollision mit hoher Geschwindigkeit in einer {OneOf('waffenfreien','entmilitarisierten')} Zone\"\r\n   )}\r\n|elif event.crimetype = \"collidedAtSpeedInNoFireZone_hulldamage\":\r\n   {OneOf(\r\n      \"für die Kollision mit resultierendem Hüll Schaden an einem anderen Schiff in einer {OneOf('waffenfreien','entmilitarisierten')} Zone\"\r\n      \"für das Rammen eines Schiffes in einer {OneOf('waffenfreien','entmilitarisierten')} Zone\"\r\n   )}\r\n|elif event.crimetype = \"assault\":\r\n   {OneOf(\r\n      \"für den Angriff auf ein unbescholtenes Schiff\", \r\n      \"für den Angriff auf ein Schiff ohne Kopfgeldstatus\", \r\n      \"für den Angriff auf ein unbeteiligtes Schiff\", \r\n      \"für den Angriff auf ein Schiff das bei den hiesigen Behörden als gesetzes treu gilt\", \r\n   )}\r\n|elif event.crimetype = \"murder\":\r\n   {OneOf(\r\n      \"für Mord\", \r\n      \"für die Zerstörung eines unbescholtenes Schiffes\", \r\n      \"für die Zerstörung eines Schiffes ohne Kopfgeldstatus\", \r\n      \"für die Zerstörung eines unbeteiligten Schiffes\", \r\n      \"für die Zerstörung eines Schiffes das bei den hiesigen Behörden als gesetzes treu galt\"\r\n   )}\r\n|elif event.crimetype = \"piracy\":\r\n   {OneOf(\r\n      \"für Piraterie\",\r\n      \"für diesen Akt der Piraterie\",\r\n      \"für das Aneignen fremden Eigentums\"\r\n   )}\r\n|elif event.crimetype = \"interdiction\":\r\n   {OneOf(\r\n      \"für das Durchführen einer nicht autorisierten Interdiction\", \r\n      \"für das {OneOf('Interdicten','Abfangen')} eines {OneOf('unbescholtenen Schiffes','unbeteiligten Schiffes','Schiffes ohne Kopfgeldstatus')}\", \r\n   )}\r\n|elif event.crimetype: \r\n    für {event.crimetype}\r\n}\r\n",
      "name": "Crime descriptions",
      "description": "Beschreibung möglicher Gründe für eine Strafe oder Kopfgeld",
      "default": false,
      "defaultValue": null
    },
    "Crime report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Crime report\")}\r\n\r\n{_ Crime report}\r\n{_ Report on all pending claims, fines, and bounties }\r\n\r\n{set factions_claims to []}\r\n{set claims_count to 0}\r\n{set factions_fines to []}\r\n{set fines_count to 0}\r\n{set factions_bounties to []}\r\n{set systems_bounties to []}\r\n\r\n{for record in criminalrecord:\r\n    {set faction to FactionDetails(record.faction)}\r\n    {if faction:\r\n        {if record.bounties > 0:\r\n            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n            {for presence in faction.presences:\r\n                {if find(presence.systemName, systems_bounties) = -1:\r\n                    {set systems_bounties to cat(systems_bounties, [presence.systemName])}\r\n                }\r\n            }\r\n        }\r\n        {if record.fines > 0:\r\n            {set factions_fines to cat(factions_fines, [record.faction])}\r\n        }\r\n        {if record.claims > 0:\r\n            {set factions_claims to cat(factions_claims, [record.faction])}\r\n        }\r\n\r\n        {for report in record.factionReports:\r\n            {if !report.bounty && report.crimeEDName != \"none\":\r\n                {set fines_count to fines_count + 1}\r\n            }\r\n            {if report.crimeEDName = \"none\":\r\n                {set claims_count to claims_count + 1}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_count to len(factions_bounties)}\r\n{set systems_count to len(factions_bounties)}\r\n\r\n{if factions_count > 0:\r\n    Du wirst gesucht von {if factions_count = 1: einer Fraktion |else: {factions_count} Fraktionen}\r\n    in {if systems_count = 1: einem System |else: {systems_count} Systemen}\r\n    für zusammen {Humanise(bounties)} credditts.\r\n}\r\n\r\n{set factions_count to len(factions_fines)}\r\n{if factions_count > 0:\r\n    Du hast {if fines_count = 1: eine |else: {fines_count}} offene Geldstrafen von\r\n    {if factions_count = 1: einer Fraktion |else: {factions_count} Fraktionen},\r\n    für zusammen {Humanise(fines)} credditts.\r\n}\r\n\r\n{set factions_count to len(factions_claims)}\r\n{if factions_count > 0:\r\n    Du hast {if claims_count = 1: eine offene Belohnung |else: {claims_count} offene Belohnungen} von\r\n    {if factions_count = 1: einer Fraktion |else: {factions_count} Fraktionen},\r\n    für zusammen {Humanise(claims)} credditts.\r\n}",
      "name": "Crime report",
      "description": "Report on all pending claims, fines, and bounties",
      "default": false,
      "defaultValue": "{_ Crime report}\r\n{_ Report on all pending claims, fines, and bounties }\r\n\r\n\r\n{set factions_claims to []}\r\n{set claims_count to 0}\r\n{set factions_fines to []}\r\n{set fines_count to 0}\r\n{set factions_bounties to []}\r\n{set systems_bounties to []}\r\n\r\n{for record in criminalrecord:\r\n    {set faction to FactionDetails(record.faction)}\r\n    {if faction:\r\n        {if record.bounties > 0:\r\n            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n            {for presence in faction.presences:\r\n                {if find(presence.systemName, systems_bounties) = -1:\r\n                    {set systems_bounties to cat(systems_bounties, [presence.systemName])}\r\n                }\r\n            }\r\n        }\r\n        {if record.fines > 0:\r\n            {set factions_fines to cat(factions_fines, [record.faction])}\r\n        }\r\n        {if record.claims > 0:\r\n            {set factions_claims to cat(factions_claims, [record.faction])}\r\n        }\r\n\r\n        {for report in record.factionReports:\r\n            {if !report.bounty && report.crimeEDName != \"none\":\r\n                {set fines_count to fines_count + 1}\r\n            }\r\n            {if report.crimeEDName = \"none\":\r\n                {set claims_count to claims_count + 1}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_count to len(factions_bounties)}\r\n{set systems_count to len(factions_bounties)}\r\n\r\n{if factions_count > 0:\r\n    You are wanted by {factions_count} {if factions_count = 1: faction |else: factions}\r\n    in {systems_count} {if systems_count = 1: system |else: systems} for a total of\r\n    {Humanise(bounties)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_fines)}\r\n{if factions_count > 0:\r\n    You have {fines_count} pending {if fines_count = 1: fine |else: fines} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(fines)} credits.\r\n}\r\n\r\n{set factions_count to len(factions_claims)}\r\n{if factions_count > 0:\r\n    You have {claims_count} uncollected {if claims_count = 1: claim |else: claims} from\r\n    {factions_count} {if factions_count = 1: faction |else: factions},\r\n    for a total of {Humanise(claims)} credits.\r\n}"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Damage check\")}\r\n\r\n{_ Track if there is any damage_ }\r\n{set damaged to 0}\r\n\r\nZustandsbericht unseres Schiffes,\r\n\r\n{Pause(1000)}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 98:\r\n    Schiffs Hülle bei {round(ship.health, 0)}%.\r\n    {set damaged to 1}\r\n}\r\n\r\n{_ Announce critical module health _}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{  if ship.powerplant.health <  60: {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100: {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n{  if ship.thrusters.health <  60: {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100: {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n{  if ship.frameshiftdrive.health <  60: {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100: {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n{  if ship.powerdistributor.health <  60: {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100: {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n{  if ship.lifesupport.health <  60: {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100: {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n{  if ship.sensors.health <  60: {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100: {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0: {set damaged to 1} Beträchtlicher Schaden an\r\n    {  if len(majordamage) = 1: {majordamage[0].name}\r\n    |elif len(majordamage) = 2: {majordamage[0].name} und {majordamage[1].name}\r\n    |else                     : {set cur to 0}\r\n        {while cur < len(majordamage):\r\n            {if cur = 0                     :       {majordamage[cur].name}\r\n            |elif cur < len(majordamage) - 1:     , {majordamage[cur].name}\r\n            |else                           : , und {majordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{if len(minordamage) > 0: {set damaged to 1} Geringer Schaden an\r\n    {  if len(minordamage) = 1: {minordamage[0].name}\r\n    |elif len(minordamage) = 2: {minordamage[0].name} und {minordamage[1].name}\r\n    |else                     : {set cur to 0}\r\n        {while cur < len(minordamage):\r\n            {if cur = 0                     :       {minordamage[cur].name}\r\n            |elif cur < len(minordamage) - 1:     , {minordamage[cur].name}\r\n            |else                           : , und {minordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{_ Announce other module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{for compartment in ship.compartments:\r\n    {  if compartment.module.health <  60: {set majordamage to cat(majordamage, [compartment.module.name])}\r\n    |elif hardpoint.module.health   < 100: {set minordamage to cat(minordamage, [compartment.module.name])}\r\n    }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n    {  if hardpoint.module.health <  60: {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n    |elif hardpoint.module.health < 100: {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n    }.\r\n}\r\n\r\n{if len(majordamage) > 0: {set damaged to 1}\r\n    {  if len(majordamage) = 1: Eine weitere Schiffs Komponente mit beträchtlichem Schaden.\r\n    |elif len(majordamage) > 1: und {len(majordamage)} weitere Schiffs Komponenten mit beträchtlichem Schaden.\r\n    }\r\n    {  if len(minordamage) = 1: und eine weitere Komponente mit geringem Schaden.\r\n    |elif len(minordamage) > 1: und {len(minordamage)} weitere Komponenten mit geringem Schaden.\r\n    }\r\n|elif len(minordamage) = 1: {set damaged to 1} Eine weitere Komponente mit geringem Schaden.\r\n|elif len(minordamage) > 1: {set damaged to 1} {len(minordamage)} weitere Komponenten mit geringem Schaden.\r\n.}\r\n\r\n{if damaged = 0:\r\n    {OneOf(\"Alle Systeme voll einsatz bereit\", \"{ShipName()} ist voll einsatz bereit\", \"{ShipName()} ist unbeschädigt\")}\r\n.}",
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship",
      "default": false,
      "defaultValue": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n    Hull at {Humanise(ship.health)}%.\r\n    {set damaged to 1}\r\n}\r\n\r\n{_ Announce critical module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    Major damage to\r\n    {if len(majordamage) = 1:\r\n        {majordamage[0].name}\r\n    |elif len(majordamage) = 2:\r\n        {majordamage[0].name} and {majordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(majordamage):\r\n            {if cur = 0:\r\n                {majordamage[cur].name}\r\n            |elif cur < len(majordamage) - 1:\r\n                , {majordamage[cur].name}\r\n            |else:\r\n                ,and {majordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n    {set damaged to 1}\r\n    Minor damage to\r\n    {if len(minordamage) = 1:\r\n        {minordamage[0].name}\r\n    |elif len(minordamage) = 2:\r\n        {minordamage[0].name} and {minordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(minordamage):\r\n            {if cur = 0:\r\n                {minordamage[cur].name}\r\n            |elif cur < len(minordamage) - 1:\r\n                , {minordamage[cur].name}\r\n            |else:\r\n                ,and {minordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{_ Announce other module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.health < 60:\r\n        {set majordamage to cat(majordamage, [compartment.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [compartment.module.name])}\r\n    }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module.health < 60:\r\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n    }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    {if len(majordamage) = 1:\r\n       One other ship component with major damage\r\n    |elif len(majordamage) > 1:\r\n        {len(majordamage)} other ship components with major damage\r\n    }\r\n    {if len(minordamage) = 1:\r\n       and one other ship component with minor damage\r\n    |elif len(minordamage) > 1:\r\n       and {len(minordamage)} other ship components with minor damage\r\n    }.\r\n|elif len(minordamage) = 1:\r\n    {set damaged to 1}\r\n    One other ship component with minor damage.\r\n|elif len(minordamage) > 1:\r\n    {set damaged to 1}\r\n    {len(minordamage)} other ship components with minor damage.\r\n}\r\n\r\n{if damaged = 0:\r\n    {OneOf(\"All systems fully operational.\", \"{ShipName()} is fully operational.\", \"{ShipName()} is undamaged.\")}\r\n}\r\n"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Data scanned\")}\r\n\r\n{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\nInformationen der {event.datalinktype} gespeichert.\r\n\r\n{_ - datalinktype The type of Data Link scanned _}",
      "name": "Data scanned",
      "description": "Triggered when scanning some types of data links",
      "default": false,
      "defaultValue": "{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\nData scan of {event.datalinktype} completed."
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI EVENT: Data voucher awarded\")}\r\n\r\n{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\nBelohnung für eine Datenlieferung von \r\n{event.payeefaction} über {set value to event.reward} {F(\"Humanise ValueGer\")} \r\ncredditts erhalten.\r\n\r\n{_\r\n- reward         The number of credits received\r\n- victimfaction  The name of the faction whose data you scanned\r\n- payeefaction   The name of the faction awarding the voucher\r\n_}\r\n",
      "name": "Data voucher awarded",
      "description": "Triggered when you are awarded a data voucher",
      "default": false,
      "defaultValue": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\nData voucher awarded from {event.payeefaction} for {Humanise(event.reward)} credits.\r\n"
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Data voucher redeemed\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'data_voucher')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_data_voucher_amount', event.amount)}\n\nGutschrift in Höhe von {set value to event.amount} {F(\"Humanise ValueGer\")} credditts\n{Occasionally(1, \"{set from to 1}\n  {if len(event.rewards) = 1:\n    von {set translate to event.rewards[0].faction} {F(\"Translate Power\")}\n  |else: von\n    {set cur to 0}\n    {while cur < len(event.rewards):\n        {if cur = 0:\n        |elif cur < len(event.rewards) - 1: , \n        |else: und\n        }\n        {set translate to event.rewards[cur].faction} {F(\"Translate Power\")}\n        {set cur to cur + 1}\n    }\n  }\n\")} für eine Datenlieferung eingelöst.\n\n{_\n- rewards           The rewards obtained broken down by faction\n- amount            The amount rewarded (after any broker fees)\n- brokerpercentage  Broker precentage fee (if paid via a Broker)\n_}",
      "name": "Data voucher redeemed",
      "description": "Triggered when you redeem a data voucher",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_data_voucher_amount', event.amount)}\r\n\r\n{set singular to len(event.rewards) = 1}\r\nData \r\n{if singular: voucher |else: vouchers}\r\nfor {Humanise(event.amount)} credits\r\n{Occasionally(2, \"{if singular: has |else: have} {Occasionally(2, 'now')} been\"))}\r\n{OneOf(\"redeemed\", \"claimed\")}\r\n\r\n{Occasionally(2, \"\r\n  {if singular && len(event.rewards[0].faction) > 0:\r\n    {OneOf(\"by\", \"courtesy of\")}\r\n    {P(event.rewards[0].faction, \"faction\")}\r\n  |else:\r\n    {if len(event.rewards[0].faction) > 0:\r\n       {OneOf(\"by\", \"courtesy of\")}\r\n       {set cur to 0}\r\n       {while cur < len(event.rewards):\r\n          {if cur = 0:\r\n          |elif cur < len(event.rewards) - 1:\r\n              , \r\n          |else:\r\n              and\r\n          }\r\n          {P(event.rewards[cur].faction, \"faction\")}\r\n          {set cur to cur + 1}\r\n       }\r\n    }\r\n  }\r\n\")}."
    },
    "Datalink message": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": null,
      "name": "Datalink message",
      "description": "Triggered upon completion of Datalink scan",
      "default": true,
      "defaultValue": null
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Died\")}\r\n\r\n{if len(event.ships) > 0:\r\n\r\n    {set commanders to []}\r\n    {for cmdr in event.commanders:\r\n        {if find(cmdr, \"$ShipName\") >= 0:\r\n           {_ Ignore NPC ships _}        \r\n        |else: \r\n           {set commanders to cat(commanders, [cmdr])}\r\n        }\r\n    }\r\n\r\n    {ShipName()} wurde\r\n    {Occasionally(2, \"gerade\")}\r\n    {OneOf(\"weggeblasen\", \"terminiert\", \"zerstört\")}\r\n    \r\n    {if len(commanders) = 1:\r\n        von {commanders[0]} \r\n        in einem Schif vom Typ {event.ships[0]} \r\n        mit einem Kampfrang von {event.ratings[0]}.\r\n    |elif len(commanders) = 2:\r\n        von {commanders[0]} \r\n        in einem Schif vom Typ {event.ships[0]} \r\n        mit einem Kampfrang von {event.ratings[0]}, \r\n        und von {commanders[1]} \r\n        in einem Schif vom Typ {event.ships[1]}\r\n        mit einem Kampfrang von {event.ratings[1]}.\r\n    |elif len(commanders) > 2:\r\n        {set cur to 0}\r\n        von\r\n        {while cur < len(commanders):\r\n            {if cur = 0:\r\n                {commanders[cur]} \r\n                in einem Schif vom Typ {event.ships[cur]} \r\n                mit einem Kampfrang von {event.ratings[cur]}\r\n            |elif cur < len(commanders) - 1:\r\n                , {commanders[cur]} \r\n                in einem Schif vom Typ {event.ships[cur]} \r\n                mit einem Kampfrang von {event.ratings[cur]}\r\n            |else:\r\n                , und {commanders[cur]} \r\n                in einem Schif vom Typ {event.ships[cur]} \r\n                mit einem Kampfrang von {event.ratings[cur]}.\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}\r\n\r\n{_\r\n- commanders  The names of the commanders who killed you\r\n- ships       The ships the commanders who killed you were flying\r\n- ratings     The ratings of the commanders who killed you\r\n_}\r\n",
      "name": "Died",
      "description": "Triggered when you have died",
      "default": false,
      "defaultValue": "{if len(event.ships) > 0:\r\n\r\n    {set commanders to []}\r\n    {for cmdr in event.commanders:\r\n        {if find(cmdr, \"$ShipName\") >= 0:\r\n           {_ Ignore NPC ships _}        \r\n        |else: \r\n           {set commanders to cat(commanders, [cmdr])}\r\n        }\r\n    }\r\n\r\n    {ShipName()} was\r\n    {Occasionally(2, \"just\")}\r\n    {OneOf(\"blown away\", \"terminated\", \"destroyed\")}\r\n\r\n    {if len(commanders) = 1:\r\n        by {commanders[0]} \r\n        in a {event.ships[0]} \r\n        and with a combat ranking of {event.ratings[0]}.\r\n    |elif len(commanders) = 2:\r\n        by {commanders[0]} \r\n        in a {event.ships[0]} and with a \r\n        combat ranking of {event.ratings[0]}, \r\n        and by {commanders[1]} \r\n        in a {event.ships[1]} and with a \r\n        combat ranking of {event.ratings[1]}.\r\n    |elif len(commanders) > 2:\r\n        {set cur to 0}\r\n        by\r\n        {while cur < len(commanders):\r\n            {if cur = 0:\r\n                {commanders[cur]} \r\n                in a {event.ships[cur]} \r\n                and with a combat ranking of {event.ratings[cur]}\r\n            |elif cur < len(commanders) - 1:\r\n                , {commanders[cur]} \r\n                in a {event.ships[cur]} \r\n                and with a combat ranking of {event.ratings[cur]}\r\n            |else:\r\n                , and {commanders[cur]} \r\n                in a {event.ships[cur]} \r\n                and with a combat ranking of {event.ratings[cur]}.\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}"
    },
    "Discovery scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Discovery scan\")}\r\n\r\n{_ Context _}\r\n\r\n{_ Preferences _}\r\n{F(\"A_Einstellungen\")}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {Pause(500)}\r\n    \t{ if state.discovery_scan = 1 : {F(\"DiscoveryScan2\")}\r\n    \t|elif state.discovery_scan = 2 : {F(\"DiscoveryScan wie bisher\")} \r\n    \t|else: kein Scan gewünscht!\r\n    \t}\r\n}",
      "name": "Discovery scan",
      "description": "Triggered when performing a full system scan (honk)",
      "default": false,
      "defaultValue": "{_ Fetch from Context, if a context is set _}\r\n{if state.eddi_context_system_name:\r\n    {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    {if ship.Role.edname = \"Exploration\" || \r\n        (ship.Role.edname = \"Multipurpose\" && len(reportSystem.factions) = 0):\r\n\r\n        {if reportSystem:\r\n        \t{set reportedBodies to len(reportSystem.bodies)}\r\n            {if 0 < reportedBodies && reportedBodies < event.totalbodies:\r\n                {Pause(1000)}\r\n\r\n                {set scannedBodies to 0}\r\n                {for body in reportSystem.bodies:\r\n                    {if body.scanned:\r\n                        {set scannedBodies to scannedBodies + 1}\r\n                    }\r\n                }\r\n                {set bodiesToScan to (event.totalbodies- scannedBodies)}\r\n\r\n                {if bodiesToScan = 1:\r\n                \tOne body remains to be scanned\r\n                |elif scannedBodies < event.totalbodies:\r\n                    {OneOf(\r\n                        \"{scannedBodies} out of {event.totalbodies} bodies {if scannedBodies != 1: have been scanned |else: has been scanned}\", \r\n                        \"{bodiesToScan} bodies remain to be scanned\"\r\n                    )}\r\n                    {Occasionally(3, OneOf(\"here\", \"in this system\"))}.\r\n                }\r\n            |else:\r\n                {set bodiesToMap to F(\"Bodies to map\")}\r\n                {if bodiesToMap:\r\n                    {bodiesToMap}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "DiscoveryScan wie bisher": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Discovery scan wie bisher / Honk\")}\r\n\r\n{_ Fetch from Context _}\r\n{_ len(SystemDetails(state.eddi_context_system_name).bodies.alreadydiscovered) - ansagen lassen von ... _}\r\n{_ set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n\r\n{set reportSystem to SystemDetails(system.name)}\r\n{set reportbody to reportSystem.bodies}\r\n\r\n{SetState('system_alreadymapped', 0)}\r\n{SetState('system_body_stern', 0)}\r\n{SetState('system_bodiestoscan', 0)}\r\n{SetState('system_honk', false)}\r\n\r\n{if reportSystem:\r\n\t{set scannedBodies to 0} \r\n    {set alreadydiscovered to 0}\r\n    {set alreadymapped to 0}\r\n    {set body_stern to 0}\r\n        \r\n    {for body in reportSystem.bodies :\r\n\t\t{if body.alreadymapped: {set alreadymapped to alreadymapped + 1}}\r\n        {if body.alreadydiscovered: {set alreadydiscovered to alreadydiscovered + 1}}\r\n        {if body.scanned: {set scannedBodies to scannedBodies + 1}}\r\n        {if body.bodytype = \"Stern\": {set body_stern to body_stern + 1}\r\n\t\t\t{if body.mainstar && body.alreadydiscovered && !body.scanned : {set system_entdeckt to 0}\r\n           \t|elif body.mainstar && body.alreadydiscovered && body.scanned : {set system_entdeckt to 1}\r\n           \t}\r\n        }\t\r\n\t}\r\n\t{set bodiesToScan to (system.totalbodies - scannedBodies)}\r\n        \r\n\t{SetState('system_alreadymapped', alreadymapped)}\r\n\t{SetState('system_body_stern', body_stern)}\r\n\t{SetState('system_bodiestoscan', bodiesToScan)}\r\n}\r\n\r\n{if system.totalbodies > 1 && event.nonbodies > 0 : Es wurden {system.totalbodies} \r\n\tstellare und planetare Objekte im System entdeckt. Darüber hinaus  \r\n\t{if event.nonbodies = 1 : wurde noch eine weitere Signalquelle \r\n\t|else: wurden {event.nonbodies} weitere Signalquellen\r\n\t} geortet.\r\n|elif system.totalbodies > 1 : Es wurden {system.totalbodies} \r\n\tstellare und planetare Objekte im System entdeckt.\r\n|elif event.nonbodies > 0\t : Unsere Scanner haben\r\n\t{if event.nonbodies = 1 : eine weitere Signalquelle \r\n\t|else: {event.nonbodies}  weitere Signalquellen\r\n\t} in diesem System entdeckt.\r\n}\r\n\r\n{Pause(1000)}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\t\t\r\n\t{if system.totalbodies - alreadydiscovered = 0 : Es sind alle Körper im System bekannt.\r\n\t|elif system.totalbodies - alreadydiscovered = 1 : Es kann noch ein Körper im System entdeckt werden.\r\n\t|else: Es können noch {system.totalbodies - alreadydiscovered} Körper im System entdeckt werden.\r\n\t}     \r\n        \r\n\t{if system_entdeckt = 1:\r\n    \t{if bodiesToScan = 0 :\r\n\t\t|elif bodiesToScan = 1 : Wir können noch ein Körper im System scannen.\r\n\t\t|else: Wir können noch {bodiesToScan} Körper scannen.\r\n\t\t}\r\n\t}\r\n        \r\n\t{set bodiesToMap to F(\"Bodies to map\")}\r\n\t{if bodiesToMap: {bodiesToMap}}\r\n}\r\n\r\n{SetState('system_honk', true)}\r\n\r\n{_\r\n- totalbodies - the total number of discoverable bodies within the system\r\n- nonbodies - The number of non-body signals \r\n_}",
      "name": "DiscoveryScan wie bisher",
      "description": "Triggered when performing a full system scan (honk)",
      "default": false,
      "defaultValue": null
    },
    "DiscoveryScan2 - geht z.Z. nicht ! v3.7.2-b1": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Discovery scan von Darkcyde\")}\r\n\r\n{_ Context _}\r\n{SetState('eddi_context_discovery_done', true)}\r\n{SetState('eddi_context_autoscantime', SecondsSince(0))}\r\n\r\n{_ Fetch from Context, if a context is set _}\r\n{if state.eddi_context_system_name: {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else: {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\": Welches System ist gemeint?\r\n|else: \r\n\t{if ship.Role.edname = \"Exploration\" || (ship.Role.edname = \"Multipurpose\" && len(reportSystem.factions) = 0):\r\n\r\n    \t{if reportSystem:\r\n    \t\t{set reportedBodies to len(reportSystem.bodies)}\r\n    \t\t{if 0 < reportedBodies && reportedBodies < event.totalbodies:\r\n       \t\t\t{Pause(1000)}\r\n        \r\n        \t\t{set scannedBodies to 0}\r\n        \t\t{for body in reportSystem.bodies:\r\n            \t\t{if body.scanned: {set scannedBodies to scannedBodies + 1}\r\n            \t\t}\r\n        \t\t}\r\n        \t\t{set bodiesToScan to (event.totalbodies - scannedBodies)}\r\n\r\n        \t\t{if bodiesToScan = 1: Ein Körper muss noch gescannt werden\r\n        \t\t|elif scannedBodies < event.totalbodies:\r\n            \t\t{OneOf(\"{scannedBodies} von insgesamt {event.totalbodies} Körper {if scannedBodies != 1 : wurden gescannt |else: wurde gescannt}\",\r\n                    \"{bodiesToScan} Körpper müssen noch gescannt werden\"     \r\n            \t\t)}\r\n            \t\t{Occasionally(3, OneOf(\"hier\", \"in diesem System\"))}.\r\n            \t}\r\n\t\t\t|else:\r\n\t\t\t\t{set bodiesToMap to F(\"Bodies to map\")}\r\n\t\t\t\t{if bodiesToMap: {bodiesToMap}\r\n        \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n{_\r\n- totalbodies the total number of discoverable bodies within the system\r\n- nonbodies The number of non-body signals\r\n_}",
      "name": "DiscoveryScan2 - geht z.Z. nicht ! v3.7.2-b1",
      "description": "Triggered when performing a full system scan (honk)",
      "default": false,
      "defaultValue": null
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Docked\")}\r\n\r\n{SetState(\"ship_model\", ship.model)}\r\n{SetState(\"ship_name\", ship.name)}\r\n{SetState(\"ship_ident\", ship.ident)}\r\n\r\n{Pause(1000)}\r\n\r\n{set stationstyp to station.model}\r\n{SetState(\"typ_station\",station.model)}\r\n\r\n{  if stationstyp = \"Außenposten\"\t\t\t\t\t\t: {SetState(\"außenposten\",true)}\r\n|elif stationstyp = \"Planetarer Außenposten\"\t\t\t: {SetState(\"planetarer_außenposten\",true)}\r\n|elif stationstyp = \"Orbis Sternenhafen\"\t\t\t\t: {SetState(\"orbis_sternenhafen\",true)}\r\n|elif stationstyp = \"Coriolis Sternenhafen\"\t\t\t\t: {SetState(\"coriolis_sternenhafen\",true)}\r\n|elif stationstyp = \"Ocellus Sternenhafen\"\t\t\t\t: {SetState(\"ocellus_sternenhafen\",true)}\r\n|elif stationstyp = \"Bernal Sternenhafen\"\t\t\t\t: {SetState(\"bernal_sternenhafen\",true)}\r\n|elif stationstyp = \"Asteroidenbasis\"\t\t\t\t\t: {SetState(\"asteroidenbasis\",true)}\r\n|elif stationstyp = \"Raumhafen\"\t\t\t\t\t\t\t: {SetState(\"raumhafen\",true)}\r\n|elif stationstyp = \"Bodenstation\"\t\t\t\t\t\t: {SetState(\"bodenstation\",true)}\r\n|elif stationstyp = \"Carrier\"\t\t\t\t\t\t\t: {SetState(\"fleetcarrier\",true)}\r\n|elif stationstyp = \"Wissenschaftlicher Außenposten\"\t: {SetState(\"wissensch_außenposten\")}\r\n|elif stationstyp = \"Ziviles Megaschiff\"\t\t\t\t: {SetState(\"ziviles_megaschiff\")}\r\n|elif stationstyp = \"Unbekannte Station\"\t\t\t\t: {SetState(\"unbekannte_station\")}\r\n|elif stationstyp = \"Megaschiff\"\t\t\t\t\t\t: {SetState(\"megaschiff\")}\r\n|else:\r\n}\r\n{_ Test für VA, in welcher Station bin ich gerade _}\r\n\r\n{OneOf(\"Schiff\", (ship.name),)} angedockt.,\r\n\r\n{if event.state = \"Damaged\": Achtung Notfall!}\r\n{if event.activefine || event.wanted: Achtung! Status {Emphasize('gesucht!,', 'strong')}, \r\n\toder, {OneOf(\"Wir haben ein Kopfgeld!\", \"Auf unseren Kopf ist eine Belohnung ausgesetzt!\")}\r\n}\r\n\r\n{if event.cockpitbreached: Reparatur der Kabine wird dringend empfohlen!}\r\n\r\n{_\r\n- station           The station at which the commander has docked\r\n- marketId          The market ID of station at which the commander has docked\r\n- system            The system at which the commander has docked\r\n- state             The special state of the station, if applicable \r\n\t\t\t\t\t(\"Damaged\" for damaged stations for example)\r\n- model             The model of the station at which the commander has docked (Orbis, Coriolis, etc)\r\n- allegiance        The superpower allegiance of the station at which the commander has docked\r\n- faction           The faction controlling the station at which the commander has docked\r\n- factionstate      The state of the faction controlling the station at which the commander has docked\r\n- economy           The economy of the station at which the commander has docked\r\n- secondeconomy     The secondary economy of the station at which the commander has docked\r\n- government        The government of the station at which the commander has docked\r\n- security          The security of the station at which the commander has docked\r\n- distancefromstar  The distance of this station from the star (light seconds)\r\n- stationservices   A list of possible station services: Dock, Autodock, BlackMarket, Commodities, Contacts,\r\n\t\t\t\t\tExploration, Initiatives, Missions, Outfitting, CrewLounge, Rearm, Refuel, Repair, Shipyard, Tuning, Workshop, MissionsGenerated, Facilitator, Research, FlightController, StationOperations, OnDockMission, Powerplay, SearchAndRescue, TechBroker, MaterialTrader\r\n- cockpitbreach    True if landing with a breached cockpit\r\n- wanted           True if landing at a station where you are wanted\r\n- activefine       True if landing at a station where you have active fines\r\n_}",
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost",
      "default": false,
      "defaultValue": "{if event.state = \"Damaged\": Emergency}\r\nDocking complete.\r\n\r\n{if event.activefine || event.wanted:\r\n    Anonymous protocols are in effect.\r\n}\r\n\r\n{if event.cockpitbreached:\r\n    Canopy repair highly recommended.\r\n}"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Docking cancelled\")}\r\n\r\nAndockvorgang abgebrochen.\r\n\r\n{_\r\n- station            The station at which the commander has cancelled docking\r\n- stationtype        The localized model / type of the station at which the commander has cancelled docking\r\n- stationDefinition  The model / type of the station at which the commander has cancelled docking (this is an object)\r\n_}",
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost",
      "default": false,
      "defaultValue": "Docking request cancelled."
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Docking denied\")}\r\n\r\n{SetState('docking_granted', 0)}\r\n\r\n{if event.stationtype = \"Coriolis Sternenhafen\" ||\r\n    event.stationtype = \"Orbis Sternenhafen\"    ||\r\n    event.stationtype = \"Ocellus Sternenhafen\"  ||\r\n    event.stationtype = \"Asteroidenbasis\":\r\n    {Pause(6000)}\r\n|else:\r\n    {Pause(2000)}\r\n}\r\n\r\n{if event.station: {(event.station)} hat die Andockerlaubnis\r\n|else            : Die Andockerlaubnis wurde\r\n}\r\n\r\n{if event.reason = \"Distance\":\r\n    wegen zu großer Entfernung verweigert. Schließen sie auf mindestens siebeneinhalb Kilometer auf, {F(\"Honorific\")}.\r\n|elif event.reason = \"NoSpace\":\r\n    auf Grund Platzmangels verweigert. Alle Lande Pads sind belegt, {F(\"Honorific\")}.\r\n|elif event.reason = \"TooLarge\":\r\n    verweigert. Es ist kein Lande Pad in iherer Schiffsklasse verhanden. Unser Schiff ist zu groß, {F(\"Honorific\")}.\r\n|elif event.reason = \"Hostile\":\r\n    verweigert. Feindlichen Schiffen wird keine Landeerlaubnis gewährt, {F(\"Honorific\")}.\r\n|elif event.reason = \"Offences\":\r\n    verweigert. Straf Tätern wird keine Landeerlaubnis gewährt, {F(\"Honorific\")}.\r\n|elif event.reason = \"ActiveFighter\":\r\n    wegen anhaltener Kampfhandlungen verweigert, {F(\"Honorific\")}.\r\n|elif event.reason = \"NoReason\":\r\n    ohne erkennbaren Grund verweigert,  {F(\"Honorific\")}.\r\n}\r\n\r\n{_\r\n- station           The station at which the commander has been denied docking\r\n- stationtype       The localized model / type of the station at which the commander has been denied docking\r\n- stationDefinition The model / type of the station at which the commander has been denied docking (this is an object)\r\n- reason            The reason why commander has been denied docking (too far, fighter deployed etc)\r\n_}",
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost",
      "default": false,
      "defaultValue": "{Pause(2000)}\r\n\r\nWe have been denied docking\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n    because our fighter is deployed\r\n|elif event.reason = \"Distance\":\r\n    because we are too far from the station\r\n|elif event.reason = \"Hostile\":\r\n    because the station's controlling faction doesn't like us\r\n|elif event.reason = \"NoSpace\":\r\n    because there is no space available\r\n|elif event.reason = \"Offences\":\r\n    because we have recently committed an offence against them\r\n|elif event.reason = \"TooLarge\":\r\n    because there are no landing pads that can accomodate the size of our ship\r\n}."
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Docking granted\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_station_model', event.stationtype)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n{SetState('eddi_docking_granted', true)}\r\n\r\n{SetState(\"landingcomputer_on\", false)}                    {_ setze Variable für LC an Bord _}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.name = \"Standard-Landecomputer\":\r\n        {if compartment.module.enabled:\r\n            {SetState(\"landingcomputer_on\", true)}\r\n     |elif compartment.module.name = \"Fortschrittlicher Landecomputer\":\r\n\t\t{if compartment.module.enabled:\r\n            {SetState(\"landingcomputer_on\", true)}\r\n        }\r\n        }\r\n    }\r\n}\r\n\r\n{if !state.landingcomputer_on:                             {_ Zeile löschen, wenn Abfrage nicht gewünscht _}\r\n\t{if event.stationtype = \"Coriolis\"\t\t\t\t\t\t\t|| event.stationtype = \"Orbis\"\t\t\t\t|| \r\n    \tevent.stationtype = \"Bernal\"\t\t\t\t\t\t\t|| event.stationtype = \"Asteroidenbasis\"\t||\r\n    \tevent.stationtype = \"Ocellus\"\t\t\t\t\t\t\t|| event.stationtype = \"Bodenstation\"\t\t||\r\n    \tevent.stationtype = \"Planetarer Außenposten\"\t\t\t|| event.stationtype = \"Raumhafen\"\t\t\t||\r\n    \tevent.stationtype = \"Wissenschaftlicher Außenposten\"\t|| event.stationtype = \"Carrier\" :\r\n    \t{Pause(7000)}\r\n\t|else:\r\n    \t{Pause(3000)}\r\n\t}\r\n\t{F(\"Landing pad report\")}\r\n}                                                          {_ Zeile löschen, wenn Abfrage nicht gewünscht _}\r\n\r\n{_\r\n- station           The station at which the commander has been granted docking\r\n- stationtype       The localized model / type of the station at which the commander has been granted docking\r\n- stationDefinition The model / type of the station at which the commander has been granted docking \r\n\t\t\t\t\t(this is an object)\r\n- landingpad        The landing pad at which the commander has been granted docking\r\n_}\r\n",
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_station_model', event.stationtype)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{if event.stationDefinition.basename = \"Coriolis\" || \r\n    event.stationDefinition.basename = \"Orbis\" || \r\n    event.stationDefinition.basename = \"Bernal\" || \r\n    event.stationDefinition.basename = \"Ocellus\" || \r\n    event.stationDefinition.basename = \"AsteroidBase\":\r\n    {Pause(8000)}\r\n    {F(\"Landing pad report\")}\r\n|else:\r\n    {Pause(8000)}\r\n    Landing pad {event.landingpad}\r\n    {OneOf('ready', 'assigned', 'allocated')}\r\n    {Occasionally(4, cat(', ', F('Honorific') ))}.\r\n}"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Docking requested\")}\r\n\r\n{OneOf(\"Andockerlaubnis erbeeten\",\r\n       \"Kontaktiere Station\",\r\n       \"Kontaktiere Stationspersonal\",\r\n       \"öffne Kanal\",\r\n       \"öffne Kanal zur Station\", \r\n       \"Anfrage ist raus\",\r\n       \"Aye {F('Honorific')}\")}\r\n       \r\n\r\n{_\r\n- station           The station at which the commander has requested docking\r\n- stationtype       The localized model / type of the station at which the commander has requested docking\r\n- stationDefinition The model / type of the station at which the commander has requested docking \r\n\t\t\t\t\t(this is an object)\r\n_}",
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost",
      "default": false,
      "defaultValue": null
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Docking timed out\")}\r\n\r\n{SetState('docking_granted', 0)}\r\n\r\nDie Andockerlaubnis ist abgelaufen.\r\n\r\n{_\r\n- station             The station at which the docking request has timed out\r\n- stationtype         The localized model / type of the station at which docking has timed out\r\n- stationDefinition   The model / type of the station at which docking has timed out (this is an object)\r\n_}",
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out",
      "default": false,
      "defaultValue": "No response to our docking request."
    },
    "Empire honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\r\n{ if cmdr.empirerating.rank <= 2\t: Kom mahnder\t\t\t\t{_ Commoner }\r\n|elif cmdr.empirerating.rank = 3\t: \r\n\t{if cmdr.gender = \"Male\"\t\t: Meister\r\n    |elif cmdr.gender = \"Female\"\t: Meisterin\r\n    |else\t\t\t\t\t\t\t: Kom mahnder\r\n    }\r\n|elif cmdr.empirerating.rank = 4\t: \t\t\t\t\t\t\t{_ Knappe Junker Gutsherr/ }\r\n\t{if cmdr.gender = \"Male\"\t\t: Gutsherr\r\n    |elif cmdr.gender = \"Female\"\t: Gutsherrin\r\n    |else\t\t\t\t\t\t\t: Kom mahnder\r\n    }\r\n|elif cmdr.empirerating.rank = 5: \t\t\t\t\t\t\t\t{_ Knight / Dame }\r\n    {if cmdr.gender = \"Male\"\t\t: sir \r\n    |elif cmdr.gender = \"Female\"\t: madam\r\n    |else\t\t\t\t\t\t\t: Kom mahnder\r\n    }\r\n|elif cmdr.empirerating.rank <= 11\t:\t\t\t\t\t\t\t{_ Peer / Peeress }\r\n    {if cmdr.gender = \"Male\"\t\t: {OneOf(\"Mein Lord\", \"Eure Lordschaft\")}\r\n    |elif cmdr.gender = \"Female\"\t: {OneOf(\"my lady\", \"your ladyship\")}\r\n    |else\t\t\t\t\t\t\t: Kom mahnder\r\n    }\r\n|elif cmdr.empirerating.rank = 12\t: Euer Gnaden\t\t\t\t{_ your grace}\r\n|elif cmdr.empirerating.rank = 13\t: Eure königliche Hoheit\t{_ your royal highness}\r\n|elif cmdr.empirerating.rank = 14\t: Eure Majestät\t\t\t\t{_ your majesty}\r\n}\r\n",
      "name": "Empire honorific",
      "description": "Function to provide a suitable honorific for your Kom mahnder when in the empire",
      "default": false,
      "defaultValue": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\r\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\r\n   commander\r\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\r\n    {if cmdr.gender = \"Male\": \r\n        sir \r\n    |elif cmdr.gender = \"Female\": \r\n        madam\r\n    |else: \r\n        commander\r\n    }\r\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\r\n    {if cmdr.gender = \"Male\": \r\n        {OneOf(\"my lord\", \"your lordship\")}\r\n    |elif cmdr.gender = \"Female\": \r\n        {OneOf(\"my lady\", \"your ladyship\")}\r\n    |else: \r\n        commander\r\n    }\r\n|elif cmdr.empirerating.rank = 12:\r\n    your grace\r\n|elif cmdr.empirerating.rank = 13:\r\n    your royal highness\r\n|elif cmdr.empirerating.rank = 14:\r\n    your majesty\r\n}\r\n"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Empire promotion\")}\r\n\r\nGratulation {F(\"Empire honorific\")}, die Imperiale Flotte hat Sie\r\n{Occasionally(2, OneOf(\"innerhalb der kaiserlichen Marine\", \"für Ihren Dienst im Empire\"))} in den Rank\r\n{when(cmdr.gender = \"Female\", event.femininerank, event.rank)}\r\nbefördert.\r\n\r\n{if event.rating = 1:\r\n    {OneOf(\"Sie dürfen sich jetzt die imperiale Eagle kaufen.\", \"Dem Kauf der imperialen Eagle steht jetzt nichts mehr im Wege.\")}\r\n|elif event.rating = 3:\r\n    {OneOf(\"Sie dürfen sich jetzt den imperialen Courier kaufen.\", \"Dem Kauf des imperialen Courier steht jetzt nichts mehr im Wege.\")}\r\n|elif event.rating = 4:\r\n    Dies gewährt Ihnen die Ehre, das {P(\"Achenar\")} System zu betreten.\r\n|elif event.rating = 7:\r\n    Dies ermöglicht Ihnen den Kauf des imperialen Clipper, und die Ehre, das {P(\"Summer-Land\")} System betreten zu dürfen. \r\n|elif event.rating = 10:\r\n\tDies gewährt Ihnen die Ehre, das {P(\"Facece\")} System zu betreten.\r\n|elif event.rating = 12:\r\n    {OneOf(\"Sie dürfen sich jetzt die imperiale Cutter kaufen.\", \"Dem Kauf der imperialen Cutter steht jetzt nichts mehr im Wege.\")}\r\n|elif event.rating = 14:\r\n\tDies ist der höchste Rang, der einem Mitglied der Kaiserlichen Marine zur Verfügung steht.\r\n}\r\n\r\n{_\r\n- rank         The commander's new Empire rank\r\n- femininerank The feminine form of the commander's new Empire rank\r\n- rating       The commander's new Federation rank level / rating (as an integer)\r\n_}\r\n",
      "name": "Empire promotion",
      "description": "Triggered when your rank increases with the Empire",
      "default": false,
      "defaultValue": "Congratulations {F(\"Empire honorific\")},\r\nthe Imperial Navy has \r\n{OneOf(\"granted you a promotion\", \"promoted you\", \"advanced you\", \"named you\")}\r\nto the rank of\r\n{when(cmdr.gender = \"Female\", event.femininerank, event.rank)}\r\n{Occasionally(2, OneOf(\"within the Imperial Navy\", \"for your service to the Empire\"))}.\r\n\r\n{if event.rating = 1:\r\n    You may now purchase the Imperial Eagle.\r\n|elif event.rating = 3:\r\n    You may now purchase the Imperial Courier.\r\n|elif event.rating = 4:\r\n    This grants you the honour of entering the {P(\"Achenar\", \"starsystem\")} system.\r\n|elif event.rating = 7:\r\n    This allows you to purchase the Imperial Clipper, and the honour of entering the {P(\"Summerland\", \"starsystem\")} system.\r\n|elif event.rating = 10:\r\n    This grants you the honour of entering the {P(\"Facece\", \"starsystem\")} system\r\n|elif event.rating = 12:\r\n    You may now purchase the Imperial Cutter.\r\n|elif event.rating = 14:\r\n    This is the highest {OneOf(\"rank\", \"honor\")} available to a member of the Imperial Naval Reserve.\r\n}\r\n"
    },
    "Engineer contributed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Engineer contributed\")}\r\n\r\n{event.engineer} dankt Ihnen für {OneOf(\"das Beisteuern\", \"die Übergabe\", \"das Besorgen\", \"das Übergeben\")} von\r\n{if event.contributiontype = \"Commodity\":\r\n   {event.amount} tonne{if event.amount != 1:n} \r\n|elif event.contributiontype = \"Material\":\r\n   {if material.category = 'Data':\r\n       {event.amount} {OneOf(\"Einheit\", \"Probe\", \"Datensatz\")}{if event.amount != 1:s}\r\n   |else:\r\n       {event.amount} {OneOf(\"Einheit\", \"Probe\", \"Fragment\", \"Muster\")}{if event.amount != 1:s}\r\n   }\r\n}\r\n{set translate to event.contribution} {F(\"Translate Commodity\")}.\r\n\r\n{_\r\n- engineer         The name of the engineer with whom you have progressed\r\n- contributiontype The type of contribution (Commodity, Material)\r\n- contribution     The resource contributed\r\n- category         The category of the resource contributed\r\n- amount           The amount contributed\r\n- total            The current total contribution made to that engineer\r\n_}",
      "name": "Engineer contributed",
      "description": "Triggered when contributing resources to an engineer in exchange for access",
      "default": false,
      "defaultValue": "{event.engineer} \r\nthanks you for contributing\r\n{if event.contributiontype = \"Commodity\":\r\n   {event.amount} tonne{if event.amount != 1:s} \r\n|elif event.contributiontype = \"Material\":\r\n   {if material.category = 'Data':\r\n       {event.amount} {OneOf(\"unit\", \"sample\", \"record\")}{if event.amount != 1:s}\r\n   |else:\r\n       {event.amount} {OneOf(\"unit\", \"sample\", \"fragment\")}{if event.amount != 1:s}\r\n   }\r\n}\r\nof {event.contribution}."
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Engineer progressed\")}\r\n\r\n{if event.progresstype = \"Stage\":\r\n    {if event.stage = \"Known\":\r\n        Der Ingenieur {event.engineer} hat uns eine Nachricht geschickt.\r\n    |elif event.stage = \"Invited\":\r\n        Wir haben eine Einladung vom Ingenieur {event.engineer} erhalten.\r\n    |elif event.stage = \"Unlocked\":\r\n       Der Ingenieur {event.engineer} hat uns Zutritt zu seiner Werkstatt gegeben.\r\n    |elif event.stage = \"Barred\":\r\n        Der Ingenieur {event.engineer} hat unseren Zugang zu seiner Werkstatt \r\n        {OneOf(\"widerrufen\", \"gesperrt\")}.\r\n    }\r\n|elif event.Engineer:\r\n    {event.engineer} hat uns \r\n    {OneOf(\"Zugang zu den Grad {event.rank} Bauplänen\", \r\n    \t\"Informationen zu den Grad {event.rank} Bauplänen\", \r\n    \t\"Einsicht in die Grad {event.rank} Baupläne\")}\r\n    {OneOf(\"gegeben\", \"gewährt\")}.\r\n}\r\n\r\n{_\r\n- engineer     The name of the engineer with whom you have progressed (not written at startup)\r\n- rank         The rank of your relationship with the engineer (not written at startup)\r\n- stage        The current stage of your relations with the engineer (Invited/Known/Unlocked/Barred) \r\n\t\t\t\t(not written at startup)\r\n- progresstype The type of progress that is applicable (Rank/Stage) (not written at startup)\r\n_}",
      "name": "Engineer progressed",
      "description": "Triggered when you reach a new rank with an engineer",
      "default": false,
      "defaultValue": "{if event.progresstype = \"Stage\":\r\n\r\n    {if event.stage = \"Known\":\r\n        The Engineer {event.engineer} has sent you a message.\r\n    |elif event.stage = \"Invited\":\r\n        Workshop invitation received from {event.engineer}.\r\n    |elif event.stage = \"Unlocked\":\r\n        {event.engineer} has granted you access to workshop facilities.\r\n    |elif event.stage = \"Barred\":\r\n        {event.engineer} has {OneOf(\"barred\", \"restricted\")} your access to workshop facilities.\r\n    }\r\n\r\n|elif event.engineer:\r\n\r\n    {event.engineer} has\r\n    {OneOf(\"given\", \"granted\")}\r\n    you access to grade {event.rank} blueprints.\r\n\r\n}"
    },
    "Engineer report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set allEngineerData to [\r\n    \"Alioth\": [\r\n        \"name\": \"Bill Turner\",\r\n        \"location\": \"Turner Metallics Inc\",\r\n        \"specialism\": \"G5 Plasmawaffen, Sensoren und Oberflächenscanner\",\r\n        \"other\": \"G3 Lebenserhaltung und verschiedene andere Scanner\"\r\n    ],\r\n    \"Achenar\": [\r\n        \"name\": \"Tiana Fortune\",\r\n        \"location\": \"Fortune's Loss\",\r\n        \"specialism\": \"G5 Scanner und Drohnen-Controller\",\r\n        \"other\": \"G3 FSA Unterbrecher und Oberflächenscanner\"\r\n    ],\r\n    \"Arque\": [\r\n        \"name\": \"Professor Palin\",\r\n        \"location\": \"Abel Laboratory\",\r\n        \"specialism\": \"G5 Schubdüsen\",\r\n        \"other\": \"G3 Frame Shift Antriebe\"\r\n    ],\r\n    \"Asura\": [\r\n        \"name\": \"Petra Olmanova\",\r\n        \"location\": \"Sanctuary\",\r\n        \"specialism\": \"G5 Hüllenverstärkung und Panzerung, G4 Raketen, Torpedos und Gegenmaßnahmen\"\r\n    ],\r\n    \"Beta-3 Tucani\": [\r\n        \"name\": \"The Sarge\",\r\n        \"location\": \"The Beach\",\r\n        \"specialism\": \"G5 Kanonen und Drohnen-Controller\",\r\n        \"other\": \"G3 Rail Gun\"\r\n    ],\r\n    \"Deciat\": [\r\n        \"name\": \"Felicity Farseer\",\r\n        \"location\": \"Farseer Inc\",\r\n        \"specialism\": \"G5 Frame Shift Antriebe und G3 Schubdüsen, Sensoren und Oberflächenscanner\",\r\n        \"other\": \"G1 Schildverstärker, FSA Unterbrecher und Kraftwerke\"\r\n    ],\r\n    \"Eurybia\": [\r\n        \"name\": \"Liz Ryder\",\r\n        \"location\": \"Demolition unlimited\",\r\n        \"specialism\": \"G5 Raketen und Torpedos\",\r\n        \"other\": \"G3 Minenwerfer and G1 Hüllenverstärkung und Panzerung\"\r\n    ]\r\n    \"Giryak\": [\r\n        \"name\": \"Juri Ishmaak\",\r\n        \"location\": \"Pater's Memorial\",\r\n        \"specialism\": \"G5 Minenwerfer\",\r\n        \"other\": \"G3 Raketen, Torpedos und Scanner\"\r\n    ],\r\n    \"Khun\": [\r\n        \"name\": \"Elvira Martuuk\",\r\n        \"location\": \"Long sight base\",\r\n        \"specialism\": \"G5 Frame Shift Antriebe und G3 Schildgeneratoren\"\r\n        \"other\": \"G2 Schubdüsen and G1 Schildzellenbänke\"\r\n    ],\r\n    \"Kuk\": [\r\n        \"name\": \"Selene Jean\",\r\n        \"location\": \"Prospector's Rest\",\r\n        \"specialism\": \"G5 Panzerung und Hüllenverstärkung\"\r\n    ],\r\n    \"Kuwemaki\": [\r\n        \"name\": \"Hera Tani\",\r\n        \"location\": \"The Jet's Hole\",\r\n        \"specialism\": \"G5 Kraftwerke und erweiterte Oberflächenscanner\",\r\n        \"other\": \"G3 Sensoren und Energieverteiler\"\r\n    ],\r\n    \"Laksak\": [\r\n        \"name\": \"Lei Cheung\",\r\n        \"location\": \"Trader's Rest\",\r\n        \"specialism\": \"G5 Schilde, Sensoren und Oberflächenscanner\",\r\n        \"other\": \"G3 Schildverstärker\"\r\n    ],\r\n    \"Leesti\": [\r\n        \"name\": \"Didi Vatermann\",\r\n        \"location\": \"Vatermann LLC\",\r\n        \"specialism\": \"G5 Schildverstärker\",\r\n        \"other\": \"G3 Schildgeneratoren\"\r\n    ],\r\n    \"Los\": [\r\n        \"name\": \"Etienne Dorn\",\r\n        \"location\": \"Kraken's Retreat\",\r\n        \"specialism\": \"G5 Sensoren, Lebenserhaltung und Kraftwerke\",\r\n        \"other\" : \"G4 Plasma Beschleuniger, Scanner und Rail Guns\"\r\n    ],\r\n    \"Luchtaine\": [\r\n        \"name\": \"Mel Brandon\",\r\n        \"location\": \"The Brig\",\r\n        \"specialism\": \"G5 Frame Shift Antriebe, Schubdüsen, Schilde, Schildverstärker und Laser\",\r\n        \"other\": \"G5 FSA Unterbrecher und G4 Schildzellenbänke\"\r\n    ],\r\n    \"Meene\": [\r\n        \"name\": \"Ram Tah\",\r\n        \"location\": \"Phoenix Base\",\r\n        \"specialism\": \"G5 Gegenmaßnahmen\",\r\n        \"other\": \"G4 und G3 Drohnen-Controller\"\r\n    ],\r\n    \"Muang\": [\r\n        \"name\": \"Broo Tarquin\",\r\n        \"location\": \"Broo's Legacy\",\r\n        \"specialism\": \"G5 Salven-, Puls- und Strahlenlaser\"\r\n    ],\r\n    \"Shinrarta Dezhra\": [\r\n        \"name\": \"Lori Jameson\",\r\n        \"location\": \"Jameson Base\",\r\n        \"specialism\": \"G5 Sensoren und Oberflächenscanner und G3 Schildzellenbänke\",\r\n        \"other\": \"verschiedene andere G3 Scanner\"\r\n    ],\r\n    \"Sirius\": [\r\n        \"name\": \"Marco Qwent\",\r\n        \"location\": \"Qwent Research Base\",\r\n        \"specialism\": \"nothing\",\r\n        \"other\": \"G4 Kraftwerke und G3 Energieverteiler\"\r\n    ],\r\n    \"Shenve\": [\r\n        \"name\": \"Chloe Sedesi\",\r\n        \"location\": \"Cinder Dock\",\r\n        \"specialism\": \"G5 Schubdüsen und G3 Frame Shift Antriebe\"\r\n    ],\r\n    \"Sol\": [\r\n        \"name\": \"Colonel Bris Dekker\",\r\n        \"location\": \"Dekker's Yard\",\r\n        \"specialism\": \"G4 FSA Unterbrecher und G3 Frame Shift Antriebe\",\r\n    ],\r\n    \"Tir\": [\r\n        \"name\": \"Marsha Hicks\",\r\n        \"location\": \"The Watchtower\",\r\n        \"specialism\": \"G5 Drohnen-Controller und Mehrfachgeschütze\",\r\n        \"other\": \"G4 Kanonen\"\r\n    ],\r\n    \"Wolf 397\": [\r\n        \"name\": \"Tod 'The Blaster' McQuinn\",\r\n        \"location\": \"Trophy camp\",\r\n        \"specialism\": \"G5 Mehrfachgeschütze und Rail Guns\",\r\n        \"other\": \"G3 Spritter-Kanone und G2 Kanonen\"\r\n    ],\r\n    \"Wyrd\": [\r\n        \"name\": \"The Dweller\",\r\n        \"location\": \"Black hide\",\r\n        \"specialism\": \"G5 Energieverteiler und G4 Puls-Laser\",\r\n        \"other\": \"G3 Salven- und Strahlenlaser\"\r\n    ],\r\n    \"Yoru\": [\r\n        \"name\": \"Zacariah Nemo\",\r\n        \"location\": \"Nemo Cyber Party Base\",\r\n        \"specialism\": \"G5 Splitter-Kanonen\",\r\n        \"other\": \"G3 Mehrfachgeschütze und G2 Plasma Beschleuniger\"\r\n    ]\r\n]}\r\n\r\n{ set maleNames to [ \"Bill\", \"Broo\", \"Etienne\", \"Juri\", \"Lei\", \"Marco\",\r\n    \"Mel\", \"Ram\", \"Tod\", \"Zacariah\" ]}\r\n{ set femaleNames to [ \"Chloe\", \"Didi\", \"Elvira\", \"Felicity\", \"Hera\",\r\n    \"Liz\", \"Lori\", \"Marsha\", \"Petra\", \"Selene\", \"Tiana\" ]}\r\n\r\n{set engineerData to allEngineerData[reportsystem.name] }\r\n{if engineerData:\r\n    In diesem System befindet sich die Werkstatt von {P(engineerData.name)},\r\n    spezialisiert auf {P(engineerData.specialism)}.\r\n    {if engineerData.other:\r\n        und ebenfalls auf, {P(engineerData.other)}.\r\n    }\r\n    {if engineerData.location:\r\n        Du kannst\r\n        {if find(maleNames, token(engineerData.name, \" \", 0)) >= 0 : ihn\r\n        |elif find(femaleNames, token(engineerData.name, \" \", 0)) >= 0 : sie\r\n        |else : sie\r\n        }\r\n        auf {P(engineerData.location)} finden .\r\n    }\r\n}\r\n\r\n\r\n",
      "name": "Engineer report",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Sie betreten jetzt die Nahkampfzone.",
      "name": "Entered CQC",
      "description": "Triggered when you enter CQC",
      "default": false,
      "defaultValue": "Entering close-quarters combat."
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Entered normal space\")}\r\n\r\n{_ Entered normal space }\r\n{_ Triggered when your ship enters normal space }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{SetState('station_model_normalspace', 'no station')}\r\n\r\n{set station_notifications to:\r\n    {set station_missions to F(\"Mission check station\")}\r\n    {set station_crimes to F(\"Crime check station\")}\r\n    {if station_missions || station_crimes:\r\n        {_ Pause for station ATC before speaking again _}\r\n        {Pause(5000)}\r\n        Information:\r\n        {if station_missions:\r\n            {Pause(500)}\r\n            {station_missions}\r\n        }\r\n        {if station_crimes:\r\n            {Pause(500)}\r\n            {station_crimes}\r\n        }\r\n    }\r\n}\r\n\r\n{Pause(500)}\r\n{set reportBody to BodyDetails(event.bodyname, event.systemname)}\r\n\r\n{OneOf(\"\\{OneOf(\\\"{ShipName()} hat\\\",\\\"Wir haben\\\")\\} den supercruise verlassen,\", \r\n\t\t\"\\{OneOf(\\\"{ShipName()} ist\\\",\\\"Wir sind\\\")\\} in den Normalraum eingetreten,\")}\r\n\r\n{if event.bodytype = 'Planet' || event.bodytype = \"Moon\":\r\n    {OneOf(\"nahe\", \"in der Nähe von\")}\r\n    {set time to SecondsSince(0) - state.eddi_context_approach_time}\r\n    {if time < 60 :\r\n        {set settlement to state.eddi_context_last_settlement}\r\n        {set station to StationDetails(settlement, event.systemname)}\r\n        {if station:\r\n            {SetState('eddi_context_body_name', settlement)}\r\n            {P(station.model)}, {P(settlement)}, {station_notifications}\r\n        |else: {P(settlement)}\r\n        }\r\n    |else: {event.bodytype} {reportBody.shortname},\r\n    }\r\n|elif event.bodytype = 'Star' || event.bodytype = 'Stern':\r\n    {OneOf(\"nahe\", \"in der Nähe von\")} Stern {event.body}\r\n|elif event.bodytype = 'Station':\r\n    {set station to StationDetails(event.bodyname, event.systemname)}\r\n    {OneOf(\"nahe\", \"in der Nähe von\")} {P(station.model)}, {event.bodyname}\r\n    {SetState('station_model_normalspace', station.model)}\r\n    {station_notifications}\r\n|elif event.bodytype = 'PlanetaryRing':\r\n    Planetenring {P(token(event.bodyname,\" Ring\",0))}\r\n}.\r\n\r\n{_\r\n- systemname \tThe system at which the commander has entered normal space\r\n- bodyname \t\tThe nearest body to the commander when entering normal space\r\n- bodytype \t\tThe type of the nearest body to the commander when entering normal space\r\n_}\r\n",
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space",
      "default": false,
      "defaultValue": "{_ Entered normal space }\r\n{_ Triggered when your ship enters normal space }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_type', event.bodytype)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{set station_notifications to:\r\n    {set station_missions to F(\"Mission check station\")}\r\n    {set station_crimes to F(\"Crime check station\")}\r\n    {if station_missions || station_crimes:\r\n        {_ Pause for station ATC before speaking again _}\r\n        {Pause(5000)}\r\n        Information:\r\n        {if station_missions:\r\n            {Pause(500)}\r\n            {station_missions}\r\n        }\r\n        {if station_crimes:\r\n            {Pause(500)}\r\n            {station_crimes}\r\n        }\r\n    }\r\n}\r\n\r\n{Pause(500)}\r\n\r\n{OneOf(\"{ShipName()} has\", \"\")} \r\n{OneOf(\"left supercruise\", \"{OneOf(\\\"entered\\\", \\\"returned to\\\", \\\"dropped to\\\")} normal space\")}\r\n\r\n{if event.bodytype = 'Planet':\r\n    {OneOf(\"near\", \"close to\", \"in the vicinity of\")}\r\n    {set time to SecondsSince(0) - state.eddi_context_approach_time}\r\n    {if time < 60:\r\n        {set settlement to state.eddi_context_last_settlement}\r\n        {set station to StationDetails(settlement, event.system)}\r\n        {if station:\r\n            {SetState('eddi_context_body_name', settlement)}\r\n            {if station.Model.invariantName != \"Unknown\":\r\n                {P(station.model, \"station\")},\r\n            } \r\n            {P(settlement, \"station\")}\r\n            {station_notifications}\r\n        |else:\r\n            {P(settlement, \"station\")}\r\n        }\r\n    |else:\r\n        planet {P(event.body, \"body\")}\r\n    }\r\n|elif event.bodytype = 'Star':\r\n    {OneOf(\"near\", \"close to\", \"in the vicinity of\")} star {P(event.body, \"body\")}\r\n|elif event.bodytype = 'Station':\r\n    {set station to StationDetails(event.body, event.system)}\r\n    {OneOf(\"near\", \"close to\", \"in the vicinity of\")}\r\n    {P(station.model, \"station\")}, {P(event.body, \"body\")}\r\n    {station_notifications}\r\n|elif event.bodytype = 'PlanetaryRing':\r\n    Planetary Ring {P(token(event.body,\" Ring\",0), \"body\")}\r\n}."
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Entered signal source\")}\r\n\r\n{Pause(2000)}\r\n\r\n{if event.threat < 2: SignalQuelle erreicht.\r\n|elif event.threat = 2:\r\n\t\t\tVorsicht: SignalQuelle mittlerer Gefahrenstufe.\r\n|elif event.threat = 3:\r\n\t\t\tWarnung: SignalQuelle mit hoher Gefahrenstufe.\r\n|else:\t\tGefahr: SignalQuelle mit sehr hoher Gefahrenstufe.\r\n}\r\n\r\n{_\r\n- source The type of the signal source\r\n- localizedsource The type of the signal source (in your local language)\r\n- threat The threat level of the signal source (0 is lowest)\r\n_}\r\n",
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source",
      "default": false,
      "defaultValue": "{set warninglevel to:\r\n   {set entered to OneOf(\"Entered\", \"Dropped into\", \"Entering\")}\r\n   {if event.threat < 2:\r\n      {entered}\r\n   |elif event.threat = 2:\r\n      Caution: {entered} medium threat\r\n   |elif event.threat = 3:\r\n      Warning: {entered} high-threat\r\n   |elif event.threat = 4:\r\n      Danger: {entered} very high-threat\r\n   |elif event.threat = 5:\r\n      Extreme Danger: {Occasionally(2, entered)} very high-threat\r\n   |elif event.threat = 6:\r\n      Extreme Danger: {Occasionally(2, entered)} extremely high-threat\r\n   |elif event.threat = 7:\r\n      Extreme Danger: {Occasionally(2, entered)} ultra high-threat\r\n   |else:\r\n      Extreme Danger: {Occasionally(2, entered)} Unprecedented level {event.threat} threat\r\n   }\r\n}\r\n\r\n{set source to token(event.source, \"$USS_Type_\", 1)}\r\n\r\n{if source = \"Aftermath;\":\r\n   {set source to OneOf(\"combat aftermath\", \"dissipating combat\")}\r\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"alien\", \"xeno\", \"non-human\", \"Thargoid probe\")}\r\n|elif (source = \"Anomaly;\" && event.threat = 4):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"alien\", \"xeno\", \"non-human\", \"Thargoid sensor\")}\r\n|elif source = \"Anomaly;\":\r\n   {set source to OneOf(\"anomalous\", \"unknown\", \"mysterious\")}\r\n|elif source = \"Ceremonial;\":\r\n    {set source to \"ceremonial comms\"}\r\n|elif source = \"Convoy;\":\r\n    {set source to \"convoy\"}\r\n|elif source = \"DisruptedWakeEchoes;\":\r\n    {set source to \"\"}\r\n|elif source = \"DistressSignal;\":\r\n   {set source to \"distress\"}\r\n|elif source = \"MissionTarget;\":\r\n   {set source to OneOf(\"mission\", \"mission encoded\")}\r\n|elif source = \"NonHuman;\":\r\n   {set source to OneOf(\"alien\", \"xeno\", \"non-human\")}\r\n|elif source = \"Salvage;\":\r\n    {set source to \"degraded emissions\"}\r\n|elif source = \"ValuableSalvage;\":\r\n    {set source to \"encoded emissions\"}\r\n|elif source = \"VeryValuableSalvage;\":\r\n    {set source to \"high grade emissions\"}\r\n|elif source = \"WeaponsFire;\":\r\n   {set source to OneOf(\"combat\", \"weapons fire\")}\r\n}\r\n\r\n{Pause(2000)}\r\n{warninglevel} {source} signal source. \r\n\r\n{if system.state = \"Anarchy\" && source = \"degraded emissions\" && system.population > 0: \r\n   {Occasionally(2, \"\r\n      Caution:\r\n      {set local to OneOf('local', 'nearby')}\r\n      {set chatter to OneOf('chatter', 'gossip', 'rumor')}\r\n      {set indicate to OneOf('claims', 'suggests', 'implies', 'reports')}\r\n      {OneOf('{local} transmissions {indicate}', \r\n         '{chatter} in {local} transmissions {indicate}')}\r\n      {Occasionally(3, 'that there is')}\r\n      {OneOf('increased', 'elevated', 'heightened')}\r\n      {OneOf('criminal {Occasionally(2, \\\\'syndicate\\\\')}', \r\n             'pirate {Occasionally(2, OneOf(\\\\'gang\\\\', \\\\'clan\\\\'))}' )}\r\n      {OneOf('activity', 'presence')}\r\n      in {OneOf('the area', 'the vicinity', 'this sector', 'this system')}.\r\n      {OneOf('Remain', 'Stay', 'Keep')} {OneOf('vigilant', 'alert', 'frosty', 'sharp')} \r\n      {Occasionally(3,' {F(\\\\'Honorific\\\\')}' )}.\r\n   \")}\r\n}"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Entered supercruise\")}\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf(\"Supercruise aktiviert\", \"Supercruise Eintritt vollzogen\", \"Übergang in den Supercruise vollzogen\")}\r\n\r\n{_ - system The system at which the commander has entered supercruise _}\r\n",
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n\r\n{Pause(1000)}\r\n\r\n{Occasionally(2, \"{ShipName()} has\")} {OneOf(\"entered\", \"jumped to\")} supercruise."
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Exploration data purchased\")}\r\n\r\n{OneOf(\"{OneOf('system', 'entdeckungs')} daten für {(event.system)} {OneOf('gekauft', 'jetzt verfügbar')}\",\r\n            \"{Occasionally(3, '{ShipName()} hat')} {OneOf('system', 'entdeckungs')} daten für {P(event.system)} von den stations diensten  empfangen\",\r\n            \"Empfang der {(event.system)} {OneOf('system', 'entdeckungs')} daten bestätigt\")}.\r\n            \r\n{_\r\n- system  The system for which the exploration data was purchased\r\n- price   The price of the purchase\r\n_}",
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data",
      "default": false,
      "defaultValue": "{OneOf(\"Purchased {OneOf('system', 'exploration')} data for {P(event.system, 'starsystem')}\",\r\n            \"{OneOf('system', 'exploration')} data for {P(event.system, 'starsystem')} now available\",\r\n            \"{Occasionally(3, '{ShipName()} has')} Received {OneOf('system', 'exploration')} data for {P(event.system, 'starsystem')} from station services\",\r\n            \"Receipt of {P(event.system, 'starsystem')} {OneOf('system', 'exploration')} data confirmed\")}."
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Exploration data sold\")}\r\n\r\n{OneOf(\"Erkundungsdaten\", \"Daten\", \"Systemdaten\")} \r\n{if len(event.systems) = 1\t\t:  {Occasionally(3, \"von  einem System\")}\r\n\r\n|elif len(event.systems) = 0 \t: von mehreren Systemen \r\n|else                     \t\t: von {len(event.systems)} Systemen\r\n}\r\n\r\nfür {set value to (event.reward)} {F(\"Humanise ValueGer\")} credditts verkauft.\r\n\r\n{if len(event.firsts) > 0:\r\n    , mit einem bonus von {set value to (event.bonus)} {F(\"Humanise ValueGer\")} credditts für\r\n    {if len(event.firsts) = 1 :eine Erstentdeckung\r\n    |else: {len(event.firsts)} Erstentdeckungen\r\n    }\r\n}\r\n.\r\n\r\n{_\r\n- systems  The systems for which the exploration data was sold\r\n- reward   The reward for selling the exploration data\r\n- bonus    The bonus for first discoveries\r\n- total    The total credits received (after any wages paid to crew and including for example\r\n\t\t\tthe 200% bonus if rank 5 with Li Yong Rui)\r\n_}",
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data",
      "default": false,
      "defaultValue": "Exploration data for {len(event.systems)} \r\n{if len(event.systems) = 1: system |else: systems} \r\nsold for {Humanise(event.total)} credits\r\n\r\n{if event.bonus > 0:\r\n    , including a bonus of {Humanise(event.bonus)} credits for first discoveries\r\n}."
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Exploration promotion\")}\n\n{set ExplorRank to cmdr.explorationrating.rank}\n\n{set V to rand(1,6)}\n\n{if V =1: Glückwunsch Kom mahnder.}\n\n{if V<=2: Sie wurden\n|elif V<=3: Man hat Sie\n} \nfür Ihre {OneOf('guten', 'ausgezeichneten', 'hervorragenden')} {OneOf('Erkunder','Kartographie')} Fähigkeiten\n\n{if V>=4: wurden Sie} \n\n{if cmdr.explorationrating.rank: auf Rang {cmdr.explorationrating.rank}: \n\t\t{F(\"Honorific\")}} {OneOf(\"befördert\",\"erhoben\",\"hoch gestuft\",\"heraufgestuft\")}.\n\n{  if V>=5: Glückwunsch Kom mahnder.}\n\n{auth}\n\n{_ - rating The commander's new exploration rating _}",
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases",
      "default": false,
      "defaultValue": "You have been recognised for your exploration skills, {F(\"Honorific\")}."
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Federation promotion\")}\r\n\r\n{set rank to cmdr.federationrating.rank}\r\n{_ set rank to event.rank - alte Auswahl}\n\n{  if rank = 0: {set Rang to \"Piloten\"}\n|elif rank = 1: {set Rang to \"Rekruten\"}\n|elif rank = 2: {set Rang to \"Kadetten\"}\n|elif rank = 3: {set Rang to \"Fähnrichs\"} {set auth to \"Sie dürfen sich jetzt ein föderales Dropp ship kaufen.\"}\n|elif rank = 4: {set Rang to \"Maat\"} {set auth to \"Sie haben nun Zugang zum Sol System.\"}\n|elif rank = 5: {set Rang to \"Ober Maat\"} \r\n\t\t\t\t{set auth to \"Sie sind hiermit berechtigt sich ein föderales Assault Ship zu kaufen und \n\t\t\t\terhalten außerdem Zugang zu Veegaa und dem Beta Hydri System.\"}\n|elif rank = 6: {set Rang to \"Oberfähnrichs\"} {set auth to \"Sie haben nun Zugang zum System P L X 6 9 5\"}\n|elif rank = 7: {set Rang to \"Leutnants\"} {set auth to \"Sie können sich ab sofort ein föderales Gann ship kaufen \n\t\t\t\tund haben jetzt Zugang zu Ross 1 2 8\"}\n|elif rank = 8: {set Rang to \"Kapitän Leutnants\"} {set auth to \"Hiermit erhalten Sie Zugang zum Exbeur System.\"}\n|elif rank = 9: {set Rang to \"Korvetten Leutnants\"}\n|elif rank = 10: {set Rang to \"Fregattenkapitäns\"} {set auth to \"Sie erhalten damit Zugang zum System Hors.\"}\n|elif rank = 11: {set Rang to \"Kapitäns\"}\n|elif rank = 12: {set Rang to \"Konteradmirals\"} {set auth to \"Sie sind nun berechtigt sich eine föderale Korvett zu kaufen.\"}\n|elif rank = 13: {set Rang to \"Fize Admirals\"}\n|elif rank = 14: {set Rang to \"Admirals\"}\n}\n\n{set V to rand(1,6)}\n{  if V =1:Glückwunsch Kom mahnder.}\n{  if V<=2:Sie wurden\n|elif V<=3:Die Föderation hat Sie\n}\nfür Ihre {OneOf('guten', 'ausgezeichneten', 'hervorragenden')} {OneOf('Leistungen','Diehnste')} \nin der {if V<=2:{Occasionally(3, \"föderalen\")}} {OneOf('Navy','Flotte')}\n{  if V>=4: hat Sie Die Föderation}\n{  if Rang: auf den Rang eines {Rang}} {OneOf(\"befördert\",\"erhoben\")}.\n{  if V>=5:Glückwunsch Kom mahnder.}\n{auth}\r\n\r\n{_\r\n- rank    The commander's new Federation rank\r\n- rating  The commander's new Federation rank level / rating (as an integer)\r\n_}\r\n",
      "name": "Federation promotion",
      "description": "Triggered when your rank increases with the Federation",
      "default": false,
      "defaultValue": "{set plainHonorific to when(cmdr.gender = 'Female', 'Madam', 'Sir')}\r\n\r\nCongratulations {OneOf('Commander {CommanderName()}', plainHonorific)}! You have\r\n{OneOf('achieved', 'been promoted to', 'been granted')}\r\nthe rank of {event.rank}\r\n{Occasionally(2, OneOf('within the Federal Navy', 'for your service to the Federation'))}.\r\n\r\n{if event.rating = 3:\r\n    You now qualify to purchase the Federal Dropship.\r\n|elif event.rating = 4:\r\n    This grants you access to the {P('Sol', 'starsystem')} system.\r\n|elif event.rating = 5:\r\n    You now qualify to purchase the Federal Assault Ship, and have access to the {P('Vega', 'starsystem')} and {P('Beta Hydri', 'starsystem')} systems.\r\n|elif event.rating = 6:\r\n    This grants you access to the {P('PLX 695', 'starsystem')} system.\r\n|elif event.rating = 7:\r\n    You now qualify to purchase the Federal Gunship, and have access to the {P('Ross 128', 'starsystem')} system.\r\n|elif event.rating = 8:\r\n    This grants you access to the {P('Exbeur', 'starsystem')} system.\r\n|elif event.rating = 10:\r\n    This grants you access to the {P('Hors', 'starsystem')} system.\r\n|elif event.rating = 12:\r\n    You now qualify to purchase the Federal Corvette.\r\n|elif event.rating = 14:\r\n    This is the highest rank available to a member of the Federal Naval Reserve.\r\n}\r\n"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Fighter docked\")}\r\n\r\n{OneOf(\"Fighter\",\"Jäger\")} {Occasionally(2, \"am MutterSchiff\")} {OneOf(\"angedockt\",\"aufgenommen\",\"aufgeladen\",\"angekoppelt\",\"fest gemacht\",\"gesichert\")}.\r\n\r\n{_ - id The fighter's id _}",
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship",
      "default": false,
      "defaultValue": "Fighter {OneOf(\"docked\", \"redocked\")} {Occasionally(2, \"with ship\")}."
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Fighter launched\")}\r\n\r\n{OneOf(\"Fighter\",\"Jäger\")} {Occasionally(2, \"vom MutterSchiff\")} {OneOf(\"abgedockt\",\"freigegeben\",\"abgekoppelt\",\"losgemacht\",\"gestartet\")}.\r\n\r\n{_\r\n- loadout           The fighter's loadout\r\n- id                The fighter's id\r\n- playercontrolled  True if the fighter is controlled by the player\r\n_}",
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship",
      "default": false,
      "defaultValue": "Fighter {OneOf(\"deploying\", \"launching\")} {Occasionally(2, \"from mothership\")}."
    },
    "Fighter rebuilt": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Fighter rebuilt\")}\r\n\r\nJäger {OneOf(\"vollständig repariert, gewartet\", \"komplett wieder hergestellt\")} \r\n\t\tund bereit zum {OneOf(\"Start\", \"Absetzen\")}.\r\n\r\n{_\r\n- loadout  The loadout of the fighter\r\n- id       The fighter's id\r\n_}",
      "name": "Fighter rebuilt",
      "description": "Triggered when a ship's fighter is rebuilt in the hangar",
      "default": false,
      "defaultValue": "Fighter {OneOf(\"rebuilt\", \"reconstruction complete\")} and ready for {OneOf(\"launch\", \"deployment\")}."
    },
    "File Header": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": "{_\r\n- version  The version of the game\r\n- build    The build of the game\r\n_}",
      "name": "File Header",
      "description": "Triggered when the file header is read",
      "default": false,
      "defaultValue": null
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Fine incurred\")}\n\n{_ Context _}\n{SetState('eddi_context_last_subject', 'fine')}\n{SetState('eddi_context_last_action', 'incur')}\n{SetState('eddi_context_fine_name', event.victim)}\n{SetState('eddi_context_fine_faction', event.faction)}\n{SetState('eddi_context_fine_amount', event.fine)}\n\nSie schulden {set to to 1} {set translate to event.faction} {F(\"Translate Power\")}\n{set value to (event.fine)} {F(\"Humanise ValueGer\")} credditts {F(\"Crime descriptions\")}.\n\n{_\n- crimetype The type of crime committed\n- crime     The decription of the crime committed\n- victim    The name of the victim of the crime\n- faction   The name of the faction issuing the fine\n- fine      The number of credits issued as the fine\n_}",
      "name": "Fine incurred",
      "description": "Triggered when you incur a fine",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\nYou owe {P(event.faction, \"faction\")} {Humanise(event.fine)} credits for {event.crime}."
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Fine paid\")}\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'fine')}\n{SetState('eddi_context_last_action', 'pay')}\n{SetState('eddi_context_fine_amount', event.amount)}\n\nGeldbuhße über {set value to (event.amount)} {F(\"Humanise ValueGer\")} credditts entrichtet.\n\n{_\n- amount            The amount of the fine paid\n- brokerpercentage  Broker percentage (if paid via a Broker)\n- allfines          Whether this payment covers all current fines (true or false)\n- faction           The faction to which the fine was paid (if the payment does not cover all current fines)\n- shipid            The ship id of the ship associated with the fine\n_}",
      "name": "Fine paid",
      "description": "Triggered when you pay a fine",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nPaid fine of {Humanise(event.amount)} credits."
    },
    "Flight assist": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ - off A boolean value. True if flight assist is off. _}",
      "name": "Flight assist",
      "description": "Triggered when flight assist is toggled",
      "default": false,
      "defaultValue": null
    },
    "freie Kapazität": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Report current cargo manifest _}\r\n\r\n{set cargocarried to 0}\r\n{set haulage to 0}\r\n{set illegal to false}\r\n{set stolen to false}\r\n{if len(inventory) > 0:\r\n    {for cargo in inventory:\r\n        {set cargocarried to cargocarried + cargo.total}\r\n        {set haulage to haulage + cargo.haulage}\r\n        {if cargo.stolen > 0: {set stolen to true}}\r\n        {if status.docked:\r\n            {for prohibited in station.prohibited:\r\n                {if cargo.name = prohibited: {set illegal to true}}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{if cargocarried < ship.cargocapacity:\r\n        {set free to ship.cargocapacity - cargocarried}\r\n        Wir {OneOf(\"haben {free} Tonne{if free != 1:n} freie Kapazität\",\r\n        \"haben noch Platz für {free} Tonne{if free != 1:n}\",\r\n        \"können noch {free} tonne{if free != 1:n} Fracht aufnehmen\")}\r\n}",
      "name": "freie Kapazität",
      "description": "Aufruf z.Z. nur über VA (von Melbar)",
      "default": false,
      "defaultValue": null
    },
    "Friends status": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Friends status\")}\n\n{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\n\n{_ Test event Freundestatus , event.name ist jetzt event.status. _}\n\n{_ set uselist to \"white\" _}\n{set uselist to \"black\"}\n\n{_ set whitelist to [\"Melbar Kaasom\", \"Altersack123\", \"dubstation\", \"Nihidious\", \"Kliehm\",\n\t\t\t\t\t\"Ben Wolf Romach\", \"Icho Tolt\", \"doublefrag\", \"JayCeeDarty\", \"Sir Lanzeschrott\"\n\t\t\t\t\t\"Mike360\", \"Ragnor 1309\", \"KOLUMBUS\"]}\n\t\t\t\t\t\n{_ set blacklist to [\"User4\", \"User5\", \"User6\"] _}\n\n{set blacklist to []}\n\n{if event.name:\n    {  if uselist = \"white\":\n        {if find(whitelist, event.name) > -1: Kommandant {set translate to (event.name)} {F('Translate Power')} \n        ist jetzt {event.status}.\n        }\n    |elif uselist = \"black\":\n        {if find(blacklist, event.name) = -1: Kommandant {set translate to (event.name)} {F('Translate Power')} \n        ist jetzt {event.status}.\n        }\n    }\n|else:\n    Freund Status unbekannt.\n}\n\n{_\n- name    the friend's commander name\n- status  Status: one of the following: Requested, Declined, Added, Lost, Offline, Online\n_}",
      "name": "Friends status",
      "description": "Triggered when a friendly commander changes status",
      "default": false,
      "defaultValue": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\r\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\r\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\r\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\r\n\r\n{set uselist to \"black\"}\r\n\r\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\r\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\r\n\r\n{if event.name:\r\n    {if uselist = \"white\":\r\n        {if find(whitelist, event.name) > -1:\r\n            {event.name} is now {event.status}.\r\n        }\r\n    |elif uselist = \"black\":\r\n        {if find(blacklist, event.name) = -1:\r\n            {event.name} is now {event.status}.\r\n        }\r\n    }\r\n|else:\r\n    I don't know who you are talking about.\r\n}"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: FSD engaged\")}\r\n\r\n{_ Context _}\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_fsd_target', event.target)}\r\n{SetState('eddi_context_system_lastvisit', system.lastVisitSeconds)}\r\n\r\n{SetState('first_visit', false)}\r\n\r\n{if event.target = 'Hyperspace':\r\n\t{_ Rewrite context to represent a jump _}\r\n   \t{SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n    {SetState('eddi_context_supercruise', \"yes\")}\r\n\r\n    {set reportsystem to SystemDetails(event.system)}\r\n\t{set arrivalsystem to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump _}\r\n\t{Pause(500)}\r\n\r\n\t{set sys_val to cast(state.eddi_context_system_value, \"n\")}\r\n    {if sys_val > 0 && sys_val != null:\r\n        {OneOf(\"Der geschätze Scan Wert des letzten System liegt bei\", \"Das vorherige System hat cirka einen Wert von\")}\r\n        {Humanise(state.eddi_context_system_value)} credditts.\r\n    |else:\r\n        {OneOf(\"Ziel bestätigt\",\"Sprung initiiert\",\"Sprung Ziel eingelockt\", \"Sprung eingeleitett\")}.\r\n    }\r\n\r\n\t{Pause(2500)}\r\n\r\n\tWir {OneOf(\"sind\", \"befinden uns\")} {OneOf(\"auf Kurs\", \"auf dem Weg\", \"auf dem Sprung\")} zum System \r\n\t{if (reportsystem.name) = \"Shinrarta Dezhra\": schinrata |else: {reportsystem.name}}\r\n\t\r\n\t{_ Achtung Variable für SecondsSince() geändert}\r\n\t{if reportsystem.name = homesystem.name: \r\n\t\t{if SecondsSince(reportsystem.lastVisitSeconds) > 3600 : Willkommen zu Hause, {F(\"Honorific\")} {cmdr.name}}\r\n\t|else: {Loc(\"lastsystem_allegiance:\")} {Loc(lastsystem.allegiance)} {Loc(\"system_allegiance:\")} {Loc(system.allegiance)}\r\n\r\n\t\t{if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Keine\" &&\r\n            lastsystem.allegiance != \"Independent\" && lastsystem.allegiance != \"Unabhängig\" && \r\n            (!system.allegiance || system.allegiance = \"None\" || system.allegiance = \"Keine\" || \r\n            system.allegiance = \"Independent\" || system.allegiance = \"Unabhängig\"):\r\n\t\t\t\tund verlassen {OneOf(\"jetzt\", \"gerade\", \"hiermit\", \"somit\", \"derzeit\")} {set allegiance to lastsystem.allegiance}\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance \r\n\t\t\t\t&& system.allegiance != \"None\" && system.allegiance != \"Keine\":\r\n\t\t\t\tund betreten {OneOf(\"jetzt\", \"gerade\", \"hiermit\", \"somit\", \"derzeit\")} {set allegiance to system.allegiance}         \r\n\t\t\t{if cmdr.title != \"Commander\" && cmdr.title != \"Kommandant\" : {set welcome to cat('Willkommen zurück ', F('Honorific'))}}\r\n        }\r\n\r\n\t\t{if allegiance:\r\n\t\t\t{ if  allegiance = \"Empire\"       || allegiance = \"Imperium\"   : \r\n\t\t\t\t{OneOf(\"imperiales Gebiet\", \"imperiales Hoheits Gebiet\", \"imperiales Herrschafts Gebiet\", \"imperialen Raum\")}\r\n\t\t\t|elif  allegiance = \"Federation\"  || allegiance = \"Föderation\" : \r\n\t\t\t\t{OneOf(\"föderales Gebiet\", \"Föderations Gebiet\", \"Föderations Raum\", \"föderalen Raum\")}\r\n\t\t\t|elif  allegiance = \"Alliance\"    || allegiance = \"Allianz\"    : \r\n\t\t\t\t{OneOf(\"Allianz Gebiet\", \"alli iertes Gebiet\", \"Allianz Raum\", \"alli ierten Raum\")}\r\n\t\t\t|elif  allegiance = \"Independent\" || allegiance = \"Unabhängig\" : \r\n\t\t\t\t{OneOf(\"neutrales Gebiet\", \"neutralen Raum\")}\r\n\t\t\t|else: \r\n\t\t\t\t{allegiance}\r\n\t\t\t}\r\n\t\t}.\r\n\r\n\t\t{if welcome: {welcome}.}\r\n\r\n\t\t{set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n\t\t{if slice(event.stellarclass, 0, 1) = \"D\" \t\t: Vorsicht: Weissen Zwerg entdeckt.\r\n\t\t|elif event.stellarclass = \"N\" \t\t\t\t\t: Vorsicht: Neutronen Stern entdeckt.\r\n\t\t|elif event.stellarclass = \"H\"\t\t\t\t\t: Vorsicht: Schwarzes Loch entdeckt.\r\n\t\t|elif find(scoopables, event.stellarclass) = -1\t: Achtung: Zielstern zum Auftanken nicht geeignet!\r\n\t\t}\t\t\r\n\r\n\t\t{if reportsystem.visits = 0 : Es ist unser erster Besuch. {SetState('first_visit', true)}\r\n\t\t\t{if !reportsystem.population : {OneOf(\"Dieses System ist unbesiedelt\", \"Registriere keinerlei Anzeichen auf humanoides Leben\", \r\n    \t\t\t\t\t\t\t\t\t\t\"Dieses  System wurde noch nicht kolonisiert\")}.\r\n\t\t\t|else:\r\n\t\t\t\t{_ F(\"System state report\") - jetzt in \"Jumped\"}\r\n\t\t\t\t{F(\"System report\")}\r\n\t\t\t}\r\n\t\t|elif reportsystem.visits = 1 : Wir haben dieses System bereits einmal besucht.\r\n\t\t\t{if !reportsystem.population : {OneOf(\"Dieses System ist unbesiedelt\", \"Registriere keinerlei Anzeichen auf humanoides Leben\", \r\n\t\t\t\t\t\t\t\t\t\t\t\"Dieses  System wurde noch nicht kolonisiert\")}.\r\n\t\t\t|else: {_ F(\"System state report\") - jetzt in \"Jumped\"}\r\n\t\t\t}\r\n\t\t|elif reportsystem.visits > 5 : Wir haben dieses System {OneOf(\"bereits\", \"schon\")} {OneOf(\"mehrmals\", \"häufiger\", \"öfter\")} besucht.\r\n\t\t\t{if !reportsystem.population : {OneOf(\"Dieses System ist unbesiedelt\", \"Registriere keinerlei Anzeichen auf humanoides Leben\", \r\n\t\t\t\t\t\t\t\t\t\t\t\"Dieses  System wurde noch nicht kolonisiert\")}.\r\n\t\t\t|else: {_ F(\"System state report\") - jetzt in \"Jumped\"}\r\n\t\t\t}\r\n\t\t|elif reportsystem.visits > 1 : Wir haben dieses System {OneOf(\"bereits\", \"schon\")} {reportsystem.visits} mal besucht.\r\n\t\t\t{if !reportsystem.population : {OneOf(\"Dieses System ist unbesiedelt\", \"Registriere keinerlei Anzeichen auf humanoides Leben\", \r\n\t\t\t\t\t\t\t\t\t\t\t\"Dieses  System wurde noch nicht kolonisiert\")}.\r\n\t\t\t|else: {_ F(\"System state report\") - jetzt in \"Jumped\"}\r\n\t\t\t}\r\n\t\t}\r\n\t\t{Pause(500)}\r\n\t\t{if homesystem.name = \"\" || !homesystem.name : Es wurde kein Heimatsystem eingetragen !\r\n\t\t|else:\r\n\t\t\t{if reportsystem.distancefromhome > 500 :\r\n\t\t\t\t{Occasionally(7, \"{OneOf(\"Wir befinden uns\", \"Aktuelle Position ist\", \"Wir sind nun\")}\")} \r\n\t\t\t\t{set value to (reportsystem.distancefromhome)} {F(\"Humanise ValueGer\")} Lichtjahre von \r\n\t\t\t\t{OneOf(\"unserem Heimatsystem\", \"zu Hause\", homesystem.name)} entfernt.\r\n\t\t\t\t\r\n\t\t\t\t{if reportsystem.comment: Wir haben {OneOf(\"eine Notiz\", \"einen Vermerk\", \"Einen Kommentar\")} \r\n\t\t\t\t\t{OneOf(\"über\", \"für\", \"zu\")} diesem System.  \r\n\t\t\t\t\t{OneOf(\"Mit dem Inhalt:\", \"Der Besagt,\", \"lese vor:\", \" Der Inhalt lautet?\")} {reportsystem.comment}.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n}",
      "name": "FSD engaged",
      "description": "Triggered when your FSD has engaged",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_fsd_target', event.target)}\r\n{SetState('eddi_context_system_lastvisit', system.lastVisitSeconds)}\r\n\r\n{_ Zero the 'remaining jump' context to only use values following this event _}\r\n{SetState('eddi_context_remaining_jumps', 0)}\r\n\r\n{if event.target = 'Hyperspace':\r\n    {_ Rewrite context to represent a jump }\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n\r\n    {set reportsystem to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump}\r\n    {Pause(5000)}\r\n\r\n    {OneOf(\"Destination confirmed\",\"Jump in progress\",\"Telemetry obtained\")}.\r\n    {ShipName()} is {OneOf(\"heading to\", \"on route to\", \"travelling to\", \"in transit to\")} the {P(reportsystem.name, \"starsystem\")} system.\r\n    {if reportsystem.name = homesystem.name:\r\n        Welcome home, {F(\"Honorific\")}\r\n    |else:\r\n        {set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n        {if slice(event.stellarclass, 0, 1) = \"D\":\r\n            Caution: white dwarf detected.\r\n        |elif event.stellarclass = \"N\":\r\n            Caution: neutron star detected.\r\n        |elif event.stellarclass = \"H\":\r\n            Caution: black hole detected.\r\n        |elif find(scoopables, event.stellarclass) = -1:\r\n            {Occasionally(2, \"Information: \")}\r\n            Arrival star is not scoopable.\r\n        }\r\n        \r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!reportsystem.allegiance || reportsystem.allegiance = \"None\" || reportsystem.allegiance = \"Independent\"):\r\n            You {OneOf(\"are leaving\", \"have left\", \"are no longer in\")} {lastsystem.allegiance} space.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != reportsystem.allegiance && system.allegiance && system.allegiance != \"None\":\r\n            You {OneOf(\"are now in\", \"have entered\", \"are entering\")} {reportsystem.allegiance} space.\r\n            {if cmdr.title != \"Commander\":\r\n                Welcome back {F(\"Honorific\")}.\r\n            }\r\n        }\r\n\r\n        {if reportsystem.visits = 0:\r\n            This is your first visit to this system.\r\n        |elif reportsystem.visits = 1:\r\n            This is your second visit to this system.\r\n        |elif reportsystem.visits = 2:\r\n            {Occasionally(2, \"This is your third visit to this system.\")}\r\n        |elif reportsystem.visits = 3:\r\n            {Occasionally(2, \"This is your fourth visit to this system.\")}\r\n        |else:\r\n            {Occasionally(3, \"You have visited this system {reportsystem.visits} times.\")}\r\n        }\r\n\r\n        {if !reportsystem.population && lastsystem.population:\r\n            {OneOf(\"This system is not populated\",\"There is no human presence here\", \"Humans have yet to colonise this system\")}.\r\n        |elif reportsystem.population:\r\n            {if SecondsSince(reportsystem.lastVisitSeconds) > 3600:\r\n                {F(\"System report\")}\r\n            }\r\n        }\r\n\r\n        {if reportsystem.distancefromhome:\r\n            {set ReportDistanceFromHome() to:\r\n            \t{return cat(\r\n            \t    OneOf(\"You are\", \"Current location is\", \"You are now\"), \" \",\r\n\t                Humanise(reportsystem.distancefromhome), \" lightyears from \",\r\n\t                OneOf(\"home\", \"{P(homesystem.name, 'starsystem')}\"), \".\"\r\n\t            )}\r\n            } \r\n            {Occasionally(7, ReportDistanceFromHome())}\r\n        }\r\n\r\n        {if reportsystem.comment:\r\n            You made a {OneOf(\"note\", \"comment\", \"remark\")} {OneOf(\"about\", \"for\", \"on\")} this system.  It {OneOf(\"is as follows\", \"says\", \"reads\", \"is\")} {reportsystem.comment}.\r\n        }\r\n    }\r\n}"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Fuel check\")}\r\n\r\n{_ Fuel Check _}\r\n{_ Report fuel level _}\r\n\r\n{if ship.name = state.eddi_fuelcheck_shipname:\r\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\r\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    }\r\n|else:\r\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\r\n}\r\n\r\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\r\n{set fuelremaining to state.eddi_context_fuel_remaining}\r\n{set maxjump to fuelremaining/maxfuel}\r\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 0)}\r\n{set shipsfuel to:\r\n   {Occasionally(2, \"{ShipName()}s\" )} Treibstoff\r\n   {OneOf(\"level\", \"tank\", \"reserve\")} {Occasionally(2, \"ist\")} {Occasionally(2, \"jetzt\")}\r\n}\r\n{set currentpercent to: \r\n   bei {currentfuel} Prozent {Occasionally(2, \"Kapazität\")}\r\n}\r\n{set title to Occasionally(3,\", {F('Honorific')}\")}\r\n\r\n{if maxjump < 0.5: Gefahr! {shipsfuel} erschöpft!\r\n   {Pause(500)} Wir Laufen auf Reserve. Die Abschaltung nicht lebenswichtiger Systeme wird empfohlen!\r\n   {Pause(500)} Emergency transponder standing by {title}.\r\n|elif maxjump < 1.25:\r\n   {OneOf(\"Warnung:\", \"Gefahr:\", \"Achtung:\")}\r\n   {shipsfuel} {OneOf(\"gefährlich tief\", \"fast aufgebraucht\", \"fast alle\")}.\r\n   {OneOf(\"Bitte auftanken\", \"Auftanken wird unbedingt empfohlen\")}{title}.\r\n|elif currentfuel < 25:\r\n   {OneOf(\"Warnung:\", \"Gefahr:\", \"Achtung:\")}\r\n   {shipsfuel} {OneOf(\"unter 25%\", \"{currentpercent}\" )}{title}.\r\n|elif currentfuel < 50:\r\n   {shipsfuel} {OneOf(\"unter 50%\", \"{currentpercent}\" )}{title}.\r\n|elif currentfuel < 75:\r\n   {Occasionally(2, \"{shipsfuel} {currentpercent}{title}.\")}\r\n|elif currentfuel < 100:\r\n   {Occasionally(3, \"{shipsfuel} {currentpercent}{title}.\")}\r\n|else:\r\n   {shipsfuel} {OneOf(currentpercent, \"beim Maximum\")}{title}.\r\n}",
      "name": "Fuel check",
      "description": "Report on fuel levels",
      "default": false,
      "defaultValue": "{_ Fuel Check _}\r\n{_ Report fuel level _}\r\n\r\n\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.basename = \"FuelScoop\":\r\n        {set scoop_present to true}\r\n    }\r\n}\r\n\r\n{set shipsfuel to:\r\n    Fuel {OneOf(\"levels\", \"tanks\", \"reserves\")}\r\n    {Occasionally(2, \"are\")} {Occasionally(2, \"now\")}\r\n}\r\n\r\n{set currentfuel to round(status.fuel_percent, 0)}\r\n{set currentpercent to:\r\n    at {currentfuel} percent {Occasionally(2, \"capacity\")}\r\n}\r\n\r\n{set title to Occasionally(3,\", {F('Honorific')}\")}\r\n\r\n{set maxjump to status.fuel/ship.maxfuel}\r\n\r\n{if state.eddi_context_last_subject = \"jump\" && state.eddi_context_last_action = \"complete\" && maxjump < 1.25:\r\n    Warning: {shipsfuel} almost depleted.\r\n    {Pause(500)}\r\n\r\n    {if scoop_present:\r\n        {if system.scoopable:\r\n            {set scoop_system to system.systemname}\r\n        |else:\r\n            {set detail to JumpDetails('total')}\r\n            {set scoop_system to RouteDetails('scoop', detail.distance)}\r\n            {set scoop_distance to Distance(scoop_system)}\r\n        }\r\n\r\n        {if scoop_system && scoop_system != \"\":\r\n            Your nearest scoopable \r\n            {if scoop_system = system.name:\r\n                {set scoopable_bodies to []}\r\n                {for body in reportSystem.bodies:\r\n                    {if body.scoopable:\r\n                        {set scoopable_bodies to cat(scoopable_bodies, [body.shortname])}\r\n                    }\r\n                }\r\n                {if len(scoopable_bodies) > 1:\r\n                    stars are: \r\n                    {List(scoopable_bodies)}\r\n                |else:\r\n                    star is:\r\n                    {scoopable_bodies[0]}\r\n\r\n                }\r\n                {Pause(50)}\r\n                in the current system.\r\n            |else:\r\n                star is in the {scoop_system} system, {round(scoop_distance, 1)} lightyears away.\r\n            }\r\n            {Pause(500)}\r\n            {if maxjump < 0.5:\r\n                {Occasionally(2, \"Fuel\")} scooping is extremely urgent {title}.\r\n            |else:\r\n                {Occasionally(2, \"Fuel\")} scooping is strongly recommended {title}.\r\n            }\r\n        |else:\r\n            Danger: There are no scoopable stars within your current jump range.\r\n            {Pause(500)}\r\n            Shutdown of non-essential systems is advised!\r\n            {Pause(500)}\r\n            Emergency transponder standing by {title}.\r\n        }\r\n    |else:\r\n        {if maxjump < 0.5:\r\n            {OneOf(\"Refuel now\", \"Refuelling is extremely urgent\")} {title}.\r\n        |else:\r\n            {OneOf(\"Please refuel\", \"Refuelling is strongly recommended\")} {title}.\r\n        }\r\n    }\r\n|elif currentfuel < 25:\r\n    {OneOf(\"Warning:\", \"Caution:\", \"Attention:\")}\r\n    {shipsfuel} {OneOf(\"below 25%\", \"{currentpercent}\" )} {title}.\r\n|elif currentfuel < 50:\r\n    {shipsfuel} {OneOf(\"below 50%\", \"{currentpercent}\" )} {title}.\r\n|elif currentfuel < 75:\r\n    {Occasionally(2, \"{shipsfuel} {currentpercent} {title}.\")}\r\n|elif currentfuel < 100:\r\n    {Occasionally(3, \"{shipsfuel} {currentpercent} {title}.\")}\r\n|else:\r\n    {ShipName()} {shipsfuel} {OneOf(currentpercent, \"at maximum\")} {title}.\r\n}\r\n"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\n{set articlecategory to state.article_category}\n\n{if articlecategory:\n    {set articles to GalnetNewsArticles(articlecategory)}\n|else:\n    {set articles to GalnetNewsArticles('Article')}\n}\n\n{if len(articles) = 0:\n    Es gibt keine neuen Nachrichten zu diesem Thema.\n|else:\n    {set article to articles[0]}\n    {SetState('eddi_context_galnet_news_id', article.id)}\n    {article.title}: {article.content}\n    {GalnetNewsMarkRead(article.id)}\n}.\n",
      "name": "Galnet latest news",
      "description": "Read the latest unread news in a given category",
      "default": false,
      "defaultValue": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    There is no unread news in that category\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Es gibt keine ungelesenen Neuigkeiten\r\n    {if articlecategory: 'in that category' }\r\n|else:\r\n    {set item to 0}\r\n    {while item < len(articles):\r\n        {GalnetNewsMarkRead(articles[item].id)}\r\n        {set item to (item + 1)}\r\n    }\r\n    {if len(articles) = 1:\r\n        Neuen Artikel als gelesen markiert\r\n    |else:\r\n        {len(articles)} neue {OneOf('Artikel', 'Beiträge')} als gelesen markiert\r\n    }\r\n}.\r\n",
      "name": "Galnet mark read",
      "description": "Mark news articles as read",
      "default": false,
      "defaultValue": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    There is no unread news \r\n    {if articlecategory: 'in that category' }\r\n|else:\r\n    {set item to 0}\r\n    {while item < len(articles):\r\n        {GalnetNewsMarkRead(articles[item].id)}\r\n        {set item to (item + 1)}\r\n    }\r\n    {len(articles)} news {OneOf('articles', 'items')} marked as red\r\n}.\r\n"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\n{set articleid to state.articleid}\n{if articleid:\n    {set article to GalnetNews(articleid)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'news')}\n    {SetState('eddi_context_galnet_news_id', articleid)}\n}\n\n{if !article:\n    {_ Fetch from context }\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\n}\n\n{if article:\n    {article.title}: {article.content}\n|else:\n    Ich habe keine Informationen über diesen Artikel.\n}.\n\n",
      "name": "Galnet news",
      "description": "Read a particular news article",
      "default": false,
      "defaultValue": "{_ Fetch article from state }\r\n{set articleid to state.articleid}\r\n{if articleid:\r\n    {set article to GalnetNews(articleid)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'news')}\r\n    {SetState('eddi_context_galnet_news_id', articleid)}\r\n}\r\n\r\n{if !article:\r\n    {_ Fetch from context }\r\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\r\n}\r\n\r\n{if article:\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n|else:\r\n    I don't have any information about that article\r\n}."
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Galnet news published\")}\n\n{if len(event.items) = 1:\n    Ein neuer Galnet Artikel mit dem Titel {event.items[0].title} wurde veröffentlicht.\n|elif len(event.items) > 1:\n    {len(event.items)} neue Galnet Artikel wurden publiziert. Die Überschriften lauten\n    {set item to 0}\n    {while item < len(event.items):\n        {if item = len(event.items) - 1:\n            und {event.items[item].title}\n        |else:\n            {event.items[item].title},\n        }\n        {set item to item + 1}\n    }.\n}\n",
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet",
      "default": false,
      "defaultValue": "{_ set to 1 if you'd like interesting articles to be read to you _}\r\n{set readArticles to 0}          \r\n\r\n{_ define news categories that may be of interest to you _}\r\n{_ Valid categories: Article, Powerplay, Community Goal, Starport Status Update, Week in Review _}\r\n{set categories to [\r\n    \"Article\",\r\n    \"Community Goal\",\r\n]}\r\n\r\n{_ Process articles _}\r\n{set interesting_news_title to []}\r\n{set interesting_news_content to []}\r\n\r\n{set item to 0}\r\n{while item < len(event.items):\r\n    {for category in categories:\r\n        {if match(event.items[item].category, category):\r\n            {set interesting_news_title to cat(interesting_news_title, [event.items[item].title])}\r\n            {set interesting_news_content to cat(interesting_news_content, [event.items[item].content])}\r\n        }\r\n        {GalnetNewsMarkRead(event.items[item].content.id)}\r\n        {set item to (item + 1)}\r\n    }\r\n}\r\n{if len(event.items) = len(interesting_news_title): \r\n    {set allinteresting to 1} \r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(interesting_news_title) > 0:\r\n    {if len(interesting_news_title) = 1:\r\n        {set remarkable to OneOf('A noteworthy', 'A remarkable', 'An interesting', 'An intriguing', 'An unusual')}\r\n        {OneOf('A', '{remarkable}' )}\r\n        new Galnet article has been published, entitled {interesting_news_title[0]}.\r\n    |elif len(event.items) > 1:\r\n        {len(event.items)} \r\n        {if allinteresting: \r\n             {OneOf(\"noteworthy\", \"interesting\", \"intriguing\", \"remarkable\", \"unusual\")}\r\n        }\r\n        new Galnet articles have been published\r\n        {if !allinteresting:\r\n             , including {len(interesting_news_title)} \r\n             {OneOf('of interest', 'of note', 'worthy of remark')}\r\n        }.\r\n    }\r\n}\r\n\r\n{if len(interesting_news_title) > 0:\r\n    {if len(interesting_news_title) = 1 && readArticles:\r\n        It reads: {interesting_news_content[0]}.\r\n    |elif len(interesting_news_title) > 1:\r\n        {set item to 0}\r\n        {while item < len(interesting_news_title):\r\n            {if item = 0:\r\n                The first \r\n                is entitled {interesting_news_title[item]}\r\n                {if readArticles:, and reads: {interesting_news_content[item]}}.\r\n            |elif item = 1:\r\n                The second\r\n                is entitled {interesting_news_title[item]}\r\n                {if readArticles:, and reads: {interesting_news_content[item]}}.\r\n            |elif item = len(interesting_news_title) - 1:\r\n                The last\r\n                is entitled {interesting_news_title[item]}\r\n                {if readArticles:, and reads: {interesting_news_content[item]}}.\r\n            |else:\r\n                The next\r\n                is entitled {interesting_news_title[item]}\r\n                {if readArticles:, and reads: {interesting_news_content[item]}}.\r\n            }\r\n            {set item to item + 1}\r\n        }\r\n    }\r\n    {if !readArticles:\r\n        {Pause(500)}\r\n        The \r\n        {if len(interesting_news_title) > 1: \r\n            {OneOf(\"audio recordings\", \"news reports\")} are \r\n        |else: \r\n            {OneOf(\"audio recording\", \"news report\")} is\r\n        } \r\n        ready {Occasionally(2, \"for playback\")}.\r\n    }\r\n}"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\n{set articlecategory to state.article_category}\n\n{if articlecategory:\n    {set articles to GalnetNewsArticles(articlecategory)}\n|else:\n    {set articles to GalnetNewsArticles('Article')}\n}\n\n{if len(articles) = 0:\n    Zu diesem Thema gibt es keine neuen Nachrichten.\n|else:\n    {set article to articles[len(articles)-1]}\n    {SetState('eddi_context_galnet_news_id', article.id)}\n    {article.title}: {article.content}\n    {GalnetNewsMarkRead(article.id)}\n}.\n",
      "name": "Galnet oldest news",
      "description": "Read the oldest unread news in a given category",
      "default": false,
      "defaultValue": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    There is no unread news in that category\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\n\n{if len(articles) = 0:\n    Sie haben keine ungelesenen Nachrichten.\n|elif len(articles) = 1:\n    Sie haben einen ungelesenen Artikel.\n|else:\n    Sie haben {len(articles)} ungelesene Artikel.\n}.",
      "name": "Galnet unread report",
      "description": "Report on unread news",
      "default": false,
      "defaultValue": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    You have no unread news\r\n|elif len(articles) = 1:\r\n    You have one unread news item\r\n|else:\r\n    You have {len(articles)} unread news items\r\n}."
    },
    "Glide": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Glide\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'glide')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{SetState('eddi_gravity', 0)}\r\n{SetState(\"eddi_glide_end\", \"false\")}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(event.body, event.system)}\r\n\r\n{if event.gliding:\r\n    {Pause(3000)}\r\n    Gleitflug {Occasionally(2, \"jetzt\")}\r\n    {OneOf(\"eingeleitett.\", \"gestarted.\")} \r\n\r\n    Zur Erinnerung! Eine\r\n    {if reportbody.gravity < 0.5 : geringe\r\n    |elif reportbody.gravity < 2  : mittlere\r\n    |elif reportbody.gravity < 4  : hohe\r\n    |else                         : extrem hohe\r\n    }\r\n    {set gravity to round(reportbody.gravity,2)}\r\n    {SetState('eddi_gravity', gravity)}\r\n    \r\n    Gravitation von {set value to (gravity)} {F(\"Humanise ValueGer\")} G erwartet uns.\r\n\r\n\r\n|else: {SetState(\"eddi_glide_end\", \"true\")} Gleitflug beendet.\r\n}\r\n\r\n{_\r\n- gliding \t\tThe glide status (either true or false, true if entering a glide)\r\n- systemname \tThe system at which the commander is currently located\r\n- bodyname \t\tThe nearest body to the commander\r\n- bodytype \t\tThe type of the nearest body to the commander\r\n_}",
      "name": "Glide",
      "description": "Triggered when your ship enters or exits glide",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'glide')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{if event.gliding:\r\n    Glide {Occasionally(2, \"mode\")} \r\n    {OneOf(\"engaged.\", \"initiated.\")}\r\n\r\n    {Pause(1000)}\r\n    {set body to BodyDetails(event.body, event.system)}\r\n    {if !body.name || body.name = \"\" || !body.gravity:\r\n        Planetary approach data not available.\r\n    |else:\r\n        {if body.landable:\r\n            {set gravity to round(body.gravity,2)}\r\n            {if gravity > 4:\r\n                Danger! {body.bodytype} {P(body.shortname, \"body\")} is an extremely high gravity world, at {gravity} G.\r\n            |elif gravity > 2:\r\n                Caution! {body.bodytype} {P(body.shortname, \"body\")} is a high gravity world, at {gravity} G.\r\n            |elif gravity > 0.5:\r\n                Warning! {body.bodytype} {P(body.shortname, \"body\")} is a medium gravity world, at {gravity} G.\r\n            |else:\r\n                {body.bodytype} {P(body.shortname, \"body\")} is a low gravity world, at {gravity} G.\r\n            }\r\n        }\r\n    }\r\n|else:\r\n    Glide completed.\r\n}"
    },
    "Habitable zone": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Habitable zone\")}\r\n\r\n{_ Fetch from context }\r\n\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{_ Distance for target black-body temperature}\r\n{_ From Jackie Silver's Hab-Zone Calculator https://forums.frontier.co.uk/showthread.php?p=5452081}\r\n\r\n{set targetmin to 286}\r\n{set targetmax to 225}\r\n\r\n{set LS to 300000000}\r\n{set rad to (pow((event.radius*1000), 2))}\r\n{set temp to (pow(event.temperature, 4))}\r\n{set zielmin to (pow(targetmin, 4))}\r\n{set zielmax to (pow(targetmax, 4))}\r\n\r\n{set hzmin1 to (rad / (4*zielmin))}\r\n{set hzmin2 to (hzmin1 * temp)}\r\n{set hzmin to (pow(hzmin2, 0.5)/ LS)}\r\n\r\n{set hzmax1 to (rad / (4*zielmax))}\r\n{set hzmax2 to (hzmax1 * temp)}\r\n{set hzmax to (pow(hzmax2, 0.5)/ LS)}\r\n\r\n\r\n{if hzmin > 10:\r\n   Bewohnbare Zone\r\n   {Occasionally(2, OneOf(\"wird berechnet mit\", \"fällt in den Bereich von\"))}: \r\n   {set value to (round (hzmin))} {F(\"Humanise ValueGer\")}\r\n   bis {set value to (round (hzmax))} {F(\"Humanise ValueGer\")}\r\n   Lichtsekunden.\r\n}",
      "name": "Habitable zone",
      "description": "Berechnet die bewohnbare Zone eines Sterns",
      "default": false,
      "defaultValue": null
    },
    "Hangar check": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI Fktn.: Hangar check\")}\r\n\r\n{_ Check shipmodel _}\r\n{if ship.model = \"Orca\"\t\t\t\t\t\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Asp\"\t\t\t\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Adder\"\t\t\t\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Beluga liner\"\t\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Diamondback explorer\"\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Diamondback scout\"\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Dolphin\"\t\t\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Hauler\"\t\t\t\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Type-7 Transporter\"\t\t: {SetState('no_fighting', true)}\r\n\t|elif ship.model = \"Type-9 Heavy\"\t\t\t: {SetState('no_fighting', true)}\r\n    \t\t\t\t\t\t\t\t\t  \t\t\t{SetState('slow_ship', true)}\r\n|else\t\t\t\t\t\t\t\t\t\t\t: {SetState('no_fighting', false)}\r\n}\r\n\r\n{SetState('fighter_installed', false)}\r\n{SetState('fighter_enabled', false)}\r\n{SetState('srv_installed', false)}\r\n{SetState('srv_enabled', false)}\r\n\r\n\r\n{for compartment in ship.compartments:\r\n    {  if compartment.module.name = \"Standard-Landecomputer\": {SetState('dockingcomp_installed', true)}\r\n        {if compartment.module.enabled\t: {SetState('dockingcomp_enabled', true)} Oh schön, ein Landecomputer ist installiert.\r\n        |else\t\t\t\t\t\t\t: Dieses Schiff ist manuell zu landen.\r\n       \t}\r\n\t\t|elif compartment.module.name = \"Fortschrittlicher Landecomputer\" || compartment.module.name = \"Advanced Docking Computer\": \r\n\t\t\t\t\t\t\t\t\t\t{SetState('a-dockingcomputer_installed', true)}\r\n\t\t{if compartment.module.enabled: {SetState('a-dockingcomputer_enabled', true)} \r\n\t\t\t\t\t\t\t\t\t\tWau ! Dieses Schiff verfügt über einen Start und Landecomputer, Großartig !\r\n\t\t|else\t\t\t\t\t\t\t:Dieses Schiff ist manuell zu Starten und zu Landen.\r\n\t\t}       \t\r\n    |elif compartment.module.name = \"Treibstoffsammler\": {SetState('fuelscoop_installed', true)}\r\n        {if compartment.module.enabled\t: {SetState('fuelscoop_enabled', true)} Treibstoffsammler? Check, sehr nützlich.\r\n       \t|else\t\t\t\t\t\t\t: Achtung! Dieses Schiff fliegt ohne Treibstoffsammler.\r\n        }\r\n    |elif compartment.module.name = \"Fighter-Hangar\": {SetState('fighter_installed', true)}\r\n        {if compartment.module.enabled\t: {SetState('fighter_enabled', true)} Ein Jäger kann uns unterstützen.\r\n        |else\t\t\t\t\t\t\t: Es ist kein Jäger an Bord.\r\n        }\r\n    |elif compartment.module.name = \"Planetenfahrzeug-Hangar\": {SetState('srv_installed', true)}\r\n        {if compartment.module.enabled: {SetState('srv_enabled', true)}\r\n\t\t\t{if compartment.size = 2 || compartment.size = 3: Ein {OneOf(\"Bodenfahrzeug\",\"S-Arr-Vi\", \"Rover\", \"Buggy\")} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{OneOf(\"steht auch zur Verfügung\", \"ist auch mit an Bord\")}.\r\n\t\t\t|elif compartment.size = 4\t\t\t\t\t\t: Wir haben sogar zwei \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{OneOf(\"Bodenfahrzeuge\",\"S-Arr-Wie\", \"Rover\", \"Buggy\")} mit an Bord.\r\n\t\t\t|elif compartment.size > 4\t\t\t\t\t\t: Es stehen mehrere \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{OneOf(\"Bodenfahrzeuge\",\"S-Arr-Wie\", \"Rover\", \"Buggy\")} zu Planetenerkundungen im Hangar.\r\n\t\t\t}\r\n        |else\t\t\t\t\t\t\t\t\t\t\t\t: Es werden keine Bodenfahrzeuge mitgeführt.\r\n        }\r\n    }\r\n}\r\n\r\n{_ \"vehicle\" kann direkt ausgelesen werden - ship, SRV oder Fighter _}\r\n{_ \"environment\" dto. - \"Docked\", \"Landed\", \"Normal space\", \"Supercruise\" or \"Witch space\" _}\r\n{_ F(\"Launchbay report\") _}\r\n",
      "name": "Hangar check",
      "description": "Check for the presence of a Fighter or SRV.",
      "default": false,
      "defaultValue": null
    },
    "Hardpoints": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Hardpoints\")}\r\n\r\n{_\r\n- deployed A boolean value. True if you hardpoints are deployed.\r\n_}",
      "name": "Hardpoints",
      "description": "Triggered when you deploy or retract your hardpoints",
      "default": false,
      "defaultValue": null
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Gefahr:\")}\nHitze Schaden festgestellt.",
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat",
      "default": false,
      "defaultValue": "{Occasionally(2, \"Danger:\")}\r\nHeat damage."
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Warnung:\")}\n{OneOf(\"Hitze Level \",\"Temperatur\",\"Rumf Temperatur\")} liegt oberhalb zulässiger {OneOf(\"Toleranzen\",\"Paramehter\")}.",
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%",
      "default": false,
      "defaultValue": "{Occasionally(2, \"Warning:\")}\r\nHeat levels beyond operating tolerance."
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if CombatRank:\r\n   {  if CombatRank = 1: Harmlos\r\n   |elif CombatRank = 2: Zumeist Harmlos\r\n   |elif CombatRank = 3: NeuLing\r\n   |elif CombatRank = 4: Kompetent\r\n   |elif CombatRank = 5: Experte\r\n   |elif CombatRank = 6: Meister\r\n   |elif CombatRank = 7: Gefährlich\r\n   |elif CombatRank = 8: Tödlich\r\n   |elif CombatRank = 9: Elite\r\n   }\r\n|elif TradeRank:\r\n   {  if TradeRank = 1: Bettelarm\r\n   |elif TradeRank = 2: Sehr Arm\r\n   |elif TradeRank = 3: Krämer\r\n   |elif TradeRank = 4: Klein Händler\r\n   |elif TradeRank = 5: Kaufmann\r\n   |elif TradeRank = 6: Groß Händler\r\n   |elif TradeRank = 7: Entrepreneur\r\n   |elif TradeRank = 8: Tycoon\r\n   |elif TradeRank = 9: Elite\r\n   }\r\n|elif ExplorRank:\r\n   {  if ExplorRank = 0: Total Planlos\r\n   |elif ExplorRank = 1: Fast Planlos\r\n   |elif ExplorRank = 2: Späher\r\n   |elif ExplorRank = 3: Land Kundiger\r\n   |elif ExplorRank = 4: Weeg Ebner\r\n   |elif ExplorRank = 5: Pfadfinder\r\n   |elif ExplorRank = 6: Ranger\r\n   |elif ExplorRank = 7: Pionier\r\n   |elif ExplorRank = 8: Elite\r\n   }\r\n|else:\r\n   {if system.allegiance = \"Empire\" || system.allegiance = \"Imperium\":\r\n       {  if cmdr.empirerating.rank  =  0: Kom mahnder\r\n       |elif cmdr.empirerating.rank  =  1: Fremde{if cmdr.gender = \"Male\":r}\r\n       |elif cmdr.empirerating.rank  =  2: Leibeigene{if cmdr.gender = \"Male\":r}\r\n       |elif cmdr.empirerating.rank  =  3: Meister{if cmdr.gender = \"Female\":in}\r\n       |elif cmdr.empirerating.rank  =  4: Gutsherr{if cmdr.gender = \"Female\":in}\r\n       |elif cmdr.empirerating.rank  =  5: \r\n       \t\t{if cmdr.gender = \"Male\"\t : Ritter\r\n       \t\t|elif cmdr.gender = \"Female\" : Dame}\r\n       |elif cmdr.empirerating.rank  =  6: mein{if cmdr.gender = \"Female\":e} Fürst{if cmdr.gender = \"Female\":in}\r\n       |elif cmdr.empirerating.rank  =  7: Baron{if cmdr.gender = \"Female\":in}\r\n       |elif cmdr.empirerating.rank  =  8: Vizegr{if cmdr.gender = \"Male\":af |else:äfin}\r\n       |elif cmdr.empirerating.rank  =  9: Gr{if cmdr.gender = \"Male\":af |else:äfin}\r\n       |elif cmdr.empirerating.rank <= 11: mein Lord\r\n       |elif cmdr.empirerating.rank  = 12: euer Gnaden\r\n       |elif cmdr.empirerating.rank  = 13: eure königliche Hoheit\r\n       |elif cmdr.empirerating.rank  = 14: eure Majestät\r\n       |else                             : {cmdr.empirerating.rank}\r\n       }\r\n   |elif system.allegiance = \"Federation\" || system.allegiance = \"Föderation\":\r\n       {  if cmdr.federationrating.rank =  0: Pilot\r\n       |elif cmdr.federationrating.rank =  1: Rekrut\r\n       |elif cmdr.federationrating.rank =  2: Kadett\r\n       |elif cmdr.federationrating.rank =  3: Fähnrich\r\n       |elif cmdr.federationrating.rank =  4: Maat {cmdr.name}\r\n       |elif cmdr.federationrating.rank =  5: Ober Maat\r\n       |elif cmdr.federationrating.rank =  6: Ober Fähnrich\r\n       |elif cmdr.federationrating.rank =  7: Leutnant\r\n       |elif cmdr.federationrating.rank =  8: Kapitän Leutnant\r\n       |elif cmdr.federationrating.rank =  9: Korvetten Leutnant\r\n       |elif cmdr.federationrating.rank = 10: Fregattenkapitän\r\n       |elif cmdr.federationrating.rank = 11: Kapitän\r\n       |elif cmdr.federationrating.rank = 12: Konteradmiral\r\n       |elif cmdr.federationrating.rank = 13: Fize Admiral\r\n       |elif cmdr.federationrating.rank = 14: Admiral\r\n       |else                                : {cmdr.federationrating.name}\r\n       }\r\n   |else                                    : \r\n   \t\t\t{if cmdr.gender = \"Male\"\t : Kommandant\r\n       \t\t|elif cmdr.gender = \"Female\" : Kommandantin\r\n       \t\t}\r\n   }\r\n}",
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your Kom mahnder",
      "default": false,
      "defaultValue": "{if system.allegiance = \"Empire\":\r\n    {F(\"Empire honorific\")}\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        commander\r\n    |else:\r\n        {cmdr.federationrating.name}\r\n    }\r\n|else:\r\n    commander\r\n}\r\n"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Hull damaged\")}\n\n{if event.vehicle = vehicle:\n  {if   event.health < 40: Vorsicht:\n  |elif event.health < 60: Warnung:\n  |elif event.health < 80: Achtung:\n  }\n  {OneOf(\"Schiffs Hülle\", \"Hüllen Integrität\", \"Integrität\", \"Strucktu relle Integrität\")} {Occasionally(3, \"liegt\")} {OneOf(\"bei unter \", \"unter\", \"weniger als\")} {event.health}%.\n}\n\n{_\n- vehicle The vehicle that has been damaged (Ship, SRV, Fighter)\n- piloted True if the vehicle receiving damage is piloted by the player\n- health The percentage health of the hull\n_}",
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent",
      "default": false,
      "defaultValue": "{if event.vehicle = vehicle:\r\n    {if event.health < 40:\r\n        Danger:\r\n    |elif event.health < 60:\r\n        Warning:\r\n    |elif event.health < 80:\r\n        Caution:\r\n    }\r\n    {OneOf(\"Hull\", \"Hull integrity\", \"Integrity\", \"Structural integrity\")} {Occasionally(3, \"is\")} at {event.health}%.\r\n}\r\n"
    },
    "Humanise ValueGer": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set value to (1339235)}\n{_ Humanise(value)}\n\n{if value >= 1000 && value < 1000000000000000000:\n   {set one to \"eine\"}\n   {if value >= 1000 && value < 1000000: {set divisor to 1000}\n      {set one to \"ein\"}\n      {set divisor to 1000} {set unit to \"Tausend\"} {set singular to \"Tausend\"} {set HalvingLimit to 99}\n   |elif value >= 1000000 && value < 1000000000:\n      {set divisor to 1000000} {set unit to \"Millionen\"} {set singular to \"Million\"} {set HalvingLimit to 12}\n   |elif value >= 1000000000 && value < 1000000000000:\n      {set divisor to 1000000000} {set unit to \"Milliarden\"} {set singular to \"Milliarde\"} {set HalvingLimit to 12}\n   |elif value >= 1000000000000 && value < 1000000000000000:\n      {set divisor to 1000000000000} {set unit to \"Billionen\"} {set singular to \"Billion\"} {set HalvingLimit to 12}\n   |elif value >= 1000000000000000 && value < 1000000000000000000:\n      {set divisor to 1000000000000000} {set unit to \"Billiarden\"} {set singular to \"Billiarde\"} {set HalvingLimit to 12}\n   }\n\n   {set num to cast(token(round ((value/divisor), 2), \".\", 0), \"n\")}\n   {set decimal to round(((value/divisor)-num), 2)} {if decimal >= 0.7 && decimal <= 0.99 : {set num to (num+1)}}\n   {if num = 1:\n      {if   decimal >= 0.3 && decimal < 0.7 : {set spoken to \"anderthalb\"}\n      |else: {set spoken to one} {set unit to singular}\n      }\n   |elif num <= HalvingLimit:\n      {if   decimal >= 0.3 && decimal < 0.7 : {set spoken to cat(num, ' einhalb')} \n      |else: {set spoken to num}\n      }\n   |else: {set spoken to num}\n   }\n\n   {if num <= HalvingLimit:\n      {if   decimal  = 0                       : {spoken} {unit}\n      |elif decimal >  0    && decimal <  0.1  : rund {spoken} {unit}\n      |elif decimal >= 0.1  && decimal <  0.2  : über {spoken} {unit}\n      |elif decimal >= 0.2  && decimal <  0.3  : weit über {spoken} {unit}\n      |elif decimal >= 0.3  && decimal <  0.4  : etwas unter {spoken} {unit}\n      |elif decimal >= 0.4  && decimal <  0.45 : fast {spoken} {unit}\n      |elif decimal >= 0.45 && decimal <  0.5  : rund {spoken} {unit}\n      |elif decimal  =                    0.5  : {spoken} {unit}\n      |elif decimal >  0.5  && decimal <  0.55 : rund {spoken} {unit}\n      |elif decimal >= 0.55 && decimal <  0.6  : etwas über {spoken} {unit}\n      |elif decimal >= 0.6  && decimal <  0.7  : über {spoken} {unit}\n      |elif decimal >= 0.7  && decimal <  0.8  : fast {spoken} {unit}\n      |elif decimal >= 0.8  && decimal <= 0.9  : knapp {spoken} {unit}\n      |elif decimal >= 0.9  && decimal <= 0.99 : rund {spoken} {unit}\n      |else: Wert ausserhalb: {value} {num} {decimal}\n      }\n   |else:\n      {if   decimal  = 0                       : {spoken} {unit}\n      |elif decimal >  0    && decimal <  0.1  : rund {spoken} {unit}\n      |elif decimal >= 0.1  && decimal <  0.2  : knapp über {spoken} {unit}\n      |elif decimal >= 0.2  && decimal <  0.3  : mehr als {spoken} {unit}\n      |elif decimal >= 0.3  && decimal <  0.4  : gut {spoken} {unit}\n      |elif decimal >= 0.4  && decimal <  0.5  : über {spoken} {unit}\n      |elif decimal >= 0.5  && decimal <  0.6  : gut über {spoken} {unit}\n      |elif decimal >= 0.6  && decimal <  0.7  : weit über {spoken} {unit}\n      |elif decimal >= 0.7  && decimal <  0.8  : fast {spoken} {unit}\n      |elif decimal >= 0.8  && decimal <= 0.9  : knapp {spoken} {unit}\n      |elif decimal >= 0.9  && decimal <= 0.99 : rund {spoken} {unit}\n      |else: Wert ausserhalb: {value} {num} {decimal}\n      }\n   }\n   {_ num} {_ dump type(num)} {_ decimal} {_ dump type(decimal)}\n\n|else: {format(value, join(\"n:p\", len(token(value, \".\", 1))), \"de-DE\")}\n}",
      "name": "Humanise ValueGer",
      "description": "Zahlenwerte umgangssprachlich runden",
      "default": false,
      "defaultValue": null
    },
    "HuVal": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set value to (10000000)}\r\n\r\n{if value >= 1000 && value < 1000000000000000000:\r\n   {set one to \"eine\"} {set HalvingLimit to 19}\r\n   {if value >= 1000 && value < 1000000:\r\n      {set divisor to 1000} {set one to \"ein\"} {set unit to \"Tausend\"} {set singular to \"Tausend\"} {set HalvingLimit to 99}\r\n   |elif value >= 1000000 && value < 1000000000:\r\n      {set divisor to 1000000} {set unit to \"Millionen\"} {set singular to \"Million\"} \r\n   |elif value >= 1000000000 && value < 1000000000000:\r\n      {set divisor to 1000000000} {set unit to \"Milliarden\"} {set singular to \"Milliarde\"}\r\n   |elif value >= 1000000000000 && value < 1000000000000000:\r\n      {set divisor to 1000000000000} {set unit to \"Billionen\"} {set singular to \"Billion\"}\r\n   |elif value >= 1000000000000000 && value < 1000000000000000000:\r\n      {set divisor to 1000000000000000} {set unit to \"Billiarden\"} {set singular to \"Billiarde\"}\r\n   }\r\n\r\n   {set num to cast(token(round ((value/divisor), 2), \".\", 0), \"n\")}\r\n   {set decimal to round(((value/divisor)-num), 2)} {if decimal >= 0.7 && decimal <= 0.99 : {set num to (num+1)}}\r\n   {if num = 1:\r\n      {if   decimal >= 0.3 && decimal < 0.7 : {set spoken to \"anderthalb\"}\r\n      |else                                 : {set spoken to one} {set unit to singular}\r\n      }\r\n   |elif num <= HalvingLimit:\r\n      {if   decimal >= 0.3 && decimal < 0.7 : {set spoken to cat(num, ' einhalb')} \r\n      |else                                 : {set spoken to num}\r\n      }\r\n   |else: {set spoken to num}\r\n   }\r\n\r\n   {if num <= HalvingLimit:\r\n      {if   decimal  = 0                       : {spoken} {unit}\r\n      |elif decimal >  0    && decimal <  0.1  : rund {spoken} {unit}\r\n      |elif decimal >= 0.1  && decimal <  0.2  : über {spoken} {unit}\r\n      |elif decimal >= 0.2  && decimal <  0.3  : gut über {spoken} {unit}\r\n      |elif decimal >= 0.3  && decimal <  0.4  : fast {spoken} {unit}\r\n      |elif decimal >= 0.4  && decimal <  0.45 : rund {spoken} {unit}\r\n      |elif decimal >= 0.45 && decimal <  0.5  : knapp {spoken} {unit}\r\n      |elif decimal  =                    0.5  : {spoken} {unit}\r\n      |elif decimal >  0.5  && decimal <  0.55 : rund {spoken} {unit}\r\n      |elif decimal >= 0.55 && decimal <  0.6  : etwas über {spoken} {unit}\r\n      |elif decimal >= 0.6  && decimal <  0.7  : gut über {spoken} {unit}\r\n      |elif decimal >= 0.7  && decimal <  0.8  : fast {spoken} {unit}\r\n      |elif decimal >= 0.8  && decimal <= 0.9  : rund {spoken} {unit}\r\n      |elif decimal >= 0.9  && decimal <= 0.99 : knapp {spoken} {unit}\r\n      |else: Wert ausserhalb: {value}, {num}, {decimal}\r\n      }\r\n   |else:\r\n      {if   decimal  = 0                       : {spoken} {unit}\r\n      |elif decimal >  0    && decimal <  0.1  : rund {spoken} {unit}\r\n      |elif decimal >= 0.1  && decimal <  0.2  : etwas über {spoken} {unit}\r\n      |elif decimal >= 0.2  && decimal <  0.3  : mehr als {spoken} {unit}\r\n      |elif decimal >= 0.3  && decimal <  0.4  : gut {spoken} {unit}\r\n      |elif decimal >= 0.4  && decimal <  0.5  : über {spoken} {unit}\r\n      |elif decimal >= 0.5  && decimal <  0.6  : gut über {spoken} {unit}\r\n      |elif decimal >= 0.6  && decimal <  0.7  : weit über {spoken} {unit}\r\n      |elif decimal >= 0.7  && decimal <  0.8  : fast {spoken} {unit}\r\n      |elif decimal >= 0.8  && decimal <= 0.9  : rund {spoken} {unit}\r\n      |elif decimal >= 0.9  && decimal <= 0.99 : knapp {spoken} {unit}\r\n      |else: Wert ausserhalb: {value}, {num}, {decimal}\r\n      }\r\n   }\r\n   {_ num} {_ dump type(num)} {_ decimal} {_ dump type(decimal)}\r\n\r\n|elif value:\r\n   {if cast(token(value, \".\", 1),\"n\") = 0 || !token(value, \".\", 1):\r\n      {token(value, \".\", 0)}\r\n   |else:\r\n      {token(value, \".\", 0)},{Spacialise(token(value, \".\", 1))}\r\n   }\r\n}\r\n",
      "name": "HuVal",
      "description": "Zahlen umgangssprachlich ausgeben (Neue Version)",
      "default": false,
      "defaultValue": null
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set insurance to round(ship.value * cmdr.insurance / 100)}\n\n{set covereds to round((cmdr.credditts / insurance) - 0.5)}\n\n{if covereds = 0:\n  Achtung: Sie haben nicht genug credditts um Ihre Selbstbeteiligung in einem Versicherungsfall \n  entrichten zu können.\n|elif covereds = 1:\n  Hinweis: credditts reichen nur zur Deckung eines einzigen Versicherungsfalls.\n|elif covereds < 4:\n  Anmerkung: Ihre Bonitäht reicht aus um {covereds} Versicherungsfälle zu melden.\n}\n",
      "name": "Insurance check",
      "description": "Check for enough credditts to cover your insurance",
      "default": false,
      "defaultValue": "{set covereds to floor(cmdr.credits / ship.rebuy)}\r\n\r\n{if covereds = 0:\r\n  Danger: you do not have enough credits to cover your insurance excess.\r\n|elif covereds = 1:\r\n  Caution: you only have enough credits to cover a single insurance excess.\r\n|elif covereds < 4:\r\n  Note: you only have enough credits to cover {covereds} insurance excesses.\r\n|else:\r\n  {Occasionally(5, \"You have enough credits to cover {covereds} insurance excesses.\")}\r\n}\r\n"
    },
    "Inventory": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Inventory\")}\r\n\r\n{inventory.cargoCarried}\r\n{inventory.inventory}\r\n{inventory}\r\n{cargoCarried}\r\n",
      "name": "Inventory",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Jet cone boost\")}\r\n\r\n{Pause(1000)}\r\nReichweite des Sprungantriebs ist jetzt auf {Humanise(event.boost * 100)} Prozent.\r\n\r\n{_ - boost the value of the boost _}",
      "name": "Jet cone boost",
      "description": "Triggered when enough material has been collected from a solar jet cone (at a white dwarf or neutron star) for a jump boost",
      "default": false,
      "defaultValue": "{Pause(1000)}\r\nFrame shift drive boosted by {Humanise(event.boost * 100)} percent."
    },
    "Jet cone damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Jet cone damage\")}\r\n\r\nScheiße Modul {event.modulename} ist beschädigt !\r\nScheiße Modul {event.module.name} ist beschädigt !\r\n{event.module}\r\n{module.value}\r\n{module.cost}\r\n{module.health}\r\n\r\n{_\r\n- modulename \tthe name of the module that was damaged\r\n- module \t\tthe module that was damaged (this is a module object)\r\n_}",
      "name": "Jet cone damage",
      "description": "Triggered in normal space when passing through the jet cone from a white dwarf or neutron star causes damage to a ship module",
      "default": false,
      "defaultValue": null
    },
    "Jump details": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": "{_ Jump details }\r\n{_ Triggered when ship jump details are requested }\r\n",
      "name": "Jump details",
      "description": "Triggered when ship jump details are requested",
      "default": false,
      "defaultValue": null
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Jumped\")}\r\n\r\n{_ Jumped }\r\n{_ Triggered when you complete a jump to another system }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n{SetState('eddi_context_wanted_list', \"\")}\r\n{SetState('systemlowvalue', state.systemlowvalue = 0)}\r\n{SetState('systemhighvalue', state.systemhighvalue = 0)}\r\n\r\n{SetState (scanfirst to 0)}\r\n\r\n{set jump_count to state.eddi_context_remaining_jumps}\r\n{if jump_count > 20  \t: {set occasional to ceil(jump_count / 10)}\r\n|elif jump_count > 5 \t: {set occasional to 2}\r\n|else\t\t\t\t\t: {set occasional to 1}\r\n}\r\n\r\n{if destinationsystem && destinationsystem.name != \"\":\r\n    {if destinationdistance = 0 :\r\n        {ShipName()} ist im {P(destinationsystem.name)} angekommen.\r\n        {Pause(1000)}\r\n        {set next_system to RouteDetails(\"update\")}\r\n    |else:\r\n        {if rand(occasional) = 0 :\r\n            Die Entfernung zum {P(destinationsystem.name, \"Sternensystem\")} beträgt {round(destinationdistance, 1)} Lichtjahre\r\n            {if jump_count > 0 :\r\n                , noch {if jump_count = 1 : ein |else: {jump_count}} {if jump_count = 1: Sprung |else: Sprünge}\r\n                {OneOf(\"offen\", \"bis zum Ziel\", \"bis zur Ankunft\")}\r\n            }.\r\n        }\r\n    }\r\n|else:\r\n\t{if\tjump_count != void && jump_count > 0 && rand(occasional) = 0 :\r\n        {Occasionally(2, \"Wir haben noch\")} {if jump_count = 1 : einen |else: {jump_count}} {if jump_count = 1: Sprung |else: Sprünge} \r\n        {OneOf(\"offen\", \"bis zum Ziel\", \"bis zur Ankunft\")}.\r\n    }\r\n}\r\n\r\n{_ Check fuel levels _}\r\n{F('JumpFuel')} \t\t\t\t{_ oder F('Fuel check') wäre auch möglich _}\r\n\r\n{_ Report faction states only if it's been more than an hour (3600 seconds) since our last visit. _}\r\n{if SecondsSince(state.eddi_context_system_lastvisit) / 3600 > 1 :\r\n    {set state_report to F(\"System state report\")}\r\n    {set state_report to F(\"Check HGS\")}\r\n    {set security_report to F(\"Security presence report\")}\r\n}\r\n\r\n{set system_missions to F(\"Mission check system\")}\r\n{set system_crimes to F(\"Crime check system\")}\r\n\r\n{if state_report || system_missions || (system_crimes && find(system_crimes, \"Warning\") < 0):\r\n    {Pause(500)}\r\n    Info zum System:\r\n}\r\n\r\n{if state_report\t: {Pause(500)} {state_report}\r\n}\r\n{if security_report\t: {Pause(500)} {security_report}\r\n}\r\n{if system_missions\t: {Pause(500)} {system_missions}\r\n}\r\n{if system_crimes\t: {Pause(500)} {system_crimes}\r\n}\r\n\r\n{F(\"Cargo legality check\")}\r\n\r\n{_\r\n- system \t\t\tThe name of the system to which the commander has jumped\r\n- x \t\t\t\tThe X co-ordinate of the system to which the commander has jumped\r\n- y \t\t\t\tThe Y co-ordinate of the system to which the commander has jumped\r\n- z \t\t\t\tThe Z co-ordinate of the system to which the commander has jumped\r\n- star \t\t\t\tThe name of the star at which you've arrived\r\n- distance \t\t\tThe distance the commander has jumped, in light years\r\n- fuelused \t\t\tThe amount of fuel used in this jump\r\n- fuelremaining \tThe amount of fuel remaining after this jump\r\n- allegiance \t\tThe allegiance of the system to which the commander has jumped\r\n- faction \t\t\tThe faction controlling the system to which the commander has jumped\r\n- factionstate \t\tThe state of the faction controlling the system to which the commander has jumped\r\n- economy \t\t\tThe economy of the system to which the commander has jumped\r\n- economy2 \t\t\tThe secondary economy of the system to which the commander has jumped, if any\r\n- government \t\tThe government of the system to which the commander has jumped\r\n- security \t\t\tThe security of the system to which the commander has jumped\r\n- population \t\tThe population of the system to which the commander has jumped\r\n- factions \t\t\tA list of faction objects describing the factions in the star system\r\n- conflicts \t\tA list of conflict objects describing any conflicts between factions in the star system\r\n- power \t\t\t(Only when pledged) The powerplay power exerting influence over the star system. \r\n\t\t\t\t\tIf the star system is `Contested`, this will be empty\r\n- powerstate \t\t(Only when pledged) The state of powerplay efforts within the star system\r\n_}\r\n\r\n",
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system",
      "default": false,
      "defaultValue": "{_ Jumped }\r\n{_ Triggered when you complete a jump to another system }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n{SetState('eddi_context_wanted_list', \"\")}\r\n\r\n{set jump_count to state.eddi_context_remaining_jumps}\r\n{if jump_count > 20:\r\n    {set occasional to ceil(jump_count / 10)}\r\n|elif jump_count > 5:\r\n    {set occasional to 2}\r\n|else:\r\n    {set occasional to 1}\r\n}\r\n\r\n{if destinationsystem && destinationsystem.name != \"\":\r\n    {if destinationdistance = 0:\r\n        {ShipName()} has arrived at the {P(destinationsystem.name, \"starsystem\")} system.\r\n        {Pause(1000)}\r\n        {set next_system to RouteDetails(\"update\")}\r\n    |else:\r\n        {if rand(occasional) = 0:\r\n            Distance to {P(destinationsystem.name, \"starsystem\")} is {round(destinationdistance, 1)} light years\r\n            {if jump_count > 0:\r\n                , with {jump_count} {if jump_count = 1: jump |else: jumps}\r\n                {OneOf(\"remaining\", \"left\", \"to go\")}\r\n            }.\r\n        }\r\n    }\r\n|else:\r\n    {if  jump_count > 0 && rand(occasional) = 0:\r\n        {Occasionally(2, \"You have\")} {jump_count} {if jump_count = 1: jump |else: jumps} \r\n        {OneOf(\"remaining\", \"left\", \"to go\", \"until arrival\")}.\r\n    }\r\n}\r\n\r\n{F('Fuel check')}\r\n\r\n{_ Report faction states only if it's been more than an hour (3600 seconds) since our last visit. _}\r\n{if SecondsSince(state.eddi_context_system_lastvisit) / 3600 > 1:\r\n    {set state_report to F(\"System state report\")}\r\n}\r\n\r\n{set system_missions to F(\"Mission check system\")}\r\n{set system_crimes to F(\"Crime check system\")}\r\n\r\n{if state_report || system_missions || (system_crimes && find(system_crimes, \"Warning\") < 0):\r\n    {Pause(500)}\r\n    Information:\r\n}\r\n\r\n{if state_report:\r\n    {Pause(500)}\r\n    {state_report}\r\n}\r\n{if system_missions:\r\n    {Pause(500)}\r\n    {system_missions}\r\n}\r\n{if system_crimes:\r\n    {Pause(500)}\r\n    {system_crimes}\r\n}\r\n"
    },
    "JumpFuel": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: JumpFuel\")}\n\n{_ Report fuel level for max range jumps remaining}\n\n{set fuelremaining to state.eddi_context_fuel_remaining}\n{set class to ship.frameshiftdrive.class}\n{set grade to ship.frameshiftdrive.grade}\n{set fuellevel to round((fuelremaining/ship.fueltanktotalcapacity)*100,1)}\n\n{if grade='E' || grade='D' || grade='C':\n    {if class=2: {set maxfuel to 0.6}\n    |elif class=3: {set maxfuel to 1.2}\n    |elif class=4: {set maxfuel to 2.0}\n    |elif class=5: {set maxfuel to 3.3}\n    |elif class=6: {set maxfuel to 5.3}\n    |elif class=7 || class=8: {set maxfuel to 8.5}\n    }\n|elif grade='B':\n    {if class=2: {set maxfuel to 0.8}\n    |elif class=3: {set maxfuel to 1.5}\n    |elif class=4: {set maxfuel to 2.5}\n    |elif class=5: {set maxfuel to 4.1}\n    |elif class=6: {set maxfuel to 6.6}\n    |elif class=7 || class=8: {set maxfuel to 10.6}\n    }\n|elif grade='A':\n    {if class=2: {set maxfuel to 0.9}\n    |elif class=3: {set maxfuel to 1.8}\n    |elif class=4: {set maxfuel to 3.0}\n    |elif class=5: {set maxfuel to 5.0}\n    |elif class=6: {set maxfuel to 8.0}\n    |elif class=7 || class=8: {set maxfuel to 12.8}\n    }\n}\n\n{set maxjump to fuelremaining/maxfuel}\n\n{if fuellevel < 25: Warnung;\n|elif fuellevel < 50: Achtung;\n}\n\n{set trim to fuellevel}\n{F(\"ZeroTrim\")}\n{set fuellevel to trim}\n\n{if fuellevel < 50:\nTreibstoff {OneOf(\"vorrat\",\"reserven\")} bei {fuellevel}% {Occasionally(\"Kapazität\")}\n}\n\n{if maxjump < 1:\n   {OneOf(\"Wir haben nicht genug Treibstoff für die maximale Sprungreichweite\",\"zu wenig Treibstoff\")}.\n   Auftanken {OneOf(\"so schnell wie möglich\",\"bei der {OneOf('ersten','nächsten')} Gelegenheit\")}\n|elif maxjump < 2: \r\n   {OneOf(\"Wir haben Treibstoff für nur noch einen Sprung mit maximaler Reichweite\",\r\n          \"Treibstoff langt nur noch für einen weiteren Sprung\")}\n}",
      "name": "JumpFuel",
      "description": "Reichweite mit vorhandenem Treibstoff",
      "default": false,
      "defaultValue": null
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Killed\")}\n\n{Occasionally(3, \"Das\")} Schiff des {OneOf(\"Rang\",\"Klasse\")}\n\n{  if event.rating = \"Harmless\"        : 0\n|elif event.rating = \"Mostly Harmless\" : 1\n|elif event.rating = \"Novice\"          : 2\n|elif event.rating = \"Competent\"       : 3\n|elif event.rating = \"Expert\"          : 4\n|elif event.rating = \"Master\"          : 5\n|elif event.rating = \"Dangerous\"       : 6\n|elif event.rating = \"Deadly\"          : 7\n|elif event.rating = \"Elite\"           : 8\n} \n\nKomm mahnders {Occasionally(2, event.name)} wurde\n{OneOf(\"terminiert\",\"erledigt\",\"ausgelöscht\",\"vernichtet\")}.\n\n{_\n- victim \tThe name of the player killed\n- rating \tThe combat rating of the player killed\n_}",
      "name": "Killed",
      "description": "Triggered when you kill another player",
      "default": false,
      "defaultValue": null
    },
    "Landing gear": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Landing gear\")}\r\n\r\n{Pause(1000)}\r\n\r\n{if status.vehicle = \"Ship\": {OneOf(\"Fahrwerk\", \"Landestützen\")} \r\n\t{if event.deployed: ausgefahren\r\n\t|else             : eingefahren\r\n\t}.\r\n}\r\n\r\n{_ - deployed A boolean value. True if your landing gear is deployed. _}",
      "name": "Landing gear",
      "description": "Triggered when you deploy or retract your landing gear",
      "default": false,
      "defaultValue": null
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Landing pad report\")}\r\n\r\n{_ fetch from Context }\r\n{set landingpad to state.eddi_context_landing_pad_pad}\r\n{set station to StationDetails(state.eddi_context_landing_pad_station)}\r\n\r\n{LOC(event.stationDefinition.basename)}\r\n{if event.stationDefinition.basename = \"Coriolis\" ||\r\n\tevent.stationDefinition.basename = \"Ocellus\" ||\r\n    event.stationDefinition.basename = \"Orbis\" || \r\n    event.stationDefinition.basename = \"Bernal\" || \r\n    event.stationDefinition.basename = \"AsteroidBase\":\r\n    {  if landingpad =  1: {set pos to \"06v\"}\r\n    |elif landingpad =  2: {set pos to \"06v\"}\r\n    |elif landingpad =  3: {set pos to \"06h\"}\r\n    |elif landingpad =  4: {set pos to \"06h\"}\r\n    |elif landingpad =  5: {set pos to \"07v\"}\r\n    |elif landingpad =  6: {set pos to \"07v\"}\r\n    |elif landingpad =  7: {set pos to \"07m\"}\r\n    |elif landingpad =  8: {set pos to \"07h\"}\r\n    |elif landingpad =  9: {set pos to \"08v\"}\r\n    |elif landingpad = 10: {set pos to \"08h\"}\r\n    |elif landingpad = 11: {set pos to \"09v\"}\r\n    |elif landingpad = 12: {set pos to \"09v\"}\r\n    |elif landingpad = 13: {set pos to \"09m\"}\r\n    |elif landingpad = 14: {set pos to \"09h\"}\r\n    |elif landingpad = 15: {set pos to \"09h\"}\r\n    |elif landingpad = 16: {set pos to \"10v\"}\r\n    |elif landingpad = 17: {set pos to \"10v\"}\r\n    |elif landingpad = 18: {set pos to \"10h\"}\r\n    |elif landingpad = 19: {set pos to \"10h\"}\r\n    |elif landingpad = 20: {set pos to \"11v\"}\r\n    |elif landingpad = 21: {set pos to \"11v\"}\r\n    |elif landingpad = 22: {set pos to \"11m\"}\r\n    |elif landingpad = 23: {set pos to \"11h\"}\r\n    |elif landingpad = 24: {set pos to \"12v\"}\r\n    |elif landingpad = 25: {set pos to \"12h\"}\r\n    |elif landingpad = 26: {set pos to \"01v\"}\r\n    |elif landingpad = 27: {set pos to \"01v\"}\r\n    |elif landingpad = 28: {set pos to \"01m\"}\r\n    |elif landingpad = 29: {set pos to \"01h\"}\r\n    |elif landingpad = 30: {set pos to \"01h\"}\r\n    |elif landingpad = 31: {set pos to \"02v\"}\r\n    |elif landingpad = 32: {set pos to \"02v\"}\r\n    |elif landingpad = 33: {set pos to \"02h\"}\r\n    |elif landingpad = 34: {set pos to \"02h\"}\r\n    |elif landingpad = 35: {set pos to \"03v\"}\r\n    |elif landingpad = 36: {set pos to \"03v\"}\r\n    |elif landingpad = 37: {set pos to \"03m\"}\r\n    |elif landingpad = 38: {set pos to \"03h\"}\r\n    |elif landingpad = 39: {set pos to \"04v\"}\r\n    |elif landingpad = 40: {set pos to \"04h\"}\r\n    |elif landingpad = 41: {set pos to \"05v\"}\r\n    |elif landingpad = 42: {set pos to \"05v\"}\r\n    |elif landingpad = 43: {set pos to \"05m\"}\r\n    |elif landingpad = 44: {set pos to \"05h\"}\r\n    |elif landingpad = 45: {set pos to \"05h\"}\r\n    }\r\n\r\n    {set clock to cast(slice(pos, 0,2), \"n\")}\r\n    {  if slice(pos, 2,1) = \"v\": {set pos to \"vordere\"}\r\n    |elif slice(pos, 2,1) = \"m\": {set pos to \"mittlere\"}\r\n    |elif slice(pos, 2,1) = \"h\": {set pos to \"hintere\"}\r\n    }\r\n\r\n    {  if clock =  3               : {set loc to \"an steuerbord\"}\r\n    |elif clock <  3 && clock > 12 : {set loc to \"im ersten Quadranten\"}\r\n    |elif clock = 12               : {set loc to \"oben\"}\r\n    |elif clock < 12 && clock >  9 : {set loc to \"im zweiten Quadranten\"}\r\n    |elif clock =  9               : {set loc to \"an backbord\"}\r\n    |elif clock <  9 && clock >  6 : {set loc to \"im dritten Quadranten\"}\r\n    |elif clock =  6               : {set loc to \"unten\"}\r\n    |elif clock <  6 && clock >  3 : {set loc to \"im vierten Quadranten\"}\r\n    }\r\n\r\n{Pause(6000)}\r\n\r\n    {OneOf(\"Lande {OneOf('Pad','Bucht','Platz')} {landingpad} befindet sich auf {clock}Uhr {pos}r Andockbereich\",\r\n           \"Sie Finden Lande {OneOf('Pad','Bucht','Platz')} {landingpad} {OneOf('auf {clock}Uhr im {pos}n','{loc}, {pos}r')} Stationsbereich\")}\r\n\r\n    {Occasionally(4, \", grüne Schleusen Markierungen {OneOf('zu Ihrer Rechten','an Steuerbord','an der Steuerbord Seite')}\")}.\r\n\r\n    {if pos = \"vorddere\" && event.musictrack != \"Starport\":\r\n        Vorsicht: Andock {OneOf('Pad','Bucht','Platz')} unmittelbar hinter {Occasionally(2, \"der\")} Luftschleuse!\r\n    }\r\n|elif landingpad:\r\n    {OneOf(\"Sie haben die {OneOf('Andockerlaubnis','Freigabe')} für Lande {OneOf('Bucht','Pad','Rampe','Platz')} {landingpad}\",\r\n           \"Ihnen wurde {OneOf('Bucht','Pad','Rampe','Platz')} {landingpad} {OneOf('zur Landung','zum Andocken','für den Andockvorgang')}\r\n           {OneOf('zugeteilt','zugewiesen','freigegeben')}\",\r\n           \"Bitte begeben Sie sich zu Andock {OneOf('Bucht','Pad','Rampe','Platz')} {landingpad}\")}, {F(\"Honorific\")}.\r\n|else:\r\n    Es liegt gegenwärtig keine Andockerlaubnis vor {F(\"Honorific\")}.\r\n}",
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad",
      "default": false,
      "defaultValue": "{set landingpad to state.eddi_context_landing_pad_pad}\r\nLanding pad {landingpad} is at\r\n{if landingpad = 1:\r\n    six o'clock near\r\n|elif landingpad = 2:\r\n    six o'clock near\r\n|elif landingpad = 3:\r\n    six o'clock far\r\n|elif landingpad = 4:\r\n    six o'clock far\r\n|elif landingpad = 5:\r\n    seven o'clock near\r\n|elif landingpad = 6:\r\n    seven o'clock near\r\n|elif landingpad = 7:\r\n    seven o'clock far\r\n|elif landingpad = 8:\r\n    seven o'clock far\r\n|elif landingpad = 9:\r\n    eight o'clock near\r\n|elif landingpad = 10:\r\n    eight o'clock far\r\n|elif landingpad = 11:\r\n    nine o'clock near\r\n|elif landingpad = 12:\r\n    nine o'clock near\r\n|elif landingpad = 13:\r\n    nine o'clock mid\r\n|elif landingpad = 14:\r\n    nine o'clock far\r\n|elif landingpad = 15:\r\n    nine o'clock far\r\n|elif landingpad = 16:\r\n    ten o'clock near\r\n|elif landingpad = 17:\r\n    ten o'clock near\r\n|elif landingpad = 18:\r\n    ten o'clock far\r\n|elif landingpad = 19:\r\n    ten o'clock far\r\n|elif landingpad = 20:\r\n    eleven o'clock near\r\n|elif landingpad = 21:\r\n    eleven o'clock near\r\n|elif landingpad = 22:\r\n    eleven o'clock far\r\n|elif landingpad = 23:\r\n    eleven o'clock far\r\n|elif landingpad = 24:\r\n    twelve o'clock near\r\n|elif landingpad = 25:\r\n    twelve o'clock far\r\n|elif landingpad = 26:\r\n    one o'clock near\r\n|elif landingpad = 27:\r\n    one o'clock near\r\n|elif landingpad = 28:\r\n    one o'clock mid\r\n|elif landingpad = 29:\r\n    one o'clock far\r\n|elif landingpad = 30:\r\n    one o'clock far\r\n|elif landingpad = 31:\r\n    two o'clock near\r\n|elif landingpad = 32:\r\n    two o'clock near\r\n|elif landingpad = 33:\r\n    two o'clock far\r\n|elif landingpad = 34:\r\n    two o'clock far\r\n|elif landingpad = 35:\r\n    three o'clock near\r\n|elif landingpad = 36:\r\n    three o'clock near\r\n|elif landingpad = 37:\r\n    three o'clock mid\r\n|elif landingpad = 38:\r\n    three o'clock far\r\n|elif landingpad = 39:\r\n    four o'clock near\r\n|elif landingpad = 40:\r\n    four o'clock far\r\n|elif landingpad = 41:\r\n    five o'clock near\r\n|elif landingpad = 42:\r\n    five o'clock near\r\n|elif landingpad = 43:\r\n    five o'clock mid\r\n|elif landingpad = 44:\r\n    five o'clock far\r\n|elif landingpad = 45:\r\n    five o'clock far\r\n}\r\n, as you enter with the green lights on your right.\r\n\r\n"
    },
    "Launchbay report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Launchbay report\")}\r\n\r\n{if capi_active:\r\n    {if len(ship.launchbays) > 0:\r\n        {set hanger_count to 0}\r\n        {for launchbay in ship.launchbays:\r\n            {set hangar to: Größe {launchbay.size} {P(launchbay.type)} Hangar,}\r\n            {set hangar_count to hangar_count + 1}\r\n            {set vehicles to []}\r\n            {set vehicles_count to []}\r\n            {if len(launchbay.vehicles) > 0:\r\n                {for vehicle in launchbay.vehicles:\r\n                    {set variant to cat(vehicle.name, \"_\", vehicle.description)}\r\n                    {set here to find(vehicles , variant)}\r\n                    {if here > -1:\r\n                        {set count to vehicles_count[here] + 1}\r\n                        {set vehicles_count to union(vehicles_count, [here:count])}\r\n                    |else:\r\n                        {set vehicles to cat(vehicles , [variant])}\r\n                        {set vehicles_count to cat(vehicles_count, [1])}\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(vehicles) > 0:\r\n                {if hangar_count = 1: Wir haben |else: und} einen {hangar} mit\r\n                {set cur to 0}\r\n                {while cur < len(vehicles):\r\n                    {set count to vehicles_count[cur]}\r\n                    {set name to split(vehicles[cur], \"_\")[0]}\r\n                    {set description to split(vehicles[cur], \"_\")[1]}\r\n                    {if count = 1: einem {P(name)} |else: {count} {P(name)}s} dabei {description}\r\n                    {set cur to cur + 1}\r\n                    {if cur = len(vehicles)-1: und |elif cur < len(vehicles): ,}\r\n                }\r\n            |else:\r\n                {if hangar_count = 1: Wir haben |else: und} einen leeren {hangar}\r\n                Wir haben einen leeren {hangar}\r\n            }\r\n            {if hangar_count = len(ship.launchbays): . |else: ,}\r\n        }\r\n    }\r\n|else:\r\n    Hangar status ist nicht verfügbar.\r\n    {Pause(500)}\r\n    Bitte die Verbindung zur Datenbank der Pilotenvereinigung überprüfen.\r\n}",
      "name": "Launchbay report",
      "description": "Describes the contents of each launchbay in the ship",
      "default": false,
      "defaultValue": "{if capi_active:\r\n    {if len(ship.launchbays) > 0:\r\n        {set hanger_count to 0}\r\n        {for launchbay in ship.launchbays:\r\n            {set hangar to: \r\n                size {launchbay.size} \r\n                {if launchbay.type = \"SRV\": \r\n                    {Spacialise(launchbay.type)} hangar\r\n                |else: \r\n                    {launchbay.type} hangar\r\n                }\r\n            }\r\n            {set hangar_count to hangar_count + 1}\r\n            {set vehicles to []}\r\n            {set vehicles_count to []}\r\n            {if len(launchbay.vehicles) > 0:\r\n                {for vehicle in launchbay.vehicles:\r\n                    {set variant to cat(vehicle.name, \"_\", vehicle.description)}\r\n                    {set here to find(vehicles , variant)}\r\n                    {if here > -1:\r\n                        {set count to vehicles_count[here] + 1}\r\n                        {set vehicles_count to union(vehicles_count, [here:count])}\r\n                    |else:\r\n                        {set vehicles to cat(vehicles , [variant])}\r\n                        {set vehicles_count to cat(vehicles_count, [1])}\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(vehicles) > 0:\r\n                {if hangar_count = 1: You have |else: and} a {hangar}, holding\r\n                {set cur to 0}\r\n                {while cur < len(vehicles):\r\n                    {set count to vehicles_count[cur]}\r\n                    {set name to split(vehicles[cur], \"_\")[0]}\r\n                    {set description to split(vehicles[cur], \"_\")[1]}\r\n                    {count} {if count = 1: {name} |else: {name}s}, with {description}\r\n                    {set cur to cur + 1}\r\n                    {if cur = len(vehicles)-1: and |elif cur < len(vehicles): ,}\r\n                }\r\n            |else:\r\n                {if hangar_count = 1: You have |else: and} an empty {hangar}\r\n            }\r\n            {if hangar_count = len(ship.launchbays): . |else: ,}\r\n        }\r\n    }\r\n|else:\r\n    Hangar status is not available.\r\n    {Pause(500)}\r\n    Please verify connection to the pilots federation database.\r\n}\r\n"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Liftoff\")}\r\n\r\n{Pause(1000)}\r\n{if event.playercontrolled = true:\r\n  {OneOf(\"Voller Schuhb\",\"Schuubdüsen auf volle Kraft\",\"Triebwerke gestartet\")},\r\n  {Pause(250)}\r\n  Wir haben abgehoben..\r\n|else:\r\n  {ShipName()} ist gestartet und begibt sich in den Orbit.\r\n}\r\n\r\n{_ Ship model, Fighter and SRV Check _}\r\n{_ F(\"Hangar check\")}\r\n\r\n{_\r\n- longitude \t\t\tThe longitude from where the ship has lifted off\r\n- latitude\t\t\t\tThe latitude from where the ship has lifted off\r\n- playercontrolled \t\tTrue if the ship is controlled by the player\r\n- nearestdestination \tThe nearest location from where the ship has lifted off\r\n_}",
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface",
      "default": false,
      "defaultValue": "{if event.playercontrolled = true:\r\n  Lift off.\r\n|else:\r\n  {ShipName()} has lifted off.\r\n}"
    },
    "Lights": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Lights\")}\r\n\r\n{OneOf(\"Beleuchtung\", \"Scheinwerfer\")} \r\n{  if event.lightson: ein\r\n|else               : aus\r\n}.\r\n\r\n{_ - lightson A boolean value. True if your lights are on. _}",
      "name": "Lights",
      "description": "Triggered when you activate or deactivate your lights",
      "default": false,
      "defaultValue": null
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Limpet check\")}\r\n\r\n{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Steuerung\") != -1\t\t\t: {set controllers to controllers + 1}\r\n    |elif find(compartment.module.name, \"Steuereinheit\") != -1\t\t: {set controllers to controllers + 1}\r\n    |elif find(compartment.module.name, \"Drohnensteuerung\") != -1\t: {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in inventory:\r\n    {if cargo.edname = \"Drohne\"\t\t: {set limpets to cargo.total}\r\n    |elif cargo.edname = \"Drohnen\"\t: {set limpets to cargo.total}\r\n    |elif cargo.edname = \"Drones\"\t: {set limpets to cargo.total}\r\n    }\r\n}\r\n\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Zur Erinnerung: Wir haben einen Drohnen Kontroler verbaut, aber keine Drohnen geladen.\r\n|elif controllers = 0 && limpets > 0:\r\n    Wir haben Drohnen geladen, jedoch keinen Drohnen Kontroler verbaut.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    Es sind nur noch {set value to limpets} {F(\"Humanise ValueGer\")} \r\n    Drohnen an Bord. Sie sollten eine Aufstockung des Drohnen Vorrats in Erwägung ziehen.\r\n}",
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers",
      "default": false,
      "defaultValue": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Controller\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in inventory:\r\n    {if cargo.edname = \"Drones\":\r\n        {set limpets to cargo.total}\r\n    }\r\n}\r\n\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Reminder: you have a limpet controller but are not carrying any limpets.\r\n|elif controllers = 0 && limpets > 0:\r\n    You are carrying limpets but no limpet controller.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    You only have {limpets} {if limpets = 1: limpet |else: limpets} on-board; you might want to consider re-stocking.\r\n}\r\n"
    },
    "Limpet launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EVENT: Limpet launched\")}\r\n\r\n{if event.kind = \"Collection\": Sammeldrohne\r\n|elif event.kind = \"Hatchbreaker\": Lukenöffnerdrohne\r\n|elif event.kind = \"FuelTransfer\": Treibstofftransferdrohne\r\n|elif event.kind = \"Prospector\": Erzsucherdrohne\r\n|elif event.kind = \"Repair\": Reparaturdrohne\r\n|elif event.kind = \"Decontamination\": Entseuchungsdrohne\r\n|elif event.kind = \"Research\": Forschungsdrohne\r\n|else: {OneOf('Drohne','Roboter')}\r\n}\r\ngestartet.\r\n\r\n{_ inventory[0].name}\r\n\r\n{_ - kind \tThe kind of limpet launched,\r\n\t\t\t\"Hatchbreaker\", \"FuelTransfer\", \"Collection\", \"Prospector\", \"Repair\", \r\n\t\t\t\"Research\", \"Decontamination\"\r\n_}",
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched",
      "default": false,
      "defaultValue": "{OneOf('Drone','Limpet')} launched."
    },
    "Limpet launched neu": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Limpet launched\")}\r\n\r\n{if event.kind = \"Collection\": Sammeldrohne\r\n|elif event.kind = \"Hatchbreaker\": Lukenöffnerdrohne\r\n|elif event.kind = \"FuelTransfer\": Treibstofftransferdrohne\r\n|elif event.kind = \"Prospector\": Erzsucherdrohne\r\n|elif event.kind = \"Repair\": Reparaturdrohne\r\n|elif event.kind = \"Decontamination\": Entseuchungsdrohne\r\n|elif event.kind = \"Research\": Forschungsdrohne\r\n|else: {OneOf('Drohne','Roboter')}\r\n}\r\ngestartet.\r\n\r\n{_ inventory[0].name}\r\n\r\n{_ -kind\t\"Hatchbreaker\", \"FuelTransfer\", \"Collection\", \"Prospector\", \r\n\t\t\t\"Repair\", \"Research\", \"Decontamination\"\r\n_}",
      "name": "Limpet launched neu",
      "description": "Triggered when a limpet is launched",
      "default": false,
      "defaultValue": null
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Limpet purchased\")}\r\n\r\n{if event.amount = 1: Eine |else: {event.amount}} Drohne{if event.amount > 1:n}\r\n{if event.amount = 1: wurde |else: {Occasionally(2, \"wurden\")}}\r\n\r\n{OneOf(\"unserem\", \"{ShipName()}s\")}\r\n{OneOf(\"Frachtraum\", \"Inventar\")} hinzugefügt.\r\n\r\n{_\r\n- amount \tThe amount of limpets purchased\r\n- price \tThe price paid per limpet\r\n_}",
      "name": "Limpet purchased",
      "description": "Triggered when you buy limpets from a station",
      "default": false,
      "defaultValue": "{event.amount} limpet{if event.amount > 1:s}\r\n{Occasionally(2, \"{if event.amount = 1: has |else: have} been\")}\r\nadded to \r\n{OneOf(\"our\", \"{ShipName()}'s\")}\r\n{OneOf(\"cargo hold\", \"inventory\", \"hold\")}"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Limpet sold\")}\r\n\r\n{if event.amount = 1: Eine |else: {event.amount}} Drohne{if event.amount > 1:n}\r\n{if event.amount = 1: wurde |else: {Occasionally(2, \"wurden\")}} verkauft.\r\n\r\n{_\r\n- amount \tThe amount of limpets purchased\r\n- price \tThe price paid per limpet\r\n_}\r\n",
      "name": "Limpet sold",
      "description": "Triggered when you sell limpets to a station",
      "default": false,
      "defaultValue": "{event.amount} limpet{if event.amount > 1:s}\r\n{Occasionally(2, \"{if event.amount = 1: has |else: have} been\")} sold."
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Location\")}\r\n\r\n{_ Context _}\r\n{SetState('eddi_context_last_subject', 'location')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_type', event.bodytype)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{set reportBody to BodyDetails(event.body, event.system)}\r\n\r\nWir befinden uns\r\n{if event.docked || event.station = event.body:\r\n    {set station to StationDetails(event.station, event.system)}\r\n    {set station_missions to F(\"Mission check station\")}\r\n    {set station_crimes to F(\"Crime check station\")}\r\n\r\n    {if event.docked: angedockt auf\r\n    |else: {OneOf(\"in der Nähe von\", \"bei\", \"in Sichtweite von\")}\r\n    }\r\n    \r\n    {if event.station = event.body: der orbital station {P(event.station)},\r\n    |elif event.stationtype = \"Carrier\" || event.stationtype = \"FleetCarrier\": dem Flottenträger\r\n    {set translate to (station.name)} {F('Translate FleetCarrier')} {_ oder event.station _}\r\n    |else: der Bodenstation {P(event.station)} auf {reportBody.bodytype} {P(reportBody.shortname)},\r\n    }\r\n\r\n|elif event.body:\r\n    {set system_missions to F(\"Mission check system\")}\r\n    {set system_crimes to F(\"Crime check system\")}\r\n    \r\n    {if event.longitude || event.latitude: auf\r\n    |else: {OneOf(\"in der Nähe von\", \"bei\", \"in Sicht von\")}\r\n    }\r\n    {if reportBody.shortname = event.system: des Primärgestirns,\r\n    |elif reportBody.bodytype: {reportBody.bodytype} {P(reportBody.shortname)},\r\n    |else: {event.body}\r\n    }\r\n    \r\n|else:\r\n    im deep space,\r\n    {set system_missions to F(\"Mission check system\")}\r\n    {set system_crimes to F(\"Crime check system\")}\r\n}\r\nim System: {P(event.system)},\r\n\r\n\r\n{if station_missions || station_crimes || system_missions || system_crimes:\r\n    {Pause(500)}\r\n    Infos:\r\n    {if station_missions:\r\n        {Pause(500)}\r\n        {station_missions}\r\n    }\r\n    {if station_crimes:\r\n        {Pause(500)}\r\n        {station_crimes}\r\n    }\r\n    {if system_missions:\r\n        {Pause(500)}\r\n        {system_missions}\r\n    }\r\n    {if system_crimes:\r\n        {Pause(500)}\r\n        {system_crimes}\r\n    }\r\n}\r\n\r\n{if (ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\") && !event.docked:\r\n    {Pause(500)}\r\n    {F(\"Bodies Exploration Report\")}\r\n}\r\n\r\n{if vehicle = \"Ship\"\t\t: {SetState(\"use_srv\", false)}\r\n|elif vehicle = \"SRV\"\t: {SetState(\"use_srv\", true)}\r\n|else:\r\n}\r\n\r\n{_\r\n- systemname        The name of the system in which the commander resides\r\n- x                 The X co-ordinate of the system in which the commander resides\r\n- y                 The Y co-ordinate of the system in which the commander resides\r\n- z                 The Z co-ordinate of the system in which the commander resides\r\n- distancefromstar  The distance of the nearest body (when close) from the main star\r\n- bodyname          The nearest body to the commander\r\n- bodytype          The type of the nearest body to the commander\r\n- docked            True if the commander is docked\r\n- station           The name of the station at which the commander is docked\r\n- marketId          The market ID of the station at which the commander is docked\r\n- stationtype       The type of the station at which the commander is docked\r\n- systemfaction     The faction controlling the system in which the commander resides\r\n- systemstate       The state of the faction controlling the system in which the commander resides\r\n- systemgovernment  The government of the system in which the commander resides\r\n- stationfaction    The faction controlling the station, if the commander is docked\r\n- stationstate      The state of the faction controlling the station, if the commander is docked\r\n- stationgovernment The government of the station, if the commander is docked\r\n- stationallegiance The government of the station, if the commander is docked\r\n- economy           The economy of the system in which the commander resides\r\n- economy2          The secondary economy of the system in which the commander resides, if any\r\n- security          The security of the system in which the commander resides\r\n- longitude         The longitude of the commander (if on the ground)\r\n- latitude          The latitude of the commander (if on the ground)\r\n- population        The population of the system to which the commander has jumped\r\n- power \t\t\t(Only when pledged) The powerplay power exerting influence over the star system. \r\n\t\t\t\t\tIf the star system is `Contested`, this will be empty\r\n- powerstate \t\t(Only when pledged) The state of powerplay efforts within the star system\r\n_}",
      "name": "Location",
      "description": "Triggered when the commander's location is reported, usually when they reload their game.",
      "default": false,
      "defaultValue": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'location')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_type', event.bodytype)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n\r\nYou are\r\n{if event.docked || event.station = event.body:\r\n    {set station to StationDetails(event.station, event.system)}\r\n    {set station_missions to F(\"Mission check station\")}\r\n    {set station_crimes to F(\"Crime check station\")}\r\n\r\n    {if event.docked:\r\n        docked at\r\n    |else:\r\n        {OneOf(\"near\", \"close to\", \"in the vicinity of\")}\r\n    }\r\n    {P(station.model, \"station\")}, {P(event.station, \"station\")},\r\n    {if event.station != event.body:\r\n        on {P(event.body, \"body\")},\r\n    }\r\n|elif event.body:\r\n    {set system_missions to F(\"Mission check system\")}\r\n    {set system_crimes to F(\"Crime check system\")}\r\n    {OneOf(\"near\", \"close to\", \"in the vicinity of\")} {P(event.body, \"body\")},\r\n}\r\nin the {P(event.system, \"starsystem\")} system.\r\n\r\n{if station_missions || station_crimes ||system_missions || system_crimes:\r\n    {Pause(500)}\r\n    Information:\r\n    {if station_missions:\r\n        {Pause(500)}\r\n        {station_missions}\r\n    }\r\n    {if station_crimes:\r\n        {Pause(500)}\r\n        {station_crimes}\r\n    }\r\n    {if system_missions:\r\n        {Pause(500)}\r\n        {system_missions}\r\n    }\r\n    {if system_crimes:\r\n        {Pause(500)}\r\n        {system_crimes}\r\n    }\r\n}"
    },
    "Low fuel": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Low fuel",
      "description": "Triggered when your fuel level falls below 25%.",
      "default": true,
      "defaultValue": null
    },
    "Market": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI EVENT: Market\")}",
      "name": "Market",
      "description": "Triggered when the Market.json file has been updated",
      "default": false,
      "defaultValue": null
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Market information updated\")}\n\n{_ status.gui_focus}\n\n{if len(event.updates) > 1 :\n    {set type to \"Stations,\"}\n    {if ship.role = \"Mehrzweckdienste\" || ship.role = \"Handel\":\n        {set purchasecheck to F(\"Commodity purchase check\")}\n    }\n    {set salecheck to F(\"Commodity sale check\")}\n    {set swapoutcheck to F(\"Swapout check\")}\n|elif event.updates[0] = \"Market\" || event.updates[0] = \"market\":\n    {set type to OneOf(\"Markt\", \"Lokale Markt\")}\n    {if ship.role = \"Mehrzweckdienste\" || ship.role = \"Handel\":\n        {set purchasecheck to F(\"Commodity purchase check\")}\n    }\n    {set salecheck to F(\"Commodity sale check\")}\n|elif event.updates[0] = \"Outfitting\" || event.updates[0] = \"outfitting\":\n    {set type to \"Ausrüstungs\"}\n    {set swapoutcheck to F(\"Swapout check\")}\n|elif event.updates[0] = \"Shipyard\" || event.updates[0] = \"shipyard\":\n    {set type to \"Werft\"}\n}\n\n{Pause(500)}\n{if purchasecheck || salecheck || swapoutcheck:\n    {type}\n    {OneOf(\"Daten,\", \"Informationen,\",\"Angebote\", \"Änderungen\")}\n    {OneOf(\"erhalten\", \"empfangen\", \"aktualisiert\", \"aufgefrischt\", \"verglichen und korrigiert\", \"erneuert\", \"überarbeitet\", \"angepasst\")}.\n\n    {salecheck}\n    {purchasecheck}\n    {swapoutcheck}\n}\n\n{F(\"Ammo check\")}\n{F(\"Limpet check\")}\n\n{_\n- updates    A list of the updates triggering the event (which may include 'market', 'outfitting', and 'shipyard'\n_}\n",
      "name": "Market information updated",
      "description": "Triggered when market information for the currently docked station has been updated",
      "default": false,
      "defaultValue": "{_ Find out in advance what we have to say }\r\n\r\n{if len(event.updates) > 1:\r\n    {set type to \"Station services\"}\r\n    {if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n        {set purchasecheck to F(\"Commodity purchase check\")}\r\n    }\r\n    {set salecheck to F(\"Commodity sale check\")}\r\n    {set swapoutcheck to F(\"Swapout check\")}\r\n|elif event.updates[0] = \"market\":\r\n    {set type to OneOf(\"Market\", \"Local market\")}\r\n    {if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n        {set purchasecheck to F(\"Commodity purchase check\")}\r\n    }\r\n    {set salecheck to F(\"Commodity sale check\")}\r\n|elif event.updates[0] = \"outfitting\":\r\n    {set type to \"Station outfitting\"}\r\n    {set swapoutcheck to F(\"Swapout check\")}\r\n|elif event.updates[0] = \"shipyard\":\r\n    {set type to \"Station shipyard\"}\r\n}\r\n\r\n{Pause(500)}\r\n{if purchasecheck || salecheck || swapoutcheck:\r\n    {type}\r\n    {OneOf(\"data\", \"information\", \"price\")}\r\n    {OneOf(\"update\", \"refresh\", \"changes\")}\r\n    {OneOf(\"received\", \"obtained\")}.\r\n\r\n    {salecheck}\r\n    {purchasecheck}\r\n    {swapoutcheck}\r\n}\r\n{F(\"Limpet check\")}\r\n"
    },
    "Material collected": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Material collected\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\n{set matis to MaterialDetails(event.name)}\r\n\r\n\r\n{if matis.category = \"Daten\" || matis.category = \"Data\":\r\n  {matis.name} {OneOf('erhalten','gesammelt','bekommen')}.\r\n  {if matis.rarity.name = \"Standard\" ||  matis.rarity.name = \"standard\":\r\n      {Occasionally(2,\"Das ist\")} ein {matis.rarity.name} {OneOf(\"Datensatz\",\"Satz von Daten\",\"daten scan\")}.\r\n  |else:\r\n      {Occasionally(2,\"Das ist\")} ein {matis.rarity.name}er {OneOf(\"Datensatz\",\"Satz von Daten\",\"daten scan\")}.\r\n  }\r\n|elif matis.category = \"Element\":\r\n  {matis.name} {OneOf('erhalten','gesammelt','bekommen')}.\r\n  {if matis.rarity.name = \"Standard\" ||  matis.rarity.name = \"standard\":\r\n     {Occasionally(2,\"Das ist\")} ein {matis.rarity.name} {OneOf(\"Element\",\"Material\")}.\r\n  |else:\r\n     {Occasionally(2,\"Das ist\")} ein {matis.rarity.name} zu findendes {OneOf(\"Element\",\"Material\")}.\r\n  }\r\n|elif matis.category = \"Gefertigt\" || matis.category = \"Manufactured\":\r\n  {matis.name} {OneOf('erhalten','gesammelt','bekommen')}.\r\n  {if matis.rarity.name = \"Standard\" ||  matis.rarity.name = \"standard\":\r\n     {Occasionally(2,\"Das ist\")} ein {matis.rarity.name} {OneOf(\"Bauteil\",\"Komponententeil\",\"Material\")}\r\n  |else:\r\n     {Occasionally(2,\"Das ist\")} ein {matis.rarity.name} hergestelltes {OneOf(\"Bauteil\",\"Komponententeil\",\"Material\")}.\r\n  }\r\n   {if matis.name = \"unknownenergysource\":\r\n      {_ Unknown Artifact Fragment}\r\n   }\r\n\r\n|elif matis.category = \"Unbekannt\":\r\n   {set type to slice(matis.name,0,7)}\r\n   {if type = \"ancient\":\r\n      {_ ancient alien data}\r\n   }\r\n|else:\r\n  {matis.name} {OneOf('erhalten','gesammelt','bekommen')}.\r\n  {if  matis.rarity.name = \"\" ||  matis.rarity.name = \"Standard\" ||  matis.rarity.name = \"standard\":\r\n     {Occasionally(2,\"Das ist\")} ein {matis.rarity.name} Material.\r\n  |else:\r\n     {Occasionally(2,\"Das ist\")} ein {matis.rarity.name}es Material.\r\n  }\r\n}\r\n\r\n{_\r\n- name \t\tThe name of the collected material\r\n- amount \tThe amount of the collected material\r\n_}\r\n\r\n",
      "name": "Material collected",
      "description": "Triggered when you collect a material",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Material discard report\")}\r\n\r\n{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        {if over > 1:\r\n            Du kannst {over} Einheiten {inventory.material} {OneOf(\"wegwerfen\", \"entsorgen\")} um dein Max-Level zu erreichen.\r\n        |elif over = 1:\r\n            Du kannst eine Einheit {inventory.material} {OneOf(\"wegwerfen\", \"entsorgen\")} um dein Max-Level zu erreichen.\r\n        }\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        {if over > 1:\r\n            Du kannst {over} Einheiten {inventory.material} {OneOf(\"wegwerfen\", \"entsorgen\")} um dein gewünschtes Level zu erreichen.\r\n        |elif over = 1:\r\n            Du kannst eine Einheit {inventory.material} {OneOf(\"wegwerfen\", \"entsorgen\")} um dein gewünschtes Level zu erreichen.\r\n        }\r\n    |elif inventory.desired:\r\n        Du bist unter {OneOf(\"deinem gewünschten Level\", \"deiner gewünschten Stufe\")} von {inventory.material}.\r\n    |elif inventory.maximum:\r\n        Du bist unter dem {OneOf(\"Max-Level\", \"höchsten Level\")} von {inventory.material}.\r\n    |else:\r\n        Du hast {OneOf(\"kein Niveau\", \"keine Levels\", \"keine Stufen\")} für {inventory.material} {OneOf(\"gesetzt\", \"festgelegt\")}.\r\n    }\r\n}\r\n",
      "name": "Material discard report",
      "description": "Report on how many of a material can be discarded",
      "default": false,
      "defaultValue": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        {if over > 1:\r\n            You can discard {over} units of {inventory.material} to reach your maximum level.\r\n        |elif over = 1:\r\n            You can discard 1 unit of {inventory.material} to reach your maximum level.\r\n        }\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        {if over > 1:\r\n            You can discard {over} units of {inventory.material} to reach your desired level.\r\n        |elif over = 1:\r\n            You can discard 1 unit of {inventory.material} to reach your desired level.\r\n        }\r\n    |elif inventory.desired:\r\n        You are below your desired level for {inventory.material}.\r\n    |elif inventory.maximum:\r\n        You are below your maximum level for {inventory.material}.\r\n    |else:\r\n        You have not set any levels for {inventory.material}.\r\n    }\r\n}\r\n"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Material discarded\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n\r\n{_\r\n- name\t\tThe name of the discarded material\r\n- amount \tThe amount of the discarded material\r\n_}",
      "name": "Material discarded",
      "description": "Triggered when you discard a material",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Material discovered\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\n{_ - name The name of the discovered material _}",
      "name": "Material discovered",
      "description": "Triggered when you discover a material",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Material donated\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n\r\nSie haben {event.amount} Einheiten {event.name} gespendet.\r\n\r\n{_\r\n- name \t\tThe name of the donated material\r\n- amount\tThe amount of the donated material\r\n_}",
      "name": "Material donated",
      "description": "Triggered when you donate a material",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n"
    },
    "Material inventory": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Material inventory\")}\r\n\r\n{_ - inventory The materials in your inventory _}",
      "name": "Material inventory",
      "description": "Triggered when you obtain an inventory of your current materials",
      "default": false,
      "defaultValue": null
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n \r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    {if inventory.amount = 1:\r\n       Wir haben {inventory.amount} Einheit {inventory.material} an Bord.\r\n    |else:\r\n       Wir haben {inventory.amount} Einheiten {inventory.material} im Lager.\r\n    }\r\n|else:\r\n    Wir haben keine {inventory.material} Materialien gelagert.\r\n}\r\n",
      "name": "Material inventory report",
      "description": "Report on how many of a material are on-board",
      "default": false,
      "defaultValue": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n \r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    {if inventory.amount = 1:\r\n       You have {inventory.amount} unit of {inventory.material} on board.\r\n    |else:\r\n       You have {inventory.amount} units of {inventory.material} on board.\r\n    }\r\n|else:\r\n    You have no {inventory.material} on board.\r\n}\r\n"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Material location report\")}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {material.name} kann hier {material.location} gefunden werden.\r\n    |else:\r\n        Keine Ahnung wo {material.name} zu finden ist.\r\n    }\r\n|else:\r\n    Ich habe keine Information über dieses Material.\r\n}.\r\n",
      "name": "Material location report",
      "description": "Report on the where to obtain a particular material",
      "default": false,
      "defaultValue": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {material.name} can be {material.location}\r\n    |else:\r\n        No information available on where to find {material.name}\r\n    }\r\n|else:\r\n    I don't have any information about that material\r\n}.\r\n"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Material required report\")}\r\n\r\n{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.minimum && inventory.minimum > inventory.amount:\r\n        {set under to inventory.minimum - inventory.amount}\r\n        {if under > 1:\r\n            Du brauchst {under} Einheiten von {inventory.material} um dein Minimum-Level zu erreichen.\r\n        |elif under = 1:\r\n            Du brauchst eine Einheit von {inventory.material} um dein Minimum-Level zu erreichen.\r\n        }\r\n    |elif inventory.desired && inventory.desired > inventory.amount:\r\n        {set under to inventory.desired - inventory.amount}\r\n        {if under > 1:\r\n            Du brauchst {under} Einheiten von {inventory.material} um dein gewünschtes Level zu erreichen.\r\n        |elif under = 1:\r\n            Du brauchst eine Einheit von {inventory.material} um dein gewünschtes Level zu erreichen.\r\n        }\r\n    |elif inventory.desired:\r\n        Du bist über deinem gewünschten Level für {inventory.material}.\r\n    |elif inventory.minimum :\r\n        Du bist über deinem Minimum-Level für {inventory.material}.\r\n    |else:\r\n        Du hast für {inventory.material} keine Marken gesetzt.\r\n    }\r\n}\r\n\r\n",
      "name": "Material required report",
      "description": "Report on how many of a material are required to reach 'desired' level",
      "default": false,
      "defaultValue": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.minimum && inventory.minimum > inventory.amount:\r\n        {set under to inventory.minimum - inventory.amount}\r\n        {if under > 1:\r\n            You require {under} units of {inventory.material} to reach your minimum level.\r\n        |elif under = 1:\r\n            You require 1 unit of {inventory.material} to reqach your minimum level.\r\n        }\r\n    |elif inventory.desired && inventory.desired > inventory.amount:\r\n        {set under to inventory.desired - inventory.amount}\r\n        {if under > 1:\r\n            You require {under} units of {inventory.material} to reach your desired level.\r\n        |elif under = 1:\r\n            You require 1 unit of {inventory.material} to reach your desired level.\r\n        }\r\n    |elif inventory.desired:\r\n        You are above your desired level for {inventory.material}.\r\n    |elif inventory.minimum :\r\n        You are above your minimum level for {inventory.material}.\r\n    |else:\r\n        You have not set any levels for {inventory.material}.\r\n    }\r\n}\r\n\r\n"
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Material threshold\")}\r\n\r\n{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"Der Lagerbestand\", \"Unser Vorrat\", \"Die Menge\")} von {event.material.name}\r\n    ist unter unser Minimum gefallen.\r\n|elif event.level = 'Maximum':\r\n  {_ Gone above the maximum level }\r\n    {OneOf(\"Der Lagerbestand\", \"Unser Vorrat\", \"Die Menge\")} von {event.material.name}\r\n    ist über unser Maximum gestiegen.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    {if event.change = 'Increase':\r\n        Du hast dein gewünschtes Level von {event.material.name} erreicht.\r\n    |else:\r\n        Du befindest dich unter deinem gewünschten Niveau von {event.material.name}.\r\n    }\r\n}\r\n\r\n{OneOf(\"Der aktuelle Bestand ist {event.amount}\",\r\n       \"Derzeitige Menge {event.amount}\",\r\n       \"Jetzt {event.amount} an Bord\")}.\r\n       \r\n{_\r\n- material \tThe material\r\n- level \tThe level that has been triggered (Minimum/Desired/Maximum)\r\n- limit \tThe amount of the limit that has been passed\r\n- amount \tThe current amount of the material\r\n- change \tThe change to the inventory (Increase/Reduction)\r\n_}",
      "name": "Material threshold",
      "description": "Triggered when a material reaches a threshold",
      "default": false,
      "defaultValue": "{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"Stock\", \"Inventory\", \"Supplies\")} of {event.material.name} has fallen below your minimum.\r\n|elif event.level = 'Maximum':\r\n  {_ Gone above the maximum level }\r\n    {OneOf(\"Stock\", \"Inventory\", \"Supplies\")} of {event.material.name} has grown above your maximum.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    {if event.change = 'Increase':\r\n        You have reached your desired level of {event.material.name}.\r\n    |else:\r\n        You are below your desired level of {event.material.name}.\r\n    }\r\n}\r\n\r\n{OneOf(\"Current stock is {event.amount}\",\r\n       \"Currently holding {event.amount}\",\r\n       \"{event.amount} on-board\")}."
    },
    "Material traded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Material traded\")}\r\n\r\nWir haben beim {set translate to event.tradertype} {F(\"Translate Power\")} für \r\n{if event.paid_quantity = 1 : eine Einheit |else: {event.paid_quantity} Einheiten} \r\n{event.paid} \r\n{if event.received_quantity = 1 : eine Einheit |else: {event.received_quantity}} Einheiten \r\n{event.received} erhalten.\r\n\r\n{_\r\n- tradertype \t\tThe type of material trader for the trade\r\n- paid \t\t\t\tThe name of the material lost in the trade\r\n- paid_quantity \tThe amount of the material lost in the trade\r\n- received \t\t\tThe name of the material gained in the trade\r\n- received_quantity The amount of the material gained in the trade\r\n_}",
      "name": "Material traded",
      "description": "Triggered when materials are traded at a material trader",
      "default": false,
      "defaultValue": null
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Material use report\")}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {if len(state.eddi_context_material_name) > 0:\r\n        {_ Fetch from context }\r\n        {set material to MaterialDetails(state.eddi_context_material_name)}\r\n    }\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'wird'}\r\n    |else:\r\n        {set plural to 'ist'}\r\n    }\r\n    {if uses = 0:\r\n      {material.name} wird für keinen Bauplan benötigt\r\n    |elif uses = 1:\r\n        {set name to cat(material.blueprints[0].name, material.blueprints[0].modulename, ' Grad ', material.blueprints[0].grade)}\r\n        {material.name} {plural} für den Bauplan {name} benötigt\r\n    |elif uses = 2:\r\n        {set name0 to cat(material.blueprints[0].name, material.blueprints[0].modulename, ' Grad ', material.blueprints[0].grade)}\r\n        {set name1 to cat(material.blueprints[1].name, material.blueprints[1].modulename, ' Grad ', material.blueprints[1].grade)}\r\n        {material.name} {plural} für den Bauplan {name0} und den Bauplan {name1} benötigt\r\n    |else:\r\n        {material.name} {plural} genutzt für die Baupläne {len(material.blueprints)}. Diese sind\r\n        {set cur to 0}\r\n        {while cur < len(material.blueprints):\r\n            {set name to cat(material.blueprints[cur].name, material.blueprints[cur].modulename, ' Grad ', material.blueprints[cur].grade)}\r\n            {if cur = 0:\r\n                {name}\r\n            |elif cur < len(material.blueprints) - 1:\r\n                , {name}\r\n            |else:\r\n                , und {name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    Ich habe keine Informationen über {if material = \" \" : {material} |else: dieses Material}.\r\n}.\r\n\r\n",
      "name": "Material use report",
      "description": "OK! Report on the use of a material",
      "default": false,
      "defaultValue": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {if len(state.eddi_context_material_name) > 0:\r\n        {_ Fetch from context }\r\n        {set material to MaterialDetails(state.eddi_context_material_name)}\r\n    }\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'are'}\r\n    |else:\r\n        {set plural to 'is'}\r\n    }\r\n    {if uses = 0:\r\n      {material.name} {plural} not required for any blueprints\r\n    |elif uses = 1:\r\n        {set name to cat(material.blueprints[0].name, material.blueprints[0].modulename, ' grade ', material.blueprints[0].grade)}\r\n        {material.name} {plural} used for the {name} blueprint\r\n    |elif uses = 2:\r\n        {set name0 to cat(material.blueprints[0].name, material.blueprints[0].modulename, ' grade ', material.blueprints[0].grade)}\r\n        {set name1 to cat(material.blueprints[1].name, material.blueprints[1].modulename, ' grade ', material.blueprints[1].grade)}\r\n        {material.name} {plural} used for the {name0} and {name1} blueprints\r\n    |else:\r\n        {material.name} {plural} used for {len(material.blueprints)} blueprints.  These are\r\n        {set cur to 0}\r\n        {while cur < len(material.blueprints):\r\n            {set name to cat(material.blueprints[cur].name, material.blueprints[cur].modulename, ' grade ', material.blueprints[cur].grade)}\r\n            {if cur = 0:\r\n                {name}\r\n            |elif cur < len(material.blueprints) - 1:\r\n                , {name}\r\n            |else:\r\n                , and {name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    I don't have any information about that material\r\n}."
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Materials discard report\")}\r\n\r\n{_ Find those that are above maximum, desired and minimum}\r\n{set shoulddiscardmaterials to []}\r\n{set coulddiscardmaterials to []}\r\n{set lastdiscardmaterials to []}\r\n\r\n{for material in materials:\r\n    {if material.maximum && material.amount > material.maximum:\r\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\r\n    |elif material.desired && material.amount > material.desired:\r\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\r\n    |elif material.minimum && material.amount > material.minimum:\r\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(shoulddiscardmaterials) > 0:\r\n    Du bist über dem Maximum Level für \r\n    {if len(shoulddiscardmaterials) = 1: ein Material |else: {len(shoulddiscardmaterials)} Materiale}. Du kannst\r\n    {if len(shoulddiscardmaterials) = 1:\r\n        {if shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum = 1 : ein Mal\r\n        |else: {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} \r\n        }\r\n        {shoulddiscardmaterials[0].material}\r\n    |elif len(shoulddiscardmaterials) = 2:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material} und \r\n        {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {shoulddiscardmaterials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(shoulddiscardmaterials):\r\n            {if cur = 0:\r\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n            |elif cur < len(shoulddiscardmaterials) - 1:\r\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n            |else:\r\n                , und {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    } entsorgen.\r\n|elif len(coulddiscardmaterials) > 0:\r\n    Du bist über dem gewünschten Level für \r\n    {if len(coulddiscardmaterials) = 1: ein Material |else: {len(coulddiscardmaterials)} Materiale}. Du kannst\r\n    {if len(coulddiscardmaterials) = 1:\r\n        {if coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired = 1 : ein Mal \r\n        |else: {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired}\r\n        } \r\n        {coulddiscardmaterials[0].material}\r\n    |elif len(coulddiscardmaterials) = 2:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material} und \r\n        {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {coulddiscardmaterials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(coulddiscardmaterials):\r\n            {if cur = 0:\r\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n            |elif cur < len(coulddiscardmaterials) - 1:\r\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n            |else:\r\n                , und {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    } entsorgen.\r\n|elif len(lastdiscardmaterials) > 0:\r\n    Du bist über dem Minimum Level für \r\n    {if len(lastdiscardmaterials) = 1: ein Material |else: {len(lastdiscardmaterials)} materiale}. Du kannst\r\n    {if len(lastdiscardmaterials) = 1:\r\n        {if lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum = 1 : ein Mal \r\n        |else: {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material}\r\n        }\r\n    |elif len(lastdiscardmaterials) = 2:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material} und \r\n        {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {lastdiscardmaterials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(lastdiscardmaterials):\r\n            {if cur = 0:\r\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n            |elif cur < len(lastdiscardmaterials) - 1:\r\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n            |else:\r\n                , und {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    } entsorgen.\r\n|else:\r\n    Du kannst nichts wegwerfen ohne dein Minimum Level zu unterschreiten.\r\n}\r\n",
      "name": "Materials discard report",
      "description": "OK ! Report on which materials can be discarded",
      "default": false,
      "defaultValue": "\r\n{_ Find those that are above maximum, desired and minimum}\r\n{set shoulddiscardmaterials to []}\r\n{set coulddiscardmaterials to []}\r\n{set lastdiscardmaterials to []}\r\n\r\n{for material in materials:\r\n    {if material.maximum && material.amount > material.maximum:\r\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\r\n    |elif material.desired && material.amount > material.desired:\r\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\r\n    |elif material.minimum && material.amount > material.minimum:\r\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(shoulddiscardmaterials) > 0:\r\n    You are over your maximum level for {if len(shoulddiscardmaterials) = 1: 1 material |else: {len(shoulddiscardmaterials)} materials}.  You can discard\r\n    {if len(shoulddiscardmaterials) = 1:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material}\r\n    |elif len(shoulddiscardmaterials) = 2:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material} and {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {shoulddiscardmaterials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(shoulddiscardmaterials):\r\n            {if cur = 0:\r\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n            |elif cur < len(shoulddiscardmaterials) - 1:\r\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n            |else:\r\n                , and {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(coulddiscardmaterials) > 0:\r\n    You are over your desired level for {if len(coulddiscardmaterials) = 1: 1 material |else: {len(coulddiscardmaterials)} materials}.  You can discard\r\n    {if len(coulddiscardmaterials) = 1:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material}\r\n    |elif len(coulddiscardmaterials) = 2:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material} and {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {coulddiscardmaterials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(coulddiscardmaterials):\r\n            {if cur = 0:\r\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n            |elif cur < len(coulddiscardmaterials) - 1:\r\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n            |else:\r\n                , and {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(lastdiscardmaterials) > 0:\r\n    You are over your minimum level for {if len(lastdiscardmaterials) = 1: 1 material |else: {len(lastdiscardmaterials)} materials}.  You can discard\r\n    {if len(lastdiscardmaterials) = 1:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material}\r\n    |elif len(lastdiscardmaterials) = 2:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material} and {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {lastdiscardmaterials[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(lastdiscardmaterials):\r\n            {if cur = 0:\r\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n            |elif cur < len(lastdiscardmaterials) - 1:\r\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n            |else:\r\n                , and {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    No materials can be discarded and remain within minimum levels.\r\n}\r\n"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Materials required report\")}\r\n\r\n{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Du benötigst\r\n    {if len(required) = 1:\r\n        {if required[0].desired - required[0].amount = 1: ein mal \r\n        |else: {required[0].desired - required[0].amount} ein mal\r\n        }\r\n        {required[0].material}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} mal {required[0].material} und \r\n        {required[1].desired - required[1].amount} mal {required[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} mal {required[cur].material}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} mal {required[cur].material}\r\n            |else:\r\n                , und {required[cur].desired - required[cur].amount} mal {required[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Du hast alle Materialien, die du dir wünschst.\r\n}",
      "name": "Materials required report",
      "description": "OK ! Report on how many of each material are required to reach 'desired' level",
      "default": false,
      "defaultValue": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    You require\r\n    {if len(required) = 1:\r\n        {required[0].desired - required[0].amount} {required[0].material}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} {required[0].material} and {required[1].desired - required[1].amount} {required[1].material}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} {required[cur].material}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} {required[cur].material}\r\n            |else:\r\n                , and {required[cur].desired - required[cur].amount} {required[cur].material}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    You have all the materials you desire.\r\n}"
    },
    "Message received": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Message received\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{_ \"true\" means spoken and \"false\" means muted.}\r\n{_ \"npc\" controls whether NPC comms will be spoken.}\r\n{_ \"player\" controls direct messages to you will be spoken.}\r\n{_ \"starsystem\" controls whether player comms across game modes  will be spoken.}\r\n{set spokenChannels to [\r\n    \"friend\": true,\r\n    \"local\": true,\r\n    \"multicrew\": true,\r\n    \"npc\": false,\r\n    \"player\": true,\r\n    \"squadron\": true,\r\n    \"starsystem\": false,\r\n    \"voicechat\": false,\r\n    \"wing\": true,\r\n]}\r\n\r\n{_ \"true\" means spoken and \"false\" means muted.}\r\n{_ \"NPC\" is the default source for NPC comms.}\r\n{set spokenNpcSources to [\r\n    \"Ambushed pilot\" : true,\r\n    \"Bounty hunter\" : true,\r\n    \"Capital ship\" : true,\r\n    \"Cargo hunter\" : true,\r\n    \"Civilian pilot\" : true,\r\n    \"Cruise liner\" : false,\r\n    \"Escort\" : true,\r\n    \"Exploration convoy\" : true,\r\n    \"Hitman\" : true,\r\n    \"Messenger\" : true,\r\n    \"Military\" : true,\r\n    \"Miner\" : true,\r\n    \"NPC\" : true,\r\n    \"Passenger hunter\" : true,\r\n    \"Passenger liner\" : false,\r\n    \"Pirate\" : true,\r\n    \"Police\" : true,\r\n    \"Propagandist\" : true,\r\n    \"Protester\" : true,\r\n    \"Refugee\" : true,\r\n    \"Rival power's agent\" : true,\r\n    \"Search and rescue\" : true,\r\n    \"Starship One\" : true,\r\n    \"Station\" : false,\r\n    \"Wedding convoy\" : false,\r\n]}\r\n\r\n{if spokenChannels[event.channel] = true:\r\n    {if event.player = true:\r\n        {if event.message = \"o7\" || event.message = \"O7\" || event.message = \"07\" :\r\n            {set translate to (event.from)} {F(\"Translate Power\")} grüßt {if event.channel = \"player\": Dich }.\r\n        |elif event.message = \"0/\" || event.message = \"O/\" || event.message = \"0/\" :\r\n            {set translate to (event.from)} {F(\"Translate Power\")} sagt Hallo.\r\n        |else:\r\n            {set translate to (event.source)} {if translate = \"squadron mate\": Geschwaderkumpel} \r\n            {set translate to (event.from)} {F(\"Translate Power\")} sagt: {event.message}\r\n        }\r\n    |elif spokenNpcSources[event.source] = true:\r\n        Vom {event.source} {event.from}: {event.message}\r\n    }\r\n}\r\n\r\n{_\r\n- from \t\tThe name of the source who sent the message\r\n- player \tTrue if the sender is a player\r\n- source \tThe source of the transmission\r\n- channel \tThe channel in which the message came (e.g. direct, local, multicrew, \r\n\t\t\twing, squadron, starsystem, npc)\r\n- message \tThe message\r\n_}",
      "name": "Message received",
      "description": "Triggered when you receive a message",
      "default": false,
      "defaultValue": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{_ \"true\" means spoken and \"false\" means muted.}\r\n{_ \"npc\" controls whether NPC comms will be spoken.}\r\n{_ \"player\" controls direct messages to you will be spoken.}\r\n{_ \"starsystem\" controls whether player comms across game modes  will be spoken.}\r\n{set spokenChannels to [\r\n    \"friend\": true,\r\n    \"local\": true,\r\n    \"multicrew\": true,\r\n    \"npc\": true,\r\n    \"player\": true,\r\n    \"squadron\": true,\r\n    \"starsystem\": false,\r\n    \"voicechat\": false,\r\n    \"wing\": true,\r\n]}\r\n\r\n{_ \"true\" means spoken and \"false\" means muted.}\r\n{_ \"NPC\" is the default source for NPC comms.}\r\n{set spokenNpcSources to [\r\n    \"Ambushed pilot\" : true,\r\n    \"Bounty hunter\" : true,\r\n    \"Capital ship\" : true,\r\n    \"Cargo hunter\" : true,\r\n    \"Civilian pilot\" : true,\r\n    \"Cruise liner\" : false,\r\n    \"Escort\" : true,\r\n    \"Exploration convoy\" : true,\r\n    \"Hitman\" : true,\r\n    \"Messenger\" : true,\r\n    \"Military\" : true,\r\n    \"Miner\" : true,\r\n    \"NPC\" : true,\r\n    \"Passenger hunter\" : true,\r\n    \"Passenger liner\" : false,\r\n    \"Pirate\" : true,\r\n    \"Police\" : true,\r\n    \"Propagandist\" : true,\r\n    \"Protester\" : true,\r\n    \"Refugee\" : true,\r\n    \"Rival power's agent\" : true,\r\n    \"Search and rescue\" : true,\r\n    \"Starship One\" : true,\r\n    \"Station\" : false,\r\n    \"Wedding convoy\" : false,\r\n]}\r\n\r\n{if spokenChannels[event.channel] = true:\r\n    {if event.player = true:\r\n        {set words to split(event.message, \" \")}\r\n        {set msg to []}\r\n        {set cur to 0}\r\n        {while cur < len(words):        \r\n            {set o7match to match(words[cur], \"(?<!\\\\w)([o|O|0]7)(?!\\\\w)\")}\r\n            {if cur = 0 && (len(words) > 1 || len(o7match) = 0):\r\n                {set msg to cat(msg, [\"sends:\"])}\r\n            }\r\n            {if len(o7match) > 0:\r\n                {set remainder to slice(words[cur], 2)}\r\n                {if len(words) = 1:\r\n                    {if event.channel = 'player': {set you to \" you\"}}\r\n                    {set salute to cat(\"salutes\", you)}\r\n                    {set msg to cat(msg, [cat(salute, remainder)])}\r\n                |else:\r\n                    {set msg to cat(msg, [cat(\"salute\", remainder)])}\r\n                }\r\n            |else:\r\n                {set msg to cat(msg, [words[cur]])}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n        {set message to join(msg, \" \")}\r\n        {event.source} {event.from} {message}\r\n    |elif spokenNpcSources[event.source] = true:\r\n        From {event.source} {event.from}: {event.message}\r\n    }\r\n}"
    },
    "Message sent": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Message sent\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{OneOf(\"Nachricht ist raus\", \"Nachricht gesendet\", \"versendet\")}.\r\n\r\n{_\r\n- to \t\tThe name of the player to which the message was sent\r\n- message \tThe message\r\n_}",
      "name": "Message sent",
      "description": "Triggered when you send a message",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{OneOf(\"Message away\", \"Message sent\", \"Sent\")}."
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Mission abandoned\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'abandon')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if event.communal:\r\n    Sie haben das Gemeinschaftsziel {mission.localisedname} abgebrochen.\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(type, \" mission\")}\r\n\r\n    {type} {if mission.faction: für {mission.faction}} abgebrochen.\r\n}\r\n\r\n{_\r\n- missionid \tThe ID of the mission\r\n- name \t\t\tThe name of the mission\r\n- fine \t\t\tThe fine levied\r\n_}\r\n",
      "name": "Mission abandoned",
      "description": "Triggered when you abandon a mission",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'abandon')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if event.communal:\r\n    You have abandoned the community goal: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(type, \" mission\")}\r\n\r\n    {type} {if mission.faction: for {mission.faction}} abandoned.\r\n}\r\n\r\n"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Mission accepted\")}\r\n\r\n{if event.communal:\r\n    Comunity Ziel angenommen.\r\n|else:\r\n    {OneOf(\"Mission\", \"Aufgabe\", \"Auftrag\")} für {P(event.faction)} angenommen.\r\n    {if event.passengerswanted:\r\n        {set wanteddescription to OneOf(\"gesuchte Passangiere\", \"bekannte Verbrecher\")}\r\n        Vorsicht: {OneOf(\"wir transportieren {wanteddescription}\",\"{wanteddescription} an Bord\")}.\r\n    }\r\n}\r\n\r\n{_\r\n- missionid \t\t\tThe ID of the mission\r\n- name \t\t\t\t\tThe name of the mission\r\n- localisedname \t\tThe localised name of the mission\r\n- faction \t\t\t\tThe faction issuing the mission\r\n- destinationsystem \tThe destination system for the mission (if applicable)\r\n- destinationstation \tThe destination station for the mission (if applicable)\r\n- commodity \t\t\tThe commodity involved in the mission (if applicable)\r\n- amount \t\t\t\tThe amount of the commodity,  passengers or targets involved in the mission \r\n\t\t\t\t\t\t(if applicable)\r\n- wing \t\t\t\t\tTrue if the mission allows wing-mates\r\n- passengercount \t\tThe number of passengers (if applicable)\r\n- passengerwanted \t\tTrue if the passengers are wanted (if applicable)\r\n- passengertype \t\tThe type of passengers in the mission (if applicable)\r\n- passengervips \t\tTrue if the passenger is a VIP (if applicable)\r\n- target \t\t\t\tName of the target of the mission (if applicable)\r\n- targettype \t\t\tType of the target of the mission (if applicable)\r\n- targetfaction \t\tFaction of the target of the mission (if applicable)\r\n- killcount \t\t\tThe number of targets (if applicable)\r\n- communal \t\t\t\tTrue if the mission is a community goal\r\n- expiry \t\t\t\tThe expiry date of the mission\r\n- reward \t\t\t\tThe expected cash reward from the mission\r\n- influence \t\t\tThe increase in the faction's influence in the system gained \r\n\t\t\t\t\t\twhen completing this mission, if any\r\n- reputation \t\t\tThe increase in the commander's reputation with the faction gained \r\n\t\t\t\t\t\twhen completing this mission, if any\r\n_}\r\n",
      "name": "Mission accepted",
      "description": "Triggered when you accept a mission",
      "default": false,
      "defaultValue": "{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'accepted')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if mission.type = \"Donation\":\r\n    {OneOf(\"You have chosen\",\"Mission accepted\")} to {Occasionally(2,\"generously\")} donate\r\n    {if mission.typeEDName = \"Altruism\": {mission.commodity} |else: credits} to\r\n    {OneOf('improve','raise','increase')} your {OneOf('reputation','standing')} with {P(mission.faction, \"faction\")}\r\n|elif event.communal:\r\n    You have accepted the community goal: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(type, \" mission\")}\r\n    {OneOf(\"{type} {if mission.faction: for {mission.faction}} accepted\",\r\n        \"{type} accepted {if mission.faction: for {mission.faction}}\",\r\n        \"You have accepted a {type} {if mission.faction: for {mission.faction}}\")\r\n    }\r\n}\r\n\r\n{F(\"Mission faction state\")}.\r\n\r\n{if mission.passengerwanted:\r\n    Warning! You are {OneOf(\"transporting\",\"carrying\")}\r\n    {OneOf(\"{OneOf('wanted','illegal')} {OneOf('passengers','personnel')}\",\"known felons\")}!\r\n    You may be attacked by {Occasionally(2,\"system\")} {OneOf(\"authority\",\"police\")}.\r\n    Caution is advised.  Avoid being scanned.\r\n\r\n|elif token(mission.name,\"_\",2) = \"Skimmer\":\r\n    This is a surface {OneOf(\"mission\",\"operation\")}.\r\n\r\n|elif token(mission.name,\"_\",2) = \"Surface\":\r\n    This is a surface {OneOf(\"mission\",\"operation\")}, you will require an SRV.\r\n}\r\n\r\n{if !event.communal:\r\n    {if missionsCount = 20:\r\n        You have now reached the maximum number of missions you can take.\r\n        Please complete some, in order to accept more.\r\n    |else:\r\n        {set reportMissionCount to:\r\n            {OneOf(\r\n                \"You {Occasionally(2,'now')} have {missionsCount} \r\n                    {if missionsCount > 1: missions \r\n                    |else: mission\r\n                    }\",\r\n                \"{OneOf('That is','This is')} your\r\n                    {if missionsCount = 1: 1st\r\n                    |elif missionsCount = 2: 2nd\r\n                    |elif missionsCount = 3: 3rd\r\n                    |else: {missionsCount}th\r\n                    }\r\n                    mission\"\r\n            )}.\r\n        }\r\n        {Occasionally(max(cmdr.combatrating.rank - missionsCount, 1), reportMissionCount)}\r\n    }\r\n}"
    },
    "Mission check galaxy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Mission check galaxy\")}\r\n\r\n{_ Mission check galaxy }\r\n{_ Check what systems you have missions in }\r\n{_ Setup allmissions function _}\r\n\r\n{set allmissions(system) to:\r\n    {set here to find(systems, system)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":       \r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to systems_claim[here] + 1}\r\n            {set systems_claim to union(systems_claim, [here:claim])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set complete to systems_complete[here] + 1}\r\n            {set systems_complete to union(systems_complete, [here:complete])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        }\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [1])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [1])}\r\n         }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set failed to 0}\r\n    {set multi to 0}\r\n    {set pending to 0}\r\n    {set systems to []}\r\n    {set systems_active to []}\r\n    {set systems_claim to []}\r\n    {set systems_complete to []}\r\n\r\n    {for mission in missions:\r\n        {if mission.statusEDName = \"Failed\":\r\n            {set failed to failed + 1}\r\n        |else:\r\n            {set pending to pending + 1}\r\n            {if mission.destinationsystems:\r\n                {set multi to multi + 1}\r\n                {for destination in mission.destinationsystems:\r\n                    {allmissions(destination.name)}\r\n                }\r\n            |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                {allmissions(mission.destinationsystem)}\r\n            }\r\n        }\r\n    }\r\n    {set systemsCount to len(systems)}\r\n\r\n    Wir haben\r\n    {if failed > 0:\r\n        {if failed = 1 : eine |else: {failed}} gescheiterte \r\n        {if pending > 0: und\r\n        |elif missionCount = 1: Mission.\r\n        |else: Missionen.\r\n        }\r\n    }\r\n\r\n    {if pending > 0 :\r\n        {if mission_report && systemsCount > 0 :\r\n            {set cur to 0}\r\n            {while cur < systemsCount:\r\n                {set active to systems_active[cur]}\r\n                {set claim to systems_claim[cur]}\r\n                {set complete to systems_complete[cur]}\r\n                {set subtotal to complete + claim}\r\n\r\n                {if active > 0 && active > subtotal:\r\n                    {if active = 1 : eine |else: {active}} laufende\r\n                    {if claim > 0 || complete > 0 : , einschließlich }\r\n                }\r\n                {if complete > 0 :\r\n                    {if complete = 1 : eine |else: {complete}} beendete \r\n                    {if claim > 0 : und }\r\n                }\r\n                {if claim > 0 :\r\n                    {if claim = 1 : eine |else: {claim}} einlösbare\r\n                }\r\n                {if subtotal > 0 :\r\n                    {if subtotal = 1 : Mission |else: Missionen }\r\n                }\r\n                im System {P(systems[cur])}\r\n                {set cur to cur + 1}\r\n                {if cur = systemsCount - 1 : und |elif cur < systemsCount: , }\r\n            }.\r\n        |else:\r\n            {if pending = 1: eine |else: {pending}} \r\n            {if missionCount = 1 : Mission |else: Missionen} \r\n            {if systemsCount = 0 :\r\n                {if missionsCount = 1 : mit keinem bestimmten Ziel System |else: mit keinen bestimmten Ziel Systemen }\r\n            |else: in \r\n                {if systemsCount = 1 : einem {Occasionally(2,\"Sternen\")} System\r\n                |else: {systemsCount} {Occasionally(2,\"Sternen\")} Systemen \r\n                } \r\n            }.\r\n            {if multi > 0 :\r\n                {if multi = pending: Alle |else: {multi} } diese {if multi = 1 : ist eine |else: sind }\r\n                Mehr-Ziel- {if multi = 1: Mission |else: Missionen }.\r\n            }        \r\n        }\r\n    }\r\n|else:\r\n    Wir haben {OneOf(\"im Moment\",\"zur Zeit\")} keine offenen Missionen.\r\n}",
      "name": "Mission check galaxy",
      "description": "Check what systems you have missions in",
      "default": false,
      "defaultValue": "{_ Mission check galaxy }\r\n{_ Check what systems you have missions in }\r\n\r\n\r\n{_ Setup allmissions function _}\r\n{set allmissions(system) to:\r\n    {set here to find(systems, system)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":       \r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to systems_claim[here] + 1}\r\n            {set systems_claim to union(systems_claim, [here:claim])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set complete to systems_complete[here] + 1}\r\n            {set systems_complete to union(systems_complete, [here:complete])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        }\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [1])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [1])}\r\n         }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set failed to 0}\r\n    {set multi to 0}\r\n    {set pending to 0}\r\n    {set systems to []}\r\n    {set systems_active to []}\r\n    {set systems_claim to []}\r\n    {set systems_complete to []}\r\n\r\n    {for mission in missions:\r\n        {if mission.statusEDName = \"Failed\":\r\n            {set failed to failed + 1}\r\n        |else:\r\n            {set pending to pending + 1}\r\n            {if mission.destinationsystems:\r\n                {set multi to multi + 1}\r\n                {for destination in mission.destinationsystems:\r\n                    {allmissions(destination.name)}\r\n                }\r\n            |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                {allmissions(mission.destinationsystem)}\r\n            }\r\n        }\r\n    }\r\n    {set systemsCount to len(systems)}\r\n\r\n    You have\r\n    {if failed > 0:\r\n        {failed} failed\r\n        {if pending > 0:\r\n            and\r\n        |elif missionsCount = 1:\r\n            mission.\r\n        |else:\r\n            missions.\r\n        }\r\n    }\r\n\r\n    {if pending > 0:\r\n        {if mission_report && systemsCount > 0:\r\n            {set cur to 0}\r\n            {while cur < systemsCount:\r\n                {set active to systems_active[cur]}\r\n                {set claim to systems_claim[cur]}\r\n                {set complete to systems_complete[cur]}\r\n                {set subtotal to complete + claim}\r\n\r\n                {if active > 0 && active > subtotal:\r\n                    {active} pending {if active = 1: mission |else: missions }\r\n                    {if claim > 0 || complete > 0: , including }\r\n                }\r\n                {if complete > 0:\r\n                    {complete} completed\r\n                    {if claim > 0: and }\r\n                }\r\n                {if claim > 0:\r\n                    {claim} claimable\r\n                }\r\n                {if subtotal > 0:\r\n                    {if subtotal = 1: mission |else: missions}\r\n                }\r\n                {OneOf(\"at\",\"in\")} {P(systems[cur], \"starsystem\")}\r\n                {set cur to cur + 1}\r\n                {if cur = systemsCount - 1: and |elif cur < systemsCount: , }\r\n            }.\r\n        |else:\r\n            {pending} pending {if missionsCount = 1: mission |else: missions} \r\n            {if systemsCount = 0:\r\n                with no designated target {if missionsCount = 1: system |else: systems }\r\n            |else:\r\n                in {systemsCount} {Occasionally(2,\"star\")} {if systemsCount = 1: system |else: systems }\r\n            }.\r\n            {if multi > 0:\r\n                {if multi = pending: All |else: {multi} } of these {if multi = 1: is a |else: are }\r\n                multi-destination {if multi = 1: mission |else: missions }.\r\n            }        \r\n        }\r\n    }\r\n|else:\r\n    {OneOf(\"You currently have no missions.\", \"You have no missions at the moment.\",\r\n        \"You have no missions at this time.\")}\r\n}"
    },
    "Mission check galaxy ALT": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Check what systems you have missions in }\r\n{_ Setup allmissions function }\r\n\r\n{Log(\"EDDI Fktn.: Mission check galaxy\")}\r\n\r\n{set allmissions(system) to:\r\n{set here to find(systems, system)}\r\n    {if here > -1 :\r\n        {set number to systems_count[here] + 1}\r\n        {set systems_count to union(systems_count, [here:number])}\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {set systems_count to cat(systems_count, [1])}\r\n    }\r\n}\r\n\r\n{if missionsCount > 0 :\r\n\r\n    {set multi to 0}\r\n\r\n    Wir haben {if missionsCount = 1 : eine |else : {missionsCount}\r\n              } Mission{if missionsCount != 1:en} zu erledigen.\r\n\r\n    {if missionsCount = 1 :\r\n        Sie {OneOf(\"befindet sich\",\"ist zu finden\")} in\r\n        {if missions[0].destinationsystem && missions[0].destinationsystem != \"\":\r\n            dem System {missions[0].destinationsystem}\r\n        |else:\r\n            einem unbekannten\r\n        }\r\n        {Occasionally(2,\"Sternen\")} system.\r\n\r\n    |else:\r\n        {set systems to []}\r\n        {set systems_count to []}\r\n\r\n        {for mission in missions:\r\n            {if mission.status = \"Active\" || mission.status = \"aktiv\":\r\n                {if mission.destinationsystems:\r\n                    {set multi to multi + 1}\r\n                    {for destination in mission.destinationsystems:\r\n                        {allmissions(destination.name)}\r\n                    }\r\n                |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                    {allmissions(mission.destinationsystem)}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(systems) = 0 : Sie haben keine bestimmten Zielsysteme.\r\n        |elif len(systems) = 1 :\r\n            Sie sind alle {Occasionally(2,\"zu finden\")} in\r\n            {if systems && systems[0] != \"\": dem System {systems[0]}\r\n            |else: einem unbekannten\r\n            }\r\n            {Occasionally(2,\"Sternen\")} system.\r\n        |else:\r\n            {if multi > 0 :\r\n                {if multi = missionsCount: Alle |else: {multi}}\r\n                von diesen \r\n                {if multi = 1 : ist eine |else: sind}\r\n                Mehrziel Mission{if multi != 1 :en}.\r\n            }\r\n            Es {if systems_count[0] = 1 : ist |else: sind }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(systems):\r\n                {systems_count[cur]} \r\n                {if cur = 0 : {if systems_count[0] = 1 : Ziel |else: Ziele}}\r\n                {if systems[cur] = \"\"\t: in einem unbekannten System\r\n                |else\t\t\t\t\t: in dem System {systems[cur]}\r\n                }\r\n\r\n                {set cur to cur + 1}\r\n                {if cur = len(systems)-1: and |elif cur < len(systems):, }\r\n            }\r\n        }.\r\n    }\r\n|else: Wir haben {OneOf(\"im Moment\",\"zur Zeit\")} keine offenen Missionen.\r\n}",
      "name": "Mission check galaxy ALT",
      "description": "OK ! Check what systems you have missions in",
      "default": false,
      "defaultValue": "{_ Mission check galaxy }\r\n{_ Check what systems you have missions in }\r\n\r\n\r\n{_ Setup allmissions function _}\r\n{set allmissions(system) to:\r\n    {set here to find(systems, system)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":       \r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to systems_claim[here] + 1}\r\n            {set systems_claim to union(systems_claim, [here:claim])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set complete to systems_complete[here] + 1}\r\n            {set systems_complete to union(systems_complete, [here:complete])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        }\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [1])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [1])}\r\n         }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set failed to 0}\r\n    {set multi to 0}\r\n    {set pending to 0}\r\n    {set systems to []}\r\n    {set systems_active to []}\r\n    {set systems_claim to []}\r\n    {set systems_complete to []}\r\n\r\n    {for mission in missions:\r\n        {if mission.statusEDName = \"Failed\":\r\n            {set failed to failed + 1}\r\n        |else:\r\n            {set pending to pending + 1}\r\n            {if mission.destinationsystems:\r\n                {set multi to multi + 1}\r\n                {for destination in mission.destinationsystems:\r\n                    {allmissions(destination.name)}\r\n                }\r\n            |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                {allmissions(mission.destinationsystem)}\r\n            }\r\n        }\r\n    }\r\n    {set systemsCount to len(systems)}\r\n\r\n    You have\r\n    {if failed > 0:\r\n        {failed} failed\r\n        {if pending > 0:\r\n            and\r\n        |elif missionCount = 1:\r\n            mission.\r\n        |else:\r\n            missions.\r\n        }\r\n    }\r\n\r\n    {if pending > 0:\r\n        {if mission_report && systemsCount > 0:\r\n            {set cur to 0}\r\n            {while cur < systemsCount:\r\n                {set active to systems_active[cur]}\r\n                {set claim to systems_claim[cur]}\r\n                {set complete to systems_complete[cur]}\r\n                {set subtotal to complete + claim}\r\n\r\n                {if active > 0 && active > subtotal:\r\n                    {active} pending {if active = 1: mission |else: missions }\r\n                    {if claim > 0 || complete > 0: , including }\r\n                }\r\n                {if complete > 0:\r\n                    {complete} completed\r\n                    {if claim > 0: and }\r\n                }\r\n                {if claim > 0:\r\n                    {claim} claimable\r\n                }\r\n                {if subtotal > 0:\r\n                    {if subtotal = 1: mission |else: missions}\r\n                }\r\n                {OneOf(\"at\",\"in\")} {P(systems[cur])}\r\n                {set cur to cur + 1}\r\n                {if cur = systemsCount - 1: and |elif cur < systemsCount: , }\r\n            }.\r\n        |else:\r\n            {pending} pending {if missionCount = 1: mission |else: missions} \r\n            {if systemsCount = 0:\r\n                with no designated target {if missionsCount = 1: system |else: systems }\r\n            |else:\r\n                in {systemsCount} {Occasionally(2,\"star\")} {if systemsCount = 1: system |else: systems }\r\n            }.\r\n            {if multi > 0:\r\n                {if multi = pending: All |else: {multi} } of these {if multi = 1: is a |else: are }\r\n                multi-destination {if multi = 1: mission |else: missions }.\r\n            }        \r\n        }\r\n    }\r\n|else:\r\n    {OneOf(\"You currently have no missions.\", \"You have no missions at the moment.\",\r\n        \"You have no missions at this time.\")}\r\n}"
    },
    "Mission check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n{Log(\"EDDI Fktn.: Mission check station\")}\r\n\r\n{if missionsCount > 0 :\r\n    {set current_station to state.eddi_context_body_name}\r\n    {set active to 0}\r\n    {set claim to 0}\r\n    {set complete to 0}\r\n    {set depot to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station ||\r\n                (mission.originstation = current_station && find(mission.type, \"Delivery\") > -1):\r\n                {if mission.status = \"Active\":\r\n                    {set active to active + 1}\r\n                    {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1 :\r\n                        {set depot to depot + 1}\r\n                    }\r\n                |elif mission.status = \"Claim\":\r\n                    {set claim to claim + 1}\r\n                    {set active to active + 1}\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete to complete + 1}\r\n                    {set active to active + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if active > 0 :\r\n        Wir haben\r\n        {set subtotal to claim + complete + depot}\r\n        {if active > 0 && active != subtotal:\r\n            {if active = 1 : eine laufende Mission |else: {active} laufende Missionen}\r\n            {if claim > 0 || complete > 0 || depot > 0 : , einschließlich }\r\n        }\r\n        {if claim > 0 :\r\n            {if claim = 1 : eine |else: {claim}} einforderbare\r\n            {if complete > 0 && depot > 0 : ,\r\n            |elif complete > 0 || depot > 0 : und }\r\n        }\r\n        {if complete > 0 :\r\n            {if complete = 1 : eine |else: {complete}} abgeschlossene\r\n            {if depot > 0 : und }\r\n        }\r\n        {if depot > 0 :\r\n            {if depot = 1 : eine |else: {depot}} lagernde\r\n        }\r\n        {if subtotal > 0 :\r\n            {if subtotal = 1 : Mission |else: Missionen}\r\n        }\r\n        in dieser Station.\r\n    }\r\n}",
      "name": "Mission check station",
      "description": "Check what missions you have for the current station",
      "default": false,
      "defaultValue": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n\r\n{if missionsCount > 0:\r\n    {set current_station to state.eddi_context_body_name}\r\n    {set active to 0}\r\n    {set claim to 0}\r\n    {set complete to 0}\r\n    {set depot to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station ||\r\n                (mission.originstation = current_station && find(mission.type, \"Delivery\") > -1):\r\n                {if mission.status = \"Active\":\r\n                    {set active to active + 1}\r\n                    {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1:\r\n                        {set depot to depot + 1}\r\n                    }\r\n                |elif mission.status = \"Claim\":\r\n                    {set claim to claim + 1}\r\n                    {set active to active + 1}\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete to complete + 1}\r\n                    {set active to active + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if active > 0:\r\n        You have\r\n        {set subtotal to claim + complete + depot}\r\n        {if active > 0 && active != subtotal:\r\n            {active} pending {if active = 1: mission |else: missions}\r\n            {if claim > 0 || complete > 0 || depot > 0: , including }\r\n        }\r\n        {if claim > 0:\r\n            {claim} claimable\r\n            {if complete > 0 && depot > 0: ,\r\n            |elif complete > 0 || depot > 0: and }\r\n        }\r\n        {if complete > 0:\r\n            {complete} completed\r\n            {if depot > 0: and }\r\n        }\r\n        {if depot > 0:\r\n            {depot} depot\r\n        }\r\n        {if subtotal > 0:\r\n            {if subtotal = 1: mission |else: missions}\r\n        }\r\n        {Occasionally(3,\"located\")} at this station.\r\n    }\r\n}\r\n"
    },
    "Mission check station ALT": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n{Log(\"EDDI Fktn.: Mission check station\")}\r\n\r\n{if missionsCount > 0 :\r\n    {set current_station to state.eddi_context_body_name}\r\n    {set active_missions to 0}\r\n    {set complete_missions to 0}\r\n    {set depot_missions to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station ||\r\n                (mission.originstation = current_station && find(mission.type, \"Delivery\") > -1):\r\n                {if mission.status = \"Active\":\r\n                    {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1:\r\n                        {set depot_missions to depot_missions + 1}\r\n                    |else:\r\n                        {set active_missions to active_missions + 1}\r\n                    }\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete_missions to complete_missions + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {set total to active_missions + complete_missions + depot_missions}\r\n    {if total > 0:\r\n        Wir haben\r\n        {if depot_missions > 0:\r\n            {depot_missions} ruhende\r\n            {if active_missions > 0 && complete_missions > 0: ,\r\n            |elif active_missions > 0 || complete_missions > 0: und}\r\n        }\r\n        {if active_missions > 0:\r\n            {active_missions} aktive\r\n            {if complete_missions > 0: und}\r\n        }\r\n        {if complete_missions > 0:\r\n            {complete_missions} abgeschlossene Mission{if total > 1:en}\r\n        }\r\n        in dieser Station.\r\n    }\r\n}",
      "name": "Mission check station ALT",
      "description": "OK ! Check what missions you have for the current station",
      "default": false,
      "defaultValue": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n\r\n{if missionsCount > 0:\r\n    {set current_station to state.eddi_context_body_name}\r\n    {set active to 0}\r\n    {set claim to 0}\r\n    {set complete to 0}\r\n    {set depot to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station ||\r\n                (mission.originstation = current_station && find(mission.type, \"Delivery\") > -1):\r\n                {if mission.status = \"Active\":\r\n                    {set active to active + 1}\r\n                    {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1:\r\n                        {set depot to depot + 1}\r\n                    }\r\n                |elif mission.status = \"Claim\":\r\n                    {set claim to claim + 1}\r\n                    {set active to active + 1}\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete to complete + 1}\r\n                    {set active to active + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if active > 0:\r\n        You have\r\n        {set subtotal to claim + complete + depot}\r\n        {if active > 0 && active != subtotal:\r\n            {active} pending {if active = 1: mission |else: missions}\r\n            {if claim > 0 || complete > 0 || depot > 0: , including }\r\n        }\r\n        {if claim > 0:\r\n            {claim} claimable\r\n            {if complete > 0 && depot > 0: ,\r\n            |elif complete > 0 || depot > 0: and }\r\n        }\r\n        {if complete > 0:\r\n            {complete} completed\r\n            {if depot > 0: and }\r\n        }\r\n        {if depot > 0:\r\n            {depot} depot\r\n        }\r\n        {if subtotal > 0:\r\n            {if subtotal = 1: mission |else: missions}\r\n        }\r\n        {Occasionally(3,\"located\")} at this station.\r\n    }\r\n}\r\n"
    },
    "Mission check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Mission check system\")}\r\n\r\n{_ Mission check system }\r\n{_ Check what missions you have for the current system }\r\n\r\n\r\n{_ Setup addstation function }\r\n{set addstation(station) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to union(stations_depot, [here:depot])}\r\n            }\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to stations_claim[here] + 1}\r\n            {set stations_claim to union(stations_claim, [here:claim])}\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set complete to stations_complete[here] + 1}\r\n            {set stations_complete to union(stations_complete, [here:complete])}\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n        }\r\n    |else:\r\n        {set stations_here to cat(stations_here, [station])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [0])}\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [1])}\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [0])}\r\n            {set stations_complete to cat(stations_complete, [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set current_system to system.name}\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_claim to []}\r\n    {set stations_complete to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.status != \"Failed\":\r\n            {if mission.destinationsystems:\r\n                {for destination in mission.destinationsystems:\r\n                    {if destination.name = current_system && !destination.visited:\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = current_system:\r\n                {if mission.destinationstation && mission.destinationstation != \"\":\r\n                    {addstation(mission.destinationstation)}\r\n                |else:\r\n                    {if mission.status = \"Active\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1:\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n    {set stationsCount to len(stations_here)}\r\n\r\n    {if missions_here > 0:\r\n        {if stationsCount  > 0:\r\n            {Pause(500)}\r\n            Wir haben\r\n            {set cur to 0}\r\n            {while cur < stationsCount:\r\n                {set station to StationDetails(stations_here[cur])}\r\n                {set active to stations_active[cur]}\r\n                {set claim to stations_claim[cur]}\r\n                {set complete to stations_complete[cur]}\r\n                {set depot to stations_depot[cur]}\r\n                {set subtotal to claim + complete + depot}\r\n\r\n                {if active > 0 && active != subtotal:\r\n                    {if active = 1: eine laufende Mission |else: {active} laufende Missionen}\r\n                    {if claim > 0 || complete > 0 || depot > 0: , einschließlich }\r\n                }\r\n                {if claim > 0:\r\n                    {if claim = 1: eine |else: {claim}} einforderbare\r\n                    {if complete > 0 && depot > 0: ,\r\n                    |elif complete > 0 || depot > 0: und }\r\n                }\r\n                {if complete > 0:\r\n                    {if complete = 1: eine |else: {complete}} abgeschlossene\r\n                    {if depot > 0: und }\r\n                }\r\n                {if depot > 0:\r\n                    {if depot = 1: eine |else: {depot}} lagernde\r\n                }\r\n                {if subtotal > 0:\r\n                    {if subtotal = 1: Mission |else: Missionen}\r\n                }\r\n                auf {P(station.model)}, {station.name}\r\n                {set cur to cur + 1}\r\n                {if cur = stationsCount - 1: und |elif cur < stationsCount: , }\r\n            }.\r\n        }\r\n\r\n        {if missions_here > station_based:\r\n            {Pause(500)}\r\n            {set remaining to missions_here - station_based}\r\n            {if station_based > 0: Die {if remaining = 1: eine übrige |else: {remaining} übrigen}\r\n\r\n            \t{set cur to 0}\r\n            \t{while cur < len(non_stations):\r\n                \t{non_stations[cur]}\r\n               \r\n                \t{set cur to cur + 1}\r\n                \t{if cur = len(non_stations)-1: und |elif cur < len(non_stations): ,}\r\n            \t}\r\n            }\t\r\n            Mission{if remaining > 1:en} {if remaining = 1: muss |else: müssen} {OneOf(\"gesucht\",\"ermittelt\",\"gefunden\")} werden.\r\n        }\r\n    }\r\n}",
      "name": "Mission check system",
      "description": "Check what missions you have for the current system",
      "default": false,
      "defaultValue": "{_ Mission check system }\r\n{_ Check what missions you have for the current system }\r\n\r\n\r\n{_ Setup addstation function }\r\n{set addstation(station) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to union(stations_depot, [here:depot])}\r\n            }\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to stations_claim[here] + 1}\r\n            {set stations_claim to union(stations_claim, [here:claim])}\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set complete to stations_complete[here] + 1}\r\n            {set stations_complete to union(stations_complete, [here:complete])}\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n        }\r\n    |else:\r\n        {set stations_here to cat(stations_here, [station])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [0])}\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [1])}\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [0])}\r\n            {set stations_complete to cat(stations_complete, [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set current_system to system.name}\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_claim to []}\r\n    {set stations_complete to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.status != \"Failed\":\r\n            {if mission.destinationsystems:\r\n                {for destination in mission.destinationsystems:\r\n                    {if destination.name = current_system && !destination.visited:\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = current_system:\r\n                {if mission.destinationstation && mission.destinationstation != \"\":\r\n                    {addstation(mission.destinationstation)}\r\n                |else:\r\n                    {if mission.status = \"Active\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1:\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n    {set stationsCount to len(stations_here)}\r\n\r\n    {if missions_here > 0:\r\n        {if stationsCount  > 0:\r\n            {Pause(500)}\r\n            You have\r\n            {set cur to 0}\r\n            {while cur < stationsCount:\r\n                {set station to StationDetails(stations_here[cur])}\r\n                {set active to stations_active[cur]}\r\n                {set claim to stations_claim[cur]}\r\n                {set complete to stations_complete[cur]}\r\n                {set depot to stations_depot[cur]}\r\n                {set subtotal to claim + complete + depot}\r\n\r\n                {if active > 0 && active != subtotal:\r\n                    {active} pending {if active = 1: mission |else: missions}\r\n                    {if claim > 0 || complete > 0 || depot > 0: , including }\r\n                }\r\n                {if claim > 0:\r\n                    {claim} claimable\r\n                    {if complete > 0 && depot > 0: ,\r\n                    |elif complete > 0 || depot > 0: and }\r\n                }\r\n                {if complete > 0:\r\n                    {complete} completed\r\n                    {if depot > 0: and }\r\n                }\r\n                {if depot > 0:\r\n                    {depot} depot\r\n                }\r\n                {if subtotal > 0:\r\n                    {if subtotal = 1: mission |else: missions}\r\n                }\r\n                at {P(station.model)}, {station.name}\r\n                {set cur to cur + 1}\r\n                {if cur = stationsCount - 1: and |elif cur < stationsCount: , }\r\n            }.\r\n        }\r\n\r\n        {if missions_here > station_based:\r\n            {Pause(500)}\r\n            {set remaining to missions_here - station_based}\r\n            The {if station_based > 0: remaining {remaining}}\r\n\r\n            {set cur to 0}\r\n            {while cur < len(non_stations):\r\n                {non_stations[cur]}\r\n               \r\n                {set cur to cur + 1}\r\n                {if cur = len(non_stations)-1: and |elif cur < len(non_stations): ,}\r\n            }\r\n            mission{if remaining > 1:s} must be {OneOf(\"searched for\",\"determined\",\"found\")}.\r\n        }\r\n    }\r\n}\r\n"
    },
    "Mission check system ALT": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check system }\r\n{_ Check what missions you have for the current system }\r\n\r\n{_ Setup addstation function }\r\n\r\n{Log(\"EDDI Fktn.: Mission check system\")}\r\n\r\n{set addstation(station) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n    {if here > -1 :\r\n        {if mission.status = \"Active\" || mission.status = \"aktiv\":\r\n            {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1 :\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to cat(stations_depot, [here:depot])}\r\n            |else:\r\n                {set active to stations_active[here] + 1}\r\n                {set stations_active to cat(stations_active, [here:active])}\r\n            }\r\n        |else:\r\n            {set complete to stations_complete[here] + 1}\r\n            {set stations_complete to cat(stations_complete, [here:complete])}\r\n        }\r\n    |else:\r\n        {set stations_here to cat(stations_here, [station])}\r\n        {if mission.status = \"Active\":\r\n            {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1 :\r\n                {set stations_active to cat(stations_active, [0])}\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_active to cat(stations_active, [1])}\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n        |else:\r\n            {set stations_active to cat(stations_active, [0])}\r\n            {set stations_complete to cat(stations_complete, [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0 :\r\n    {set current_system to system.name}\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_complete to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.status != \"Failed\" :\r\n            {if mission.destinationsystems :\r\n                {for destination in mission.destinationsystems :\r\n                    {if destination.name = current_system && !destination.visited :\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") || find(mission.typeEDName, \"Passagier\") > -1 :\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n                        {if find(non_stations, type) = -1 :\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = current_system:\r\n                {if mission.destinationstation && mission.destinationstation != \"\" :\r\n                    {addstation(mission.destinationstation)}\r\n                |else:\r\n                    {if mission.status = \"Active\" || mission.status = \"aktiv\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") || find(mission.typeEDName, \"Passagier\") > -1 :\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n                        {if find(non_stations, mission.type) = -1 :\r\n                            {set non_stations to cat(non_stations, [mission.type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1 :\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if missions_here > 0 :\r\n        Wir haben {if missions_here = 1 : eine |else: {missions_here}} Mission{if missions_here > 1 :en} \r\n        \t{OneOf('hier','in diesem System')}.\r\n\r\n        {if station_based > 0 :\r\n            {Pause(500)}\r\n            {if missions_here = 1: Unsere\r\n            |elif len(stations_here) = 1 :\r\n                {if missions_here = station_based: Alle |else: Wir haben}\r\n            }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(stations_here):\r\n            \t{set station to StationDetails(stations_here[cur])}\r\n                {set total to stations_active[cur] + stations_complete[cur] + stations_depot[cur]}\r\n                {if stations_depot[cur] > 0 : {stations_depot[cur]} ruhende\r\n                    {if stations_active[cur] > 0 && stations_complete[cur] > 0 : ,\r\n                    |elif stations_active[cur] > 0 || stations_complete[cur] > 0 : und\r\n\t\t\t\t\t}\r\n                }\r\n                {if stations_active[cur] > 0 : \r\n\t\t\t\t\t{if stations_active[cur] = 1 : eine \r\n\t\t\t\t\t|else: {stations_active[cur]}\r\n\t\t\t\t\t} aktive {if stations_complete[cur] > 0 : und}\r\n                }\r\n                {if stations_complete[cur] > 0 : \r\n\t\t\t\t\t{if stations_complete[cur] = 1 : eine \r\n\t\t\t\t\t|else: {stations_complete[cur]}\r\n\t\t\t\t\t} abzuschliessende\r\n\t\t\t\t} \r\n\t\t\t\tMission{if total > 1 :en} in der Station {stations_here[cur]}\r\n\r\n                {set cur to cur + 1}\r\n                {if cur = len(stations_here)-1 : und |elif cur < len(stations_here): ,}\r\n            }.\r\n        }\r\n\r\n        {if missions_here > station_based:\r\n            {Pause(500)}\r\n            {set remaining to missions_here - station_based}\r\n            Die {if station_based > 0 : übrigen {remaining}}\r\n\r\n            {set cur to 0}\r\n            {while cur < len(non_stations):\r\n                {non_stations[cur]}\r\n               \r\n                {set cur to cur + 1}\r\n                {if cur = len(non_stations)-1 : und |elif cur < len(non_stations): ,}\r\n            }\r\n            Mission{if remaining > 1 : en} müssen {OneOf(\"gesucht\",\"bestimmt\",\"gefunden\")} werden.\r\n        }\r\n    }\r\n}",
      "name": "Mission check system ALT",
      "description": "!! Check what missions you have for the current system",
      "default": false,
      "defaultValue": "{_ Mission check system }\r\n{_ Check what missions you have for the current system }\r\n\r\n\r\n{_ Setup addstation function }\r\n{set addstation(station) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to union(stations_depot, [here:depot])}\r\n            }\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to stations_claim[here] + 1}\r\n            {set stations_claim to union(stations_claim, [here:claim])}\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set complete to stations_complete[here] + 1}\r\n            {set stations_complete to union(stations_complete, [here:complete])}\r\n            {set active to stations_active[here] + 1}\r\n            {set stations_active to union(stations_active, [here:active])}\r\n        }\r\n    |else:\r\n        {set stations_here to cat(stations_here, [station])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [0])}\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [1])}\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set stations_active to cat(stations_active, [1])}\r\n            {set stations_claim to cat(stations_claim , [0])}\r\n            {set stations_complete to cat(stations_complete, [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set current_system to system.name}\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_claim to []}\r\n    {set stations_complete to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.status != \"Failed\":\r\n            {if mission.destinationsystems:\r\n                {for destination in mission.destinationsystems:\r\n                    {if destination.name = current_system && !destination.visited:\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = current_system:\r\n                {if mission.destinationstation && mission.destinationstation != \"\":\r\n                    {addstation(mission.destinationstation)}\r\n                |else:\r\n                    {if mission.status = \"Active\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                            {set type to \"Transport \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.type}\r\n                        }\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1:\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n    {set stationsCount to len(stations_here)}\r\n\r\n    {if missions_here > 0:\r\n        {if stationsCount  > 0:\r\n            {Pause(500)}\r\n            You have\r\n            {set cur to 0}\r\n            {while cur < stationsCount:\r\n                {set station to StationDetails(stations_here[cur])}\r\n                {set active to stations_active[cur]}\r\n                {set claim to stations_claim[cur]}\r\n                {set complete to stations_complete[cur]}\r\n                {set depot to stations_depot[cur]}\r\n                {set subtotal to claim + complete + depot}\r\n\r\n                {if active > 0 && active != subtotal:\r\n                    {active} pending {if active = 1: mission |else: missions}\r\n                    {if claim > 0 || complete > 0 || depot > 0: , including }\r\n                }\r\n                {if claim > 0:\r\n                    {claim} claimable\r\n                    {if complete > 0 && depot > 0: ,\r\n                    |elif complete > 0 || depot > 0: and }\r\n                }\r\n                {if complete > 0:\r\n                    {complete} completed\r\n                    {if depot > 0: and }\r\n                }\r\n                {if depot > 0:\r\n                    {depot} depot\r\n                }\r\n                {if subtotal > 0:\r\n                    {if subtotal = 1: mission |else: missions}\r\n                }\r\n                at {P(station.model)}, {station.name}\r\n                {set cur to cur + 1}\r\n                {if cur = stationsCount - 1: and |elif cur < stationsCount: , }\r\n            }.\r\n        }\r\n\r\n        {if missions_here > station_based:\r\n            {Pause(500)}\r\n            {set remaining to missions_here - station_based}\r\n            The {if station_based > 0: remaining {remaining}}\r\n\r\n            {set cur to 0}\r\n            {while cur < len(non_stations):\r\n                {non_stations[cur]}\r\n               \r\n                {set cur to cur + 1}\r\n                {if cur = len(non_stations)-1: and |elif cur < len(non_stations): ,}\r\n            }\r\n            mission{if remaining > 1:s} must be {OneOf(\"searched for\",\"determined\",\"found\")}.\r\n        }\r\n    }\r\n}\r\n"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Mission completed\")}\r\n\r\n{_ Mission completed }\r\n{_ Triggered when you complete a mission }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \"\")}\t{_ set type to cat(type, \" mission\")}\r\n{set ranktype to token(mission.name,\"_\",2)}\r\n\r\n{if mission.type = \"Spende\":\r\n    {if mission.typeEDName = \"Altruism\":\r\n        {set donate to cat(event.amount, \" Tonnen \",event.commodity)}\r\n    |else:\r\n        {set donate to cat(Humanise(event.donation),\" credditts\")}\r\n    }\r\n\r\n    {OneOf(\"Gespendet {Occasionally(2, '{donate}')} an {Occasionally(2, 'eine dankbare')} {P(mission.faction)}\",\r\n        \"{P(mission.faction)} hat unsere Spende {Occasionally(2, 'von {donate}')} erhalten\",\r\n        \"{P(mission.faction)} dankt uns für unsere Spende {Occasionally(2, 'von {donate}')}\")}\r\n    {F(\"Mission faction state\")}.\r\n\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\" || ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    Wir haben die {if type = \"\" : Mission |else: {type}Mission} erfolgreich {OneOf(\"beendet\",\"abgeschlossen\")}\r\n|elif mission.communal:\r\n    Wir haben das Gemeinschaftsziel: {mission.name} abgeschlossen.\r\n    Wir haben {set value to mission.reward} {F(\"HuVal\")} credditts für \r\n    {OneOf(\"unseren Beitrag\",\"unsere Teilnahme\",\"unsere Unterstützung\")} {OneOf('erhalten','bekommen')}\r\n|else:\r\n    {if event.reward > 0:\r\n        {OneOf(\"{type} abgeschlossen. Wir haben {set value to event.reward} {F('HuVal')} credditts\r\n               {OneOf('erhalten','bekommen')}\",\r\n            \"Wir haben {set value to event.reward} {F('HuVal')} credditts für \r\n                {OneOf('die erfolgreiche {type}','die Fertigstellung der {type}',\r\n                    'den erfolgreichen Abschluss der {type}')} {OneOf('erhalten','bekommen')}\")\r\n        }\r\n    |else:\r\n        {OneOf(\"{type} abgeschlossen\",\r\n        \"Wir haben die {type} erfolgreich abgeschlossen\",\r\n        \"Die {type} wurde erfolgreich beendet\")}\r\n   }\r\n}\r\n{if mission.type != \"Spende\": {F(\"Mission faction state\")}}.\r\n\r\n{if event.rewardCommodity && event.rewardCommodity != \"\":\r\n    {Pause(500)}\r\n    {if event.rewardCommodityAmount = 0:\r\n        {if event.reward > 0:\r\n            {OneOf(\"Wie auch immer \",\"Aber \")}\r\n        }\r\n        wir können die Frachtbelohnung nicht annehmen, {OneOf(\"da\", \"weil\")}\r\n        {if ship.cargocapacity = 0:\r\n            wir keinen Frachtraum haben.\r\n        |else:\r\n            unser Frachtraum voll {Occasionally(2,\"beladen\")} ist.\r\n        }\r\n    |else:         \r\n        {if event.reward > 0: {OneOf(\"Zusätzlich haben wir\", \"und noch\")}\r\n        }\r\n        {event.rewardCommodityAmount} tonne{if event.rewardCommodityAmount > 1:n} \r\n        {set translate to event.rewardCommodity} {F(\"Translate Commodity\")}\r\n        {OneOf(\"bekommen\", \"erhalten\", \"in Empfang genommen\", \"in Empfang nehmen dürfen\", \"empfangen\")}.\r\n    }\r\n|elif event.rewardMaterial && event.rewardMaterial != \"\":\r\n    {if event.reward > 0: {OneOf(\"Zusätzlich haben wir\", \"und noch\")}\r\n    }\r\n    {event.rewardMaterialAmount} Einheiten {set translate to event.rewardMaterial} {F(\"Translate Commodity\")}\r\n    {OneOf(\"bekommen\", \"erhalten\", \"in Empfang genommen\", \"in Empfang nehmen dürfen\", \"empfangen\")}.\r\n}\r\n\r\n{if ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    {Pause(500)}\r\n    {set rank to cmdr.federationrating.rank + 1}\r\n\r\n    Glückwunsch {OneOf(\"Kommandant {cmdr.name}\",\"Sir\")}! \r\n    Sie sind von der föderalen Marine um einen Rang\r\n    {OneOf('hoch gestuft','befördert')} worden\r\n\r\n    {if rank = 3 || Rang = 3:\r\n        , und haben die Möglichkeit zum Kauf des föderahlen Dropp ship erhalten.\r\n    |elif rank = 4 || Rang = 4:\r\n        , und haben jetzt Zugang zum System {P(\"Sol\")}\r\n    |elif rank = 5 || Rang = 5:\r\n        , und haben die Möglichkeit zum Kauf des föderahlen Assault Ship erhalten.\r\n        Und Sie dürfen nun auch die Systeme {P(\"Vega\")} und {P(\"Beta Hydri\")} betreten.\r\n    |elif rank = 6 || Rang = 6:\r\n        , und haben die Erlaubnis für das System PLX 695\r\n    |elif rank = 7 || Rang = 7:\r\n        , und haben die Möglichkeit zum Kauf des föderahlen Gann ship erhalten.\r\n        Und Sie haben nun Zugang zum System Ross 128\r\n    |elif rank = 8 || Rang = 8:\r\n        , und haben jetzt Zugang zum System {P(\"Exbeur\")}\r\n    |elif rank = 10 || Rang = 10:\r\n        , und haben jetzt Zugang zum System {P(\"Hors\")}\r\n    |elif rank = 12 || Rang = 12:\r\n        , und haben die Möglichkeit zum Kauf der föderahlen Korvette erhalten.\r\n    |elif rank = 14 || Rang = 14:\r\n        , und haben hiermit den höchsten Rang erreicht.\r\n    }.\r\n\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\":\r\n    {Pause(500)}\r\n    {set rank to cmdr.empirerating.rank + 1}\r\n\r\n    Glückwunsch {OneOf(\"Kommandant {cmdr.name}\",\"Sir\")}! \r\n    Sie sind vom Imperium um einen Rang\r\n    {OneOf('hoch gestuft','befördert')} worden\r\n\r\n    {if rank = 1 || Rang = 1:\r\n        Sie haben die Berechtigung zum Kauf des imperialen Eagle erhalten.\r\n    |elif rank = 3 || Rang = 3:\r\n        Sie haben die Berechtigung zum Kauf des imperialen Courier erhalten.\r\n    |elif rank = 4 || Rang = 4:\r\n        Ihnen wird die Ehre zuteil, das System {P(\"Archenar\")} zu betreten.\r\n    |elif rank = 7 || Rang = 7:\r\n        Sie haben die Berechtigung zum Kauf des imperialen Clipper erhalten.\r\n       Und die Ehre, das {P(\"Summer-land\")} System zu betreten.\r\n    |elif rank = 10 || Rang = 10:\r\n        Sie haben die Ehre erhalten, das {P(\"Facece\")} System zu betreten.\r\n    |elif rank = 12 || Rang = 12:\r\n        Sie haben die Berechtigung zum Kauf der imperialen Cutter erhalten.\r\n    |elif rank = 14 || Rang = 14:\r\n        Sie haben den höchsten Rang erreicht, mein König.\r\n   }.\r\n}\r\n\r\n{_\r\n- missionid             The ID of the mission\r\n- name                  The name of the mission\r\n- faction               The faction receiving the mission\r\n- communal              True if the mission is a community goal\r\n- commodity             The commodity involved in the mission (if applicable)\r\n- amount                The amount of the commodity involved in the mission (if applicable)\r\n- reward                The monetary reward for completing the mission\r\n- permitsawarded        The permits rewarded for completing the mission\r\n- commodityrewards      The commodity rewarded for completing the mission\r\n- materialsrewards      The materials rewarded for completing the mission\r\n- donation              The monetary donation when completing the mission\r\n- rewardPermit          The permit reward name (if applicable)\r\n- rewardCommodity       The commodity reward name (if applicable)\r\n- rewardCommodityAmount The amount of the commodity reward (if applicable)\r\n- rewardMaterial        The material reward name (if applicable)\r\n- rewardMaterialAmount  The amount of the material reward (if applicable)\r\n_}\r\n",
      "name": "Mission completed",
      "description": "Triggered when you complete a mission",
      "default": false,
      "defaultValue": "{_ Mission completed }\r\n{_ Triggered when you complete a mission }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n{set ranktype to token(mission.name,\"_\",2)}\r\n{set rewards to []}\r\n\r\n{if mission.type = \"Donation\":\r\n    {if mission.typeEDName = \"Altruism\":\r\n        {set donated to cat(event.amount, \" tonnes of \",event.commodity)}\r\n    |else:\r\n        {set donated to cat(Humanise(event.donation),\" credits\")}\r\n    }\r\n\r\n    {OneOf(\"Donated {Occasionally(2, '{donated}')} to {Occasionally(2, 'a grateful')} {P(mission.faction, 'faction')}\",\r\n        \"{P(mission.faction, 'faction')} has received your donation {Occasionally(2, 'of {donated}')}\",\r\n        \"{P(mission.faction, 'faction')} thanks you for your donation {Occasionally(2, 'of {donated}')}\")}\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\":\r\n    You have {OneOf(\"completed the Empirial {type} successfully\",\"successfully completed the Empirial {type}\")}\r\n|elif ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    You have {OneOf(\"completed the Federal {type} successfully\",\"successfully completed the Federal {type}\")}\r\n|elif mission.communal:\r\n    You have completed the community goal: {mission.localisedname}\r\n|else:\r\n    {type} {Occasionally(2, \"successfully\")} completed\r\n}\r\n{F(\"Mission faction state\")}.\r\n\r\n{if len(event.permitsawarded) > 0:\r\n    {for permit in event.permitsawarded:\r\n        {set permitReward to:\r\n            {OneOf(\"a permit\", \"clearance\")} {OneOf(\"for\", \"to visit\")} the {permit} system\r\n        }\r\n        {set rewards to cat(rewards, [permitReward])}\r\n    }\r\n}\r\n\r\n{if len(event.commodityrewards) > 0:\r\n    {for commodity in event.commodityrewards:\r\n        {set commodityReward to:\r\n            {commodity.amount}\r\n            {if commodity.amount > 1: tons |else: ton} \r\n            of {commodity.commodity}\r\n        }\r\n        {set rewards to cat(rewards, [commodityReward])}\r\n    }\r\n}\r\n\r\n{if len(event.materialsrewards) > 0:\r\n    {for material in event.materialsrewards:\r\n        {set materialReward to:\r\n            {material.amount}\r\n            {if material.amount > 1: units |else: unit} \r\n            of {material.material}\r\n        }\r\n        {set rewards to cat(rewards, [materialReward])}\r\n    }\r\n}\r\n\r\n{if event.reward > 0:\r\n    {set creditReward to: {Humanise(event.reward)} credits }\r\n    {set rewards to cat(rewards, [creditReward])}\r\n}\r\n\r\n{if len(rewards) > 0:\r\n    You have {OneOf('received','been awarded')} {List(rewards)}\r\n    {if event.faction:\r\n        {Occasionally(3, 'from {P(event.faction, \"faction\")}')}\r\n    }.\r\n}\r\n\r\n{_ Update to next system in route if conditions met _}\r\n{Pause(1000)}\r\n{set next_system to RouteDetails(\"update\")}"
    },
    "Mission expired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EVENT: Mission expired\")}\r\n\r\n{_ Mission expired }\r\n{_ Triggered when a mission has expired }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'expired')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{type} {if mission.faction: für {mission.faction}} ist abgelaufen.\r\n{if mission.commodity:\r\n    {for cargo in inventory:\r\n        {if cargo.name = mission.commodity && cargo.haulage > 0:\r\n            Alle Waren der Mission werden als gestohlen markiert.\r\n        }\r\n    }\r\n}\r\n\r\n{_\r\n- missionid\tThe ID of the mission\r\n- name \t\tThe name of the mission\r\n_}",
      "name": "Mission expired",
      "description": "Triggered when a mission has expired",
      "default": false,
      "defaultValue": "{_ Mission expired }\r\n{_ Triggered when a mission has expired }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'expired')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{type} {if mission.faction: for {mission.faction}} has expired.\r\n{if mission.commodity:\r\n    {for cargo in inventory:\r\n        {if cargo.name = mission.commodity && cargo.haulage > 0:\r\n            All mission related cargo will be flagged as stolen.\r\n        }\r\n    }\r\n}"
    },
    "Mission faction state": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Mission faction state\")}\r\n\r\n{_ Mission faction state _}\r\n{_ Report the faction state _}\r\n\r\n{set opening to cat(OneOf(\", während\",\", in\"), \" dieser \", OneOf(\"Zeit\",\"Periode\"))}\r\n{set state to mission.FactionState.invariantName}\r\n\r\n{if state = \"Boom\":\r\n    {opening} {OneOf(\"des kommerziellen Erfolgs\",\"des wirtschaftlichen Booms\")}.\r\n|elif state = \"Bust\":\r\n    {opening} {OneOf(\"der wirtschaftlichen Talfahrt\",\"der Rezession\",\"des wirtschaftlichen Abschwungs\")}.\r\n|elif state = \"CivilLiberty\":\r\n    {opening} der gestärkten bürgerlichen Freiheit.\r\n|elif state = \"CivilUnrest\":\r\n    {opening} {OneOf(\"der zivilen Unruhen\",\"der zivilen Konflikte\")}.\r\n|elif state = \"CivilWar\":\r\n    {opening} {OneOf(\"des Bürgerkrieges\",\"der vermehrten zivilen Konflikten\")}.\r\n|elif state = \"Election\":\r\n    {opening} der Wahlen {OneOf(\"eines neuen Anführers\",\"einer neuen Regierung\")}.\r\n|elif state = \"Expansion\":\r\n    {opening} der Expansion in {OneOf(\"ein Nachbarsystem\",\"ein Nachbarterritorium\",\"einen neuen Einflußbereich\")}.\r\n|elif state = \"Famine\":\r\n    {opening} {OneOf(\"der Hungersnot\",\"der Lebensmittelknappheit\", \"des Nahrungsmangels\")}.\r\n|elif state = \"Incursion\":\r\n    {opening} des Alien- {OneOf(\"Überfalls\",\"Invasion\")}.\r\n|elif state = \"Investment\":\r\n    {opening} des Aufbaus einer neuen Infrastruktur.\r\n|elif state = \"Lockdown\":\r\n    {opening} {OneOf(\"des Kriegsrechts\",\"der verstärkten Überwachung\")}.\r\n|elif state = \"Outbreak\":\r\n    {opening} {OneOf(\"der Pandemie\",\"des medizinischen Notstands\",\"der erhöhten Ansteckungsrate\")}.\r\n|elif state = \"Retreat\":\r\n    {opening} des Rückzugs aus einem {OneOf(\"Nachbarsystem\", \"Nachbarterritorium\",\"Einflußbereich\")}.\r\n|elif state = \"War\":\r\n    {opening} {OneOf(\"des Krieges\",\"des Konflikts\")}.\r\n}\r\n",
      "name": "Mission faction state",
      "description": "Report the faction state",
      "default": false,
      "defaultValue": "{_ Mission faction state _}\r\n{_ Report the faction state _}\r\n\r\n\r\n{set opening to cat(OneOf(\"during\",\"in\"), \" this \", OneOf(\"time\",\"period\"), \" of\")}\r\n{set state to mission.FactionState.invariantName}\r\n\r\n{if state = \"Boom\":\r\n    {opening} {OneOf(\"commercial success\",\"economic boom\")}.\r\n|elif state = \"Bust\":\r\n    {opening} {OneOf(\"economic decline\",\"recession\",\"economic downturn\")}.\r\n|elif state = \"CivilLiberty\":\r\n    {opening} heightened civil liberty.\r\n|elif state = \"CivilUnrest\":\r\n    {opening} {OneOf(\"civil unrest\",\"civil conflict\")}.\r\n|elif state = \"CivilWar\":\r\n    {opening} {OneOf(\"civil war\",\"civil conflict\")}.\r\n|elif state = \"Election\":\r\n    {opening} {OneOf(\"choosing\",\"electing\",\"voting for\")} new {OneOf(\"leaders\",\"leadership\")}.\r\n|elif state = \"Expansion\":\r\n    {opening} expansion into a neighboring {OneOf(\"system\",\"territory\")}.\r\n|elif state = \"Famine\":\r\n    {opening} {OneOf(\"famine\",\"food shortage\")}.\r\n|elif state = \"Incursion\":\r\n    {opening} alien {OneOf(\"incursion\",\"invasion\")}.\r\n|elif state = \"Investment\":\r\n    {opening} investment in its infrastructure.\r\n|elif state = \"Lockdown\":\r\n    {opening} {OneOf(\"martial law\",\"enhanced security\")}.\r\n|elif state = \"Outbreak\":\r\n    {opening} {OneOf(\"contagion\",\"medical emergency\",\"outbreak relief\")}.\r\n|elif state = \"Retreat\":\r\n    {opening} retreat from a neighboring {OneOf(\"system\",\"territory\")}.\r\n|elif state = \"War\":\r\n    {opening} {OneOf(\"war\",\"conflict\")}.\r\n}"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Mission failed\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'fail')}\r\n\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{OneOf(\"{type} {if mission.faction: für {mission.faction}} fehl geschlagen\", \r\n    \"Du hast die {type} {if mission.faction: für {mission.faction}} verfehlt\")}.\r\n    \r\n{_\r\n- missionid The ID of the mission\r\n- name \t\tThe name of the mission\r\n- fine \t\tThe fine levied\r\n_}",
      "name": "Mission failed",
      "description": "Triggered when you fail a mission",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'fail')}\r\n\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{OneOf(\"{type} {if mission.faction: for {mission.faction}} failed\", \r\n    \"You have failed the {type} {if mission.faction: for {mission.faction}}\")}.\r\n\r\n\r\n\r\n"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Mission redirected\")}\r\n\r\n{_ Mission redirected }\r\n{_ Triggered when a mission is redirected }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'redirected')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{if mission.status = \"Complete\" && mission.destinationsystem = mission.originsystem:\r\n    {type} Bedingungen erfüllt. Wir müssen zurück in das Start-System der Mission.\r\n|elif mission.destinations:\r\n    Wir müssen die Verkettete {type} im System {event.newdestinationsystem} fortsetzen.\r\n|else:\r\n    Wir müssen die {type}\r\n    {if event.newdestinationstation:\r\n       zu {event.newdestinationstation} im System {event.newdestinationsystem}.\r\n    |else:\r\n       im System {event.newdestinationsystem}\r\n    } fortsetzen.\r\n}\r\n\r\n{_\r\n- missionid \t\t\tThe ID of the mission\r\n- name \t\t\t\t\tThe name of the mission\r\n- newdestinationstation The new destination station for the mission\r\n- olddestinationstation The old destination station for the mission\r\n- newdestinationsystem \tThe new destination system for the mission\r\n- olddestinationsystem \tThe old destination system for the mission\r\n_}",
      "name": "Mission redirected",
      "description": "Triggered when a mission is redirected",
      "default": false,
      "defaultValue": "{_ Mission redirected }\r\n{_ Triggered when a mission is redirected }\r\n\r\n{set redirected_from to cat(event.olddestinationsystem,\"_\",event.olddestinationstation)}\r\n{set redirected_to to cat(event.newdestinationsystem,\"_\",event.newdestinationstation)}\r\n\r\n{if state.eddi_context_last_subject = 'mission' \r\n    && state.eddi_context_last_action = 'redirected' \r\n    && state.eddi_context_redirected_mission = event.name\r\n    && state.eddi_context_redirected_from = redirected_from \r\n    && state.eddi_context_redirected_to = redirected_to:\r\n    {_ Duplicate from stacked similar mission, do nothing }\r\n|else:\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'mission')}\r\n    {SetState('eddi_context_last_action', 'redirected')}\r\n    {SetState('eddi_context_redirected_mission', event.name)}\r\n    {SetState('eddi_context_redirected_from', cat(event.olddestinationsystem,\"_\",event.olddestinationstation))}\r\n    {SetState('eddi_context_redirected_to', cat(event.newdestinationsystem,\"_\",event.newdestinationstation))}\r\n    \r\n    {set mission to MissionDetails(event.missionid)}\r\n\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(type, \" mission\")}\r\n\r\n    {if mission.status = \"Claim\" && mission.destinationsystem = mission.originsystem:\r\n        {type} {Occasionally(2, \"requirements\")} completed.\r\n        Redirected to {Occasionally(2, \"mission\")} origin.\r\n    |elif mission.destinations:\r\n        Chained {type} redirected to the {P(event.newdestinationsystem, \"starsystem\")} system.\r\n    |else:\r\n        {type} redirected to \r\n        {if event.newdestinationstation:\r\n            {event.newdestinationstation} in the {P(event.newdestinationsystem, \"starsystem\")} system.\r\n        |else:\r\n            the {P(event.newdestinationsystem, \"starsystem\")} system.\r\n        }\r\n    }\r\n}"
    },
    "Mission report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Mission report\")}\r\n\r\n{_ Mission report }\r\n{_ Report the current mission log }\r\n\r\n{set mission_report to true}\r\n{F(\"Mission check galaxy\")}\r\n",
      "name": "Mission report",
      "description": "OK ! Report the current mission log",
      "default": false,
      "defaultValue": "{_ Mission report }\r\n{_ Report the current mission log }\r\n\r\n\r\n{set mission_report to true}\r\n{F(\"Mission check galaxy\")}\r\n"
    },
    "Mission warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Mission warning\")}\r\n\r\n{_ Mission warning }\r\n{_ Triggered when a mission is about to expire, based on a set threshold }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'warning')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\nWarnung: Die {type} {if mission.faction: für {mission.faction}} wird in {event.remaining} Minuten ablaufen.\r\n\r\n{_\r\n- missionid The ID of the mission\r\n- name \t\tThe name of the mission\r\n- remaining The time remaining (in minutes) to complete the mission\r\n_}",
      "name": "Mission warning",
      "description": "Triggered when a mission is about to expire, based on a set threshold",
      "default": false,
      "defaultValue": "{_ Mission warning }\r\n{_ Triggered when a mission is about to expire, based on a set threshold }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'warning')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\nWarning: {type} {if mission.faction: for {mission.faction}} will expire in {event.remaining} minutes.\r\n\r\n"
    },
    "Missions": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions }\r\n{_ Triggered at session start from Missions event }",
      "name": "Missions",
      "description": "Triggered at session start from Missions event",
      "default": false,
      "defaultValue": null
    },
    "Missions route": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Missions route\")}\r\n\r\n{_ Missions route }\r\n{_ Get the missions route for various mission details }\r\n\r\n{set curr to SystemDetails(system.name)}\r\n\r\n{if event.routetype = \"expiring\":\r\n    {if event.distance > 0:\r\n        {set mission to MissionDetails(event.missionids[0])}\r\n\r\n        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n            {set type to \"Transport \"}\r\n            {set type to cat(type, mission.passengertype)}\r\n        |else:\r\n            {set type to mission.type}\r\n        }\r\n        {set type to cat(type, \" mission\")}\r\n\r\n        {type} {if mission.faction: für {mission.faction}}\r\n        {if mission.destinationsystem: im\r\n            {if mission.destinationsystem = curr.name:\r\n                aktuellen System\r\n            |else:\r\n                System {mission.destinationsystem}\r\n            }\r\n        } läuft als nächstes ab.\r\n    |else:\r\n        Keine aktiven Missionen gefunden.\r\n    }\r\n|elif event.routetype = \"farthest\":\r\n    {if event.distance > 0:\r\n        Unser {if missionsCount = 1: einziges |else: weitestes}\r\n        Missionsziel ist im\r\n        {if event.system = curr.name:\r\n            aktuellen System\r\n        |else:\r\n           System {event.system}, {round(event.distance, 1)} Lichtjahre von hier.\r\n        }.\r\n    |else:\r\n        Keine Mission mit einem festgelegten Ziel gefunden.\r\n    }\r\n|elif event.routetype = \"most\":\r\n    {if missionsCount = 1:\r\n        Unser einziges Missionsziel befindet sich \r\n        {if missions[0].destinationsystem = \"\":\r\n            in einem unbekannten System.\r\n        |elif missions[0].destinationsystem = curr.name:\r\n            im aktuellen System.\r\n        |else:\r\n            im System {missions[0].destinationsystem}.\r\n        }\r\n    |else:\r\n        {set systems to split(event.systems, \"_\")}\r\n        {set system_most to event.system}\r\n        {set systems_count to len(systems)}\r\n\r\n        {if systems_count = 1:\r\n            {if system_most = curr.name:\r\n                {set system_most to \" aktuellen System\"}\r\n            |else:\r\n                {set system_most to cat(\"The \", system_most, \" system\")}\r\n            }\r\n            {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                \"{system_most} has {OneOf('the most','most of your')} missions\",\r\n                \"{system_most} has the most missions for you to complete\")}.\r\n        |elif systems_count > 1:\r\n            You have {event.count} mission target{if event.count > 1:s} each, in the\r\n\r\n            {set cur to 0}\r\n            {while cur < len(equal):\r\n                {systems[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = systems_count-1: and |elif cur < systems_count: ,}\r\n            } systems.\r\n        }\r\n    }\r\n|elif event.routetype = \"nearest\":\r\n    {if event.distance > 0:\r\n        Your {if missionsCount = 1: only |else: nearest}\r\n        mission target is in the\r\n        {if event.system = curr.name:\r\n            current system\r\n        |else:\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n    |else:\r\n        Mission not found with a designated target system.\r\n    }\r\n|elif event.routetype = \"route\":\r\n    {if event.routedistance > 0:\r\n        Missions route calculated for {event.count} systems.\r\n        Total route distance is {round(event.routedistance, 1)} lightyears.\r\n        First mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n    |else:\r\n        Unable to calculate missions route.\r\n    }\r\n|elif event.routetype = \"update\":\r\n    {if event.routedistance > 0:\r\n        Next mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n    |else:\r\n        Unable to update to next mission destination.\r\n    }\r\n}\r\n\r\n",
      "name": "Missions route",
      "description": "Get the missions route for various mission details",
      "default": false,
      "defaultValue": null
    },
    "Modification crafted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Modification crafted\")}\r\n\r\n{_\r\n- engineer \t\t\t\tThe name of the engineer crafting the modification\r\n- blueprint \t\t\tThe blueprint being crafted\r\n- module \t\t\t\tThe module being crafted\r\n- level \t\t\t\tThe level of the blueprint being crafted\r\n- quality \t\t\t\tThe progression of the blueprint at the current level, expressed as a percentage\r\n- experimentaleffect \tThe experimental effect being crafted, if applicable\r\n- materials \t\t\tThe materials and quantities used in the crafting (MaterialAmount object)\r\n- commodities \t\t\tThe commodities and quantities used in the crafting (CommodityAmount object)\r\n_}",
      "name": "Modification crafted",
      "description": "Triggered when you craft a modification to a module",
      "default": false,
      "defaultValue": null
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module arrived\")}\r\n\r\n{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nUnser Modul {set translate to event.module.name} {F(\"Translate Ship Module\")} wurde erfolgreich \r\n{if station.name != event.station && event.station: zur}\r\n\r\n{if station.name != event.station && event.station:\r\n  Station {event.station}\r\n   {if system.name != event.system && event.system:\r\n      ins System {event.system}\r\n   }\r\n}\r\n{OneOf(\"transferiert\", \"verschickt\", \"überbracht\")}.\r\n\r\n{_\r\n- ship         The ship you were in when you requested the transfer\r\n- shipid       The ID of the ship you were in when you requested the transfer\r\n- module       The module (object) being transferred\r\n- transfercost The cost for the module transfer\r\n- transfertime The time elapsed during the transfer (in seconds)\r\n- system       The system at which the module shall arrive\r\n- station      The station at which the module shall arrive\r\n_}",
      "name": "Module arrived",
      "description": "Triggered when you complete a module transfer",
      "default": false,
      "defaultValue": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nYour {event.module.name} has\r\n\r\n{OneOf('arrived {if station.name != event.station && event.station: at}', \r\n       'completed its transfer {if station.name != event.station && event.station: to}')}\r\n\r\n{if station.name != event.station && event.station:\r\n   {event.station}\r\n   {if system.name != event.system && event.system:\r\n      in the {event.system} system\r\n   }\r\n}."
    },
    "Module info": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ This event updates `ship` module information: position, power, & priority _}\r\n\r\n{Log(\"EDDI EVENT: Module info\")}\r\n\r\n{_ F(\"Ship loadout function\")}",
      "name": "Module info",
      "description": "Triggered when a ModulesInfo.json file is generated/updated",
      "default": false,
      "defaultValue": "{_ This event updates `ship` module information: position, power, & priority _}"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module purchased\")}\r\n\r\n{set translate to event.buymodule.name} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,4)}\r\n{if V=1:Sie haben}\r\n{if type(event.buymodule.mount) != \"void\":\r\n    {for index, value in event.buymodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1:\r\n        {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n    |elif mount = 2:\r\n        {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n{  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}}\r\n|elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n|elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n|else                : {article}       {if mnt:{mnt}}\r\n}\r\n{if event.buymodule.class >0:{OneOf(\"Klasse\",\"Stufe\",\"Kategorie\",\"Level\")} {event.buymodule.class}}-{event.buymodule.grade}, \r\n\t{Modul}{Turm} für, {set value to event.buyprice} {F(\"HuVal\")} credditts {OneOf(\"gekauft\", \"ausgerüstet\")}\r\n\r\n{set Turm to []}\r\n{set mnt to []}\r\n{if type(event.sellmodule) != \"void\": {if V<3:und |else:,}\r\n    {set translate to event.sellmodule.name} {set Modul to F(\"Translate Ship Module\")}\r\n    {if type(event.sellmodule.mount) != \"void\":\r\n        {for index, value in event.sellmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n        |elif mount = 1:\r\n            {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n        |elif mount = 2:\r\n            {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n        }\r\n    }\r\n    {  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}}\r\n    |elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n    |elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n    |else                : {article}       {if mnt:{mnt}}\r\n    }\r\n    {event.sellmodule.name}{Turm},{if event.sellmodule.class >0:{OneOf(\"der Klasse\",\"der Stufe\",\"der Kategorie\",\"Level\")}\r\n    {event.sellmodule.class}}-{event.sellmodule.grade}, \r\n    \t{if event.sellprice > 0 : für {set value to event.sellprice} {F(\"HuVal\")} credditts verkauft.\r\n    \t|else                   : {OneOf(\"zurückgegeben\",\"abgegeben\")}.\r\n    \t}\r\n\r\n|elif type(event.storedmodule) != \"void\": {if V<3:und}\r\n    {set translate to event.storedmodule.name} {set Modul to F(\"Translate Ship Module\")}\r\n    {if type(event.storedmodule.mount) != \"void\":\r\n        {for index, value in event.storedmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n        |elif mount = 1:\r\n            {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n        |elif mount = 2:\r\n            {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n        }\r\n    }\r\n    {  if article = 'der': {if V<3: einen} {if mnt:{mnt}{if V<3:n|else:r}}\r\n    |elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n    |elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n    |else                : {article}       {if mnt:{mnt}}\r\n    }\r\n    , {if event.storedmodule.class >0:{OneOf(\"Klasse\",\"Stufe\",\"Kategorie\",\"Level\")} \r\n    {event.storedmodule.class}}-{event.storedmodule.grade}, {event.storedmodule.name}{Turm} eingelagert\r\n}.\r\n\r\n{_\r\n- ship          The ship for which the module was purchased\r\n- shipid        The ID of the ship for which the module was purchased\r\n- slot          The outfitting slot\r\n- buymodule     The module (object) purchased\r\n- buyprice      The price of the module being purchased\r\n- sellmodule    The module (object) being sold (if replacing an existing module)\r\n- sellprice     The price of the sold module (if replacing an existing module)\r\n- storedmodule  The module (object) being stored (if existing module stored)\r\n_}\r\n",
      "name": "Module purchased",
      "description": "Triggered when you purchase a module in outfitting",
      "default": false,
      "defaultValue": "You have purchased a\r\n{if icao_active:\r\n    {event.buymodule.class} {ICAO(event.buymodule.grade)}\r\n|else:\r\n    {Spacialise(cat(event.buymodule.class, event.buymodule.grade))}\r\n}\r\n\r\n{if type(event.buymodule.mount) != \"void\":\r\n    {for index, value in event.buymodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n{event.buymodule.name} for {Humanise(event.buyprice)} credits\r\n\r\n{if type(event.sellmodule) != \"void\":\r\n    , and sold a\r\n    {if icao_active:\r\n        {event.sellmodule.class} {ICAO(event.sellmodule.grade)}\r\n    |else:\r\n        {Spacialise(cat(event.sellmodule.class, event.sellmodule.grade))}\r\n    }\r\n\r\n    {if type(event.sellmodule.mount) != \"void\":\r\n        {for index, value in event.sellmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n       |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.sellmodule.name} for {Humanise(event.sellprice)} credits\r\n\r\n|elif type(event.storedmodule) != \"void\":\r\n    , and stored a\r\n    {if icao_active:\r\n        {event.storedmodule.class} {ICAO(event.storedmodule.grade)}\r\n    |else:\r\n        {Spacialise(cat(event.storedmodule.class, event.storedmodule.grade))}\r\n    }\r\n\r\n    {if type(event.storedmodule.mount) != \"void\":\r\n        {for index, value in event.storedmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n       |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.storedmodule.name}\r\n}.\r\n\r\n"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module retrieved\")}\r\n\r\n{set translate to event.module.name} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,4)}\r\n{if V=1:Sie haben}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1:\r\n        {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n    |elif mount = 2:\r\n        {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n{  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}}\r\n|elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n|elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n|else                : {article}       {if mnt:{mnt}}\r\n}\r\n{if event.module.class >0:{OneOf(\"Klasse\",\"Stufe\",\"Kategorie\",\"Level\")} {event.module.class}}-{event.module.grade},\r\n{Modul}{Turm} aus dem Lager erneut ausgerüstet\r\n\r\n{if type(event.swapoutmodule) != \"void\":, {if V<3:und}\r\n    {set translate to event.swapoutmodule.name} {set Modul to F(\"Translate Ship Module\")}\r\n    {if type(event.swapoutmodule.mount) != \"void\":\r\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n        |elif mount = 1:\r\n            {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n        |elif mount = 2:\r\n            {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n        }\r\n    }\r\n    {  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}}\r\n    |elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n    |elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n    |else                : {article}       {if mnt:{mnt}}\r\n    }\r\n    {if event.swapoutmodule.class >0:{OneOf(\"Klasse\",\"Stufe\",\"Kategorie\",\"Level\")} \r\n    {event.swapoutmodule.class}}-{event.swapoutmodule.grade}, {Modul}{Turm} \r\n    {if type(event.cost) != \"void\": für {set value to event.cost} {F(\"HuVal\")} credditts} eingelagert\r\n}.\r\n\r\n{_\r\n- ship                   The ship for which the module was retrieved\r\n- shipid                 The ID of the ship for which the module was retrieved\r\n- slot                   The outfitting slot\r\n- module                 The module (object) retrieved from storage\r\n- cost                   The cost of retrieval\r\n- engineermodifications  The name of the modification blueprint\r\n- swapoutmodule          The module (object) swapped out (if the slot was not empty)\r\n_}\r\n",
      "name": "Module retrieved",
      "description": "Triggered when you fetch a previously stored module",
      "default": false,
      "defaultValue": "You have retrieved a \r\n{if icao_active:\r\n    {event.module.class} {ICAO(event.module.grade)}\r\n|else:\r\n    {Spacialise(cat(event.module.class, event.module.grade))}\r\n}\r\n\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} from storage\r\n\r\n{if type(event.swapoutmodule) != \"void\":\r\n    and stored a \r\n    {if icao_active:\r\n        {event.swapoutmodule.class} {ICAO(event.swapoutmodule.grade)}\r\n    |else:\r\n        {Spacialise(cat(event.swapoutmodule.class, event.swapoutmodule.grade))}\r\n    }\r\n    {if type(event.swapoutmodule.mount) != \"void\":\r\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n       |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.swapoutmodule.name}\r\n}\r\n\r\n{if type(event.cost) != \"void\": for a cost of {Humanise(event.cost)} credits}\r\n."
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module sold\")}\r\n\r\n{set translate to event.module.name} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,4)}\r\n{if V=1:Sie haben}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0   : {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1 : {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n    |elif mount = 2 : {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n\r\n{  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}}\r\n|elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n|elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n|else                : {article}       {if mnt:{mnt}}\r\n}\r\n\r\n{Modul}{Turm},\r\n{if event.module.class >0:\r\n\t{OneOf(\"der Klasse\",\"der Stufe\",\"der Kategorie\",\"Level\")} \r\n\t{event.module.class}\r\n} \r\n\r\n{event.module.grade}, für {set value to event.price} {F(\"HuVal\")} credditts verkauft.\r\n\r\n{_\r\n- ship    The ship from which the module was sold\r\n- shipid  The ID of the ship from which the module was sold\r\n- slot    The outfitting slot\r\n- module  The module (object) being sold\r\n- price   The price of the module being sold\r\n_}\r\n",
      "name": "Module sold",
      "description": "Triggered when selling a module to outfitting",
      "default": false,
      "defaultValue": "You have sold a \r\n{if icao_active:\r\n    {event.module.class} {ICAO(event.module.grade)}\r\n|else:\r\n    {Spacialise(cat(event.module.class, event.module.grade))}\r\n}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} for {Humanise(event.price)} credits."
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module sold from storage\")}\r\n\r\n{set translate to event.module.name} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,4)}\r\n{if V=1:Sie haben}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1:\r\n        {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n    |elif mount = 2:\r\n        {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n{  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}}\r\n|elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n|elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n|else                : {article}       {if mnt:{mnt}}\r\n}\r\n\r\n{Modul}{Turm},{if event.module.class >0:{OneOf(\"der Klasse\",\"der Stufe\",\"der Kategorie\",\"Level\")} {event.module.class}} {event.module.grade}, für {set value to event.price} {F(\"HuVal\")} credditts aus dem Lagerbestand verkauft.\r\n\r\n{_\r\n- ship    The ship from which the module was sold\r\n- shipid  The ID of the ship from which the module was sold\r\n- module  The module (object) being sold\r\n- price   The price of the module being sold\r\n_}\r\n",
      "name": "Module sold from storage",
      "description": "Triggered when selling a module from storage",
      "default": false,
      "defaultValue": "You have sold a \r\n{if icao_active:\r\n    {event.module.class} {ICAO(event.module.grade)}\r\n|else:\r\n    {Spacialise(cat(event.module.class, event.module.grade))}\r\n}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} from your stores for {Humanise(event.price)} credits."
    },
    "Module sold remote": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module sold remote\")}\r\n\r\nSie haben ein Klasse {event.module.class}-{event.module.grade}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        starr\r\n    |elif mount = 1:\r\n        kardanisch\r\n    |elif mount = 2:\r\n        Turm\r\n    }\r\n}\r\n\r\n{event.module.name} aus Lagerbeständen für {event.price} credditts verkauft.\r\n",
      "name": "Module sold remote",
      "description": "Triggered when selling a module in storage at another station",
      "default": false,
      "defaultValue": null
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module stored\")}\r\n\r\n{set translate to event.module.name} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,4)}\r\n{_ set V to 1 - für Fehlersuche}\r\n{if V = 1 : Sie haben}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1:\r\n        {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n    |elif mount = 2:\r\n        {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n\r\n{ if article = der :\t{if V < 3 : ein}\t{if V = 1 : en} {if mnt : {mnt} {if V < 2 : n |else : r}} \r\n|elif article = die :\t{if V < 3 : eine}\t{if mnt : {mnt}}\r\n|elif article = das :\t{if V < 3 : ein}\t{if mnt : {mnt}s}\r\n|else:\t\t\t\t\t{article}\t\t\t{if mnt : {mnt}}\r\n}\r\n\r\n{Modul}{Turm},{OneOf(\"der Klasse\",\"der Stufe\",\"der Kategorie\",\"Level\")} {event.module.class}-{event.module.grade},\r\n{if V != 1: wurde}\r\n{if type(event.cost) != \"void\": für {set value to event.cost} {F(\"HuVal\")} credditts}\r\neingelagert.\r\n\r\n{_\r\n- ship                  The ship from which the module was stored\r\n- shipid                The ID of the ship from which the module was stored\r\n- slot                  The outfitting slot\r\n- module                The module (object) being stored\r\n- cost                  The cost of storage (if any)\r\n- engineermodifications The name of the modification blueprint\r\n- replacementmodule     The module (object) replacement (if a core module)\r\n_}",
      "name": "Module stored",
      "description": "Triggered when you store a module",
      "default": false,
      "defaultValue": "You have stored a \r\n{if icao_active:\r\n    {event.module.class} {ICAO(event.module.grade)}\r\n|else:\r\n    {Spacialise(cat(event.module.class, event.module.grade))}\r\n}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name}\r\n\r\n{if type(event.cost) != \"void\": for a cost of {Humanise(event.cost)} credits}."
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module swapped\")}\r\n\r\n{set translate to event.frommodule.name} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,4)}\r\n{if V=1:Sie haben}\r\n{if type(event.frommodule.mount) != \"void\":\r\n    {for index, value in event.frommodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1:\r\n        {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n    |elif mount = 2:\r\n        {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n{  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}}\r\n|elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n|elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n|else                : {article}       {if mnt:{mnt}}\r\n}\r\n\r\n{if event.frommodule.class > 0 : {OneOf(\"Klasse\",\"Stufe\",\"Kategorie\",\"Level\")}\r\n{event.frommodule.class}}-{event.frommodule.grade}, {Modul}{Turm}\r\n\r\n{if event.tomodule: gegen\r\n    {set translate to event.tomodule.name} {set Modul to F(\"Translate Ship Module\")}\r\n    {if type(event.tomodule.mount) != \"void\":\r\n        {for index, value in event.tomodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n        |elif mount = 1:\r\n            {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n        |elif mount = 2:\r\n            {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n        }\r\n    }\r\n    {  if article = 'der': {if V<3: einen} {if mnt:{mnt}n}\r\n    |elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n    |elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n    |else                : {article}       {if mnt:{mnt}}\r\n    }\r\n    {Modul}{Turm} der {if event.tomodule.class > 0 : Klasse {event.tomodule.class}}-{event.tomodule.grade} getauscht\r\n|else: \r\n    in einen bisher leeren Modulplatz verschoben.\r\n}.\r\n\r\n{_\r\n- ship \t\t\tThe ship for which the module was swapped\r\n- shipid \t\tThe ID of the ship for which the module was swapped\r\n- fromslot \t\tThe slot from which the swap was initiated\r\n- frommodule \tThe module (object) from which the swap was initiated\r\n- toslot \t\tThe slot to which the swap was finalised\r\n- tomodule \t\tThe module (object) to which the swap was finalised\r\n_}",
      "name": "Module swapped",
      "description": "Triggered when modules are swapped between slots on the ship",
      "default": false,
      "defaultValue": "You have swapped the positions of a \r\n{if icao_active:\r\n    {event.frommodule.class} {ICAO(event.frommodule.grade)}\r\n|else:\r\n    {Spacialise(cat(event.frommodule.class, event.frommodule.grade))}\r\n}\r\n\r\n{if type(event.frommodule.mount) != \"void\":\r\n    {for index, value in event.frommodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.frommodule.name} and \r\n\r\n{if event.tomodule:\r\n    a \r\n    {if icao_active:\r\n        {event.tomodule.class} {ICAO(event.tomodule.grade)}\r\n    |else:\r\n        {Spacialise(cat(event.tomodule.class, event.tomodule.grade))}\r\n    }\r\n    {if type(event.tomodule.mount) != \"void\":\r\n        {for index, value in event.tomodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.tomodule.name}.\r\n|else: \r\n    an empty slot.\r\n}"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module transfer\")}\r\n\r\n{set translate to event.module.name} {set Modul to F(\"Translate Ship Module\")}\r\nSie haben den Transfer von\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0 : {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1 : {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexibele\",\"bewegliche\")}\r\n    |elif mount = 2: {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n{  if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<3:n|else:r}}\r\n|elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n|elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n|else                : {article}       {if mnt:{mnt}}\r\n}\r\n\r\n{if event.module.class > 0 : {OneOf(\"der Klasse\",\"der Stufe\",\"der Kategorie\",\"Level\")} {event.module.class}}\r\nRang {event.module.grade}, {Modul}{Turm} {if event.transfercost: für {set value to event.transfercost}\r\n{F(\"HuVal\")} credditts} veranlasst.\r\n\r\n{set t_remaining to event.transfertime}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   {OneOf(\"Erwartete Ankunft\", \"Vorraussichtliches Eintreffen\", \"Verfügbarkeit\")} in\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} Tagen,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} Stunden,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: und}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} Minuten\r\n   }\r\n}\r\n.\r\n\r\n{_ \r\n- ship         The ship you are in when you request the transfer\r\n- shipid       The ID of the ship you are in when you request the transfer\r\n- module       The module (object) being transferred\r\n- transfercost The cost for the module transfer\r\n- transfertime The time until the module arrives (in seconds)\r\n_}\r\n",
      "name": "Module transfer",
      "description": "Triggered when you transfer a module from storage at another station",
      "default": false,
      "defaultValue": "You have transferred a \r\n{if icao_active:\r\n    {event.module.class} {ICAO(event.module.grade)}\r\n|else:\r\n    {Spacialise(cat(event.module.class, event.module.grade))}\r\n}\r\n\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} \r\n\r\n{if event.transfercost: for a cost of {Humanise(event.transfercost)} credits}.\r\n\r\n{set t_remaining to event.transfertime}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Expected arrival in:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} days,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} hours,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutes.\r\n   }\r\n}"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Module stored\")}\r\n\r\n{set translate to event.module.name} {set Modul to F(\"Translate Ship Module\")}\r\n{set V to rand(1,4)}\r\n{if V=1:Sie haben}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        {set mnt to OneOf(\"fixierte\",\"starre\")}\r\n    |elif mount = 1:\r\n        {set mnt to OneOf(\"kardanisch aufgehängte\",\"flexible\",\"bewegliche\")}\r\n    |elif mount = 2:\r\n        {set mnt to []} {set article to \"der\"} {set Turm to \"-Turm\"}\r\n    }\r\n}\r\n\r\n{if article = 'der': {if V<3: ein}{if V=1:en} {if mnt:{mnt}{if V<2:n|else:r}} \r\n|elif article = 'die': {if V<3: eine}  {if mnt:{mnt}}\r\n|elif article = 'das': {if V<3: ein}   {if mnt:{mnt}s}\r\n|else                : {article}       {if mnt:{mnt}}\r\n}\r\n\r\n{Modul}{Turm},{OneOf(\"der Klasse\",\"der Stufe\",\"der Kategorie\",\"Level\")} {event.module.class}-{event.module.grade},\r\n{if type(event.cost) != \"void\": für {set value to event.cost} {F(\"HuVal\")} credditts}\r\neingelagert.\r\n\r\n{_\r\n- ship                  The ship from which the module was stored\r\n- shipid                The ID of the ship from which the module was stored\r\n- slot                  The outfitting slot\r\n- module                The module (object) being stored\r\n- cost                  The cost of storage (if any)\r\n- engineermodifications The name of the modification blueprint\r\n- replacementmodule     The module (object) replacement (if a core module)\r\n_}\r\n",
      "name": "Modules stored",
      "description": "Triggered when you store multiple modules",
      "default": false,
      "defaultValue": "You have stored the following modules:\r\n\r\n{for module in event.modules:\r\n    {if icao_active:\r\n        {module.class} {ICAO(module.grade)}\r\n    |else:\r\n        {Spacialise(cat(module.class, module.grade))}\r\n    }\r\n    {if type(module.mount) != \"void\":\r\n        {for index, value in module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {module.name}.\r\n    {Pause(400)}\r\n}"
    },
    "Music": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Music\")}\r\n\r\n{_\r\n- musictrack \tPossible track names are: NoTrack, MainMenu, CQCMenu, SystemMap, GalaxyMap, \r\n\t\t\t\tGalacticPowers, CQC, DestinationFromHyperspace, DestinationFromSupercruise, \r\n\t\t\t\tSupercruise, Combat_Unknown, Unknown_Encounter, CapitalShip, CombatLargeDogFight,\r\n\t\t\t\tCombat_Dogfight, Combat_SRV, Unknown_Settlement, DockingComputer, Starport,\r\n\t\t\t\tUnknown_Exploration, Exploration. Note: Other music track names may be used in future.\r\n_}",
      "name": "Music",
      "description": "Triggered when the game music 'mood' changes",
      "default": false,
      "defaultValue": null
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Nav beacon scan\")}\r\n\r\n{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n{set beacon to OneOf(\"Die Navigationsboje\", \"Der Systemorbiter\", \"Der Nav-Bihcen\")}\r\n{OneOf(\"{beacon} hat detaillierte Informationen von {event.numbodies} Objekten in diesem System übertragen.\",\r\n\"Details von {event.numbodies} Objekten in diesem System empfangen.\")}\r\n\r\n{Pause(500)}\r\n\r\n{_ - numbodies \tThe number of bodies included in the scan dump _}\r\n",
      "name": "Nav beacon scan",
      "description": "Triggered when you scan a nav beacon, before the scan data for all the bodies in the system is written into the journal",
      "default": false,
      "defaultValue": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n{set nav to OneOf(\"nav\", \"navigation\")}\r\n{set beacon to OneOf(\"beacon\", \"buoy\")}\r\n{OneOf(\"This {nav} {beacon} has transferred details of {event.numbodies} bodies in this system.\",\r\n \"Details on {event.numbodies} bodies in this system received.\")}\r\n\r\n{Pause(500)}"
    },
    "Near surface": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Near surface\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_gravity_surface', 0)}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(event.body, event.system)}\r\n\r\n{Pause(2000)}\r\n\r\n{if event.approaching_surface: {OneOf(\"Orbital eintritt\", \"Eintritt in die Umlaufbahn\")} \r\n\t{if event.body: bei {event.body};}\r\n    {set gravity to round(body.gravity,2)}\r\n\t{SetState('eddi_gravity_surface', gravity)}\r\n\r\n    {Pause(500)}\r\n\r\n    Das Objekt hat eine\r\n    {if reportbody.gravity < 0.5 : geringe\r\n    |elif reportbody.gravity < 2  : mittlere\r\n    |elif reportbody.gravity < 4  : hohe\r\n    |else                         : extrem hohe\r\n    }\r\n    Gravitation von {set value to (gravity)} {F(\"Humanise ValueGer\")} G.\r\n\r\n\t{Pause(1000)}\r\n\r\n\t{for compartment in ship.compartments:\r\n    \t{if compartment.module.name = \"Planetenfahrzeug-Hangar\":\r\n    \t    {SetState('srv_installed', true)}\r\n    \t    {if compartment.module.enabled:\r\n    \t       {SetState('srv_enabled', true)}\r\n    \t       Kom mahnder, im Fall einer Landung verfügen wir zur genaueren Erkundung über \r\n    \t       {if compartment.size = 2 || compartment.size = 3: ein Bodenfahrzeug.\r\n    \t       |elif compartment.size = 4: zwei Bodenfahrzeuge.\r\n    \t       |elif compartment.size > 4: mehrere Bodenfahrzeuge im Hangar.\r\n    \t       }\r\n    \t    |else: Es werden keine Bodenfahrzeuge mitgeführt.\r\n    \t    }\r\n    \t}\r\n\t}\r\n\r\n|else: \r\n    {OneOf(\"Orbital austritt\", \"Verlassen {OneOf('der Umlaufbahn','des Orbitts')} {if event.body: von {event.body}}\", \r\n    \"Wir verlassen jetzt {OneOf('die Umlaufbahn','den Orbitt')} {if event.body: von {event.body}}\")}\r\n};\r\n\r\n{_\r\n- approaching_surface\tA boolean value. True if you are entering the gravity well\r\n\t\t\t\t\t\tand false if you are leaving\r\n- systemname \t\t\tThe name of the starsystem\r\n- bodyname \t\t\t\tThe name of the body\r\n- shortname \t\t\tThe short name of the body, less the system name\r\n_}",
      "name": "Near surface",
      "description": "Triggered when you enter or depart orbit around a surface",
      "default": false,
      "defaultValue": null
    },
    "New function": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if event.bodytype = 'Planet':\r\n    {OneOf(\"nahe\", \"in der Nähe von\")}\r\n    {set time to SecondsSince(0) - state.eddi_context_approach_time}\r\n    {if time < 60 :\r\n        {set settlement to state.eddi_context_last_settlement}\r\n        {set station to StationDetails(settlement, event.system)}\r\n        {if station:\r\n            {SetState('eddi_context_body_name', settlement)}\r\n            {if station.Model.invariantName != \"Unknown\" : {P(station.model)},\r\n            } \r\n            {P(settlement)} {station_notifications}\r\n        |else: {P(settlement)}\r\n        }\r\n    |else: Planet {P(event.body)}\r\n    }\r\n   }\r\n   \r\n   {dump station}",
      "name": "New function",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Next jump": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Next jump\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_nextsystem_name', event.system)}\r\n{SetState('eddi_context_nextsystem_nextsystem', event.system)}\r\n{_ SetState('eddi_context_jump_target', event.target)}\r\n\r\n{Pause(2000)}\r\n\r\nDas nächste System ist {nextsystem.name}.\r\nDer Hauptstern ist ein {nextsystem.mainstar.stellarclass} Stern.\r\n\r\n{set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n\r\n{if slice(event.stellarclass, 0, 1) = \"D\"\t\t: Vorsicht: Weissen Zwerg entdeckt.\r\n|elif event.stellarclass = \"N\"\t\t\t\t\t: Vorsicht: Neutronen Stern entdeckt.\r\n|elif event.stellarclass = \"H\"\t\t\t\t\t: Vorsicht: Schwarzes Loch entdeckt.\r\n|elif find(scoopables, event.stellarclass) = -1\t: Achtung: Zielstern zum Auftanken nicht geeignet!\r\n|else\t\t\t\t\t\t\t\t\t\t\t: Zielstern zum Auftanken geeignet.\r\n}\r\n\r\n{_\r\n- system \t\t\t\tThe name of the destination system\r\n- remainingjumpsinroute The remaining number of jumps in the current route\r\n- starclass \t\t\tThe primary star's class\r\n_}",
      "name": "Next jump",
      "description": "Triggered when selecting a star system to jump to",
      "default": false,
      "defaultValue": "{_ Next jump }\r\n{_ Triggered when selecting a star system to jump to }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_remaining_jumps', event.remainingjumpsinroute)}"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: NPC attack commenced\")}\r\n\r\n{  if event.by = \"Pirate\"            : {set NPC to \"von Piraten\"}\r\n|elif event.by = \"Kopfgeldjäger\"     : {set NPC to \"von Kopfgeld Jägern\"}\r\n|elif event.by = \"Cargo hunter\"      : {set NPC to \"von Fracht Räubern\"}\r\n|elif event.by = \"Militär\"           : {set NPC to \"vom Militär\"}\r\n|elif event.by = \"System Sicherheit\" : {set NPC to \"von der System Sicherheit\"}\r\n|elif event.by = \"Polizei\"           : {set NPC to \"von der Polizei\"}\r\n|elif event.by = \"Station\"           : {set NPC to \"von der Station\"}\r\n|else                                : {set NPC to cat(\"von \", event.by)}\r\n}\r\n\r\nWir werden {if event.by: {NPC}} angegriffen.\r\n\r\n{_ - by Who the attack is by (Pirate, Military, Bounty hunter, Cargo hunter, etc) _}",
      "name": "NPC attack commenced",
      "description": "Triggered when an attack on your ship by an NPC is detected",
      "default": false,
      "defaultValue": "Warning: attack \r\n{if event.by:\r\n   by {event.by} \r\n}\r\ndetected."
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  {  if event.by = \"Piraten\":           {set NPC to \"durch Piraten Schiff\"}\r\n  |elif event.by = \"Kopfgeldjäger\":     {set NPC to \"durch Kopfgeld Jäger\"}\r\n  |elif event.by = \"Cargo hunter\":      {set NPC to \"durch Fracht Jäger\"}\r\n  |elif event.by = \"Militär\":           {set NPC to \"durch Militär Schiff\"}\r\n  |elif event.by = \"System Sicherheit\": {set NPC to \"durch die System Sicherheit\"}\r\n  |elif event.by = \"Polizei\":           {set NPC to \"durch Polizei Schiff\"}\r\n  |elif event.by = \"Station\":           {set NPC to \"von der Station\"}\r\n  |else:                                {set NPC to \"event.by\"}\r\n  }\r\n\r\n  Vorsicht: Fracht Scan\r\n  {if event.by:\r\n    {NPC} \r\n  }\r\n  entdeckt.\r\n}\r\n",
      "name": "NPC cargo scan commenced",
      "description": "Triggered when a cargo scan on your ship by an NPC is detected",
      "default": false,
      "defaultValue": "{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  Caution: cargo scan\r\n  {if event.by:\r\n    by {event.by} \r\n  }\r\n  detected.\r\n}\r\n"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: NPC interdiction commenced\")}\r\n\r\n{  if event.by = \"Pirate\"            : {set NPC to \"Piraten Schiff\"}\r\n|elif event.by = \"Kopfgeldjäger\"     : {set NPC to \"Kopfgeld Jäger\"}\r\n|elif event.by = \"Cargo hunter\"      : {set NPC to \"Fracht Jäger\"}\r\n|elif event.by = \"Militär\"           : {set NPC to \"Militär Schiff\"}\r\n|elif event.by = \"Military\"          : {set NPC to \"Militär Schiff\"}\r\n|elif event.by = \"System Sicherheit\" : {set NPC to \"die System Sicherheit\"}\r\n|elif event.by = \"Police\"            : {set NPC to \"Polizei Schiff\"}\r\n|else                                : {set NPC to event.by}\r\n}\r\n\r\nWarnung: Abfang-Versuch {if event.by: durch {NPC}} {OneOf(\"festgestellt\", \"registriert\", \"entdeckt\")}.\r\n\r\n{Occasionally(3, \"Schub drosseln oder ausweichen.\")}\r\n\r\n{_ - by Who the interdiction is by (Pirate, Military, Bounty hunter, Cargo hunter, etc) _}",
      "name": "NPC interdiction commenced",
      "description": "Triggered when an interdiction attempt on your ship by an NPC is detected",
      "default": false,
      "defaultValue": "Warning: interdiction attempt\r\n{if event.by:\r\n   by {event.by} \r\n}\r\ndetected.\r\n\r\n{Occasionally(3, \"Throttle down or evade.\")}"
    },
    "Passengers": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Passengers",
      "description": "Triggered at session start from Passengers event",
      "default": true,
      "defaultValue": null
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} Einheiten {event.commodity} {Occasionally(2, \"für {set translate to (event.power)} {F('Translate Power')}\")} ausgeliefert.",
      "name": "Power commodity delivered",
      "description": "Triggered when a commander delivers a commodity to a power",
      "default": false,
      "defaultValue": "{event.amount} units of {event.commodity} delivered {Occasionally(2, \"for {P(event.power, \"power\")}\")}."
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set value to event.amount} {F(\"HuVal\")} credditts per Schnell.Lieferung {Occasionally(2, \"an {set translate to (event.power)} {F('Translate Power')}\")} {OneOf(\"übergeben\",\"abgeliefert\")}.",
      "name": "Power commodity fast tracked",
      "description": "Triggered when a commander fast tracks a commodity of a power",
      "default": false,
      "defaultValue": "{Humanise(event.amount)} credits spent fast-tracking commodities {Occasionally(2, \"for {P(event.power, 'power')}\")}."
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set value to event.amount} {F(\"HuVal\")} Einheiten {set translate to event.commodity} {F(\"Translate Commodity\")} {Occasionally(2, \"von {set translate to (event.power)} {F('Translate Power')}\")} {OneOf(\"erhalten\",\"empfangen\")}.\r\n",
      "name": "Power commodity obtained",
      "description": "Triggered when a commander obtains a commodity from a power",
      "default": false,
      "defaultValue": "{event.amount} units of {event.commodity} obtained {Occasionally(2, \"for {P(event.power, 'power')}\")}."
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Sie sind von {set translate to (event.frompower)} {F(\"Translate Power\")} zu {set translate to (event.topower)} {F(\"Translate Power\")} übergelaufen.",
      "name": "Power defected",
      "description": "Triggered when you defect from one power to another",
      "default": false,
      "defaultValue": "You have defected from {P(event.frompower, \"power\")} to {P(event.topower, \"power\")}."
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Stimme\r\n{OneOf(\"abgegeben\", \"registriert\")}",
      "name": "Power expansion vote cast",
      "description": "Triggered when a commander votes for system expansion",
      "default": false,
      "defaultValue": "Vote\r\n{OneOf(\"cast\", \"registered\")}"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Sie sind {OneOf(\"ab sofort\",\"ab jetzt\",\"nun\",\"jetzt\")} mit {set translate to (event.power)} {F('Translate Power')} aliiert.",
      "name": "Power joined",
      "description": "Triggered when you join a power",
      "default": false,
      "defaultValue": "You have aligned yourself with {P(event.power, \"power\")}"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Sie sind {OneOf(\"ab sofort\",\"ab jetzt\",\"nun\",\"jetzt\")} nicht länger mit {set translate to (event.power)} {F('Translate Power')} aliiert.",
      "name": "Power left",
      "description": "Triggered when you leave a power",
      "default": false,
      "defaultValue": "You are no longer aligned with {P(event.power, \"power\")}"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Stimme\r\n{OneOf(\"abgegeben\", \"registriert\")}",
      "name": "Power preparation vote cast",
      "description": "Triggered when a commander votes for system preparation",
      "default": false,
      "defaultValue": "Vote\r\n{OneOf(\"cast\", \"registered\")}"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\nFraktions Gehalt über {set value to event.amount} {F(\"HuVal\")} credditts {Occasionally(2, \"von {set translate to (event.power)} {F('Translate Power')}\")} {OneOf(\"erhalten\",\"empfangen\")}.",
      "name": "Power salary claimed",
      "description": "Triggered when a commander claims salary from a power",
      "default": false,
      "defaultValue": "Salary of {Humanise(event.amount)} credits claimed {Occasionally(2, \"from {P(event.power, 'power')}\")}."
    },
    "Power voucher received": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": null,
      "name": "Power voucher received",
      "description": "Triggered when a commander turns in combat vouchers against an opposing power",
      "default": true,
      "defaultValue": null
    },
    "Powerplay": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Powerplay\")}\r\n\r\nWir haben uns {set translate to event.power} {F(\"Translate Power\")} verpflichtet. \r\nUnsere Dienste laufen seit\r\n{if event.timepledgedweeks > 1:\r\n    {Humanise(event.timepledgedweeks)} Wochen\r\n|elif event.timepledgedweeks = 1:\r\n    einer Woche\r\n|elif event.timepledgeddays > 1:\r\n    {Humanise(event.timepledgeddays)} Tagen\r\n|elif event.timepledgeddays = 1:\r\n    einem Tag\r\n|else:\r\n    weniger als einem Tag\r\n}.\r\nUnser Rank ist Stufe {event.rank} mit \r\n{if event.merits > 0:\r\n    {Humanise(event.merits)}\r\n|else:\r\n    ohne\r\n}\r\ngesammelten Verdiensten.\r\n\r\n{_\r\nPowerplay event\r\nTriggered periodically when pledged to a power.\r\n\r\n- power\t\t\t\tThe name of the power to whom you are pledged\r\n- rank\t\t\t\tYour rank with the power\r\n- merits\t\t\tYour merits with the power\r\n- timepledgeddays\tThe amount of time that you've been pledged, in days\r\n- timepledgedweeks\tThe amount of time that you've been pledged, in weeks\r\n_}",
      "name": "Powerplay",
      "description": "Triggered periodically when pledged to a power",
      "default": false,
      "defaultValue": "You are pledged to {P(event.power, \"power\")}. \r\nYou have served for \r\n{if event.timepledgedweeks > 1:\r\n    {Humanise(event.timepledgedweeks)} weeks \r\n|elif event.timepledgedweeks = 1:\r\n    one week \r\n|elif event.timepledgeddays > 1:\r\n    {Humanise(event.timepledgeddays)} days\r\n|elif event.timepledgeddays = 1:\r\n    one day\r\n|else:\r\n    less than one day\r\n}\r\nand are at rank {event.rank} with \r\n{if event.merits > 0:\r\n    {Humanise(event.merits)}\r\n|else:\r\n    no\r\n}\r\naccumulated merits.\r\n"
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"der Hülle\"])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"des Cockpit\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"der korrodierten Baugruppen\", \"der angegriffenen Systeme\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set remote to Occasionally(2, \"Fern\")}\r\n    {set sequence to OneOf(\"sequence\", \"cycle\")}\r\n    {OneOf(\r\n        \"Der Roboter hat die {Fern} Reparaturen\", \r\n        \"{remote} {sequence} completed, repairs made to\"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systemsrepaired):\r\n        {if cur = 0:\r\n        |elif cur < len(systemsrepaired) - 1:\r\n            , \r\n        |else:\r\n            and\r\n        }\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n    }\r\n}beendet.\r\n\r\n{_\r\nRepair drone event\r\nTriggered when your ship is repaired via a repair limpet controller.\r\n\r\n- hull\t\tThe amount of damage repaired in the ship's hull\r\n- cockpit\tThe amount of damage repaired in the ship's cockpit\r\n- corrosion\tThe amount of corrosion damage repaired\r\n_}\r\n",
      "name": "Repair drone",
      "description": "Triggered when your ship is repaired via a repair limpet controller",
      "default": false,
      "defaultValue": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"the hull\"])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"the cockpit\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"corroded systems\", \"systems affected by corrosion\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set remote to Occasionally(2, \"remote\")}\r\n    {set sequence to OneOf(\"sequence\", \"cycle\")}\r\n    {OneOf(\r\n        \"The limpet has completed it's {remote} repairs to\", \r\n        \"{remote} {sequence} completed, repairs made to\"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systemsrepaired):\r\n        {if cur = 0:\r\n        |elif cur < len(systemsrepaired) - 1:\r\n            , \r\n        |else:\r\n            and\r\n        }\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n    }\r\n}.\r\n"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "name": "Repeat last speech",
      "description": "Repeat the last thing said",
      "default": true,
      "defaultValue": "{state.eddi_context_last_speech}"
    },
    "Report last scan value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences }\r\n{set minScanValue to 5000} {_ Set the minimum credit value that should be voiced _}\r\n\r\n{_ Context }\r\n{set scanValue to state.eddi_context_last_scan_estimated_value}\r\n\r\n{if scanValue >= minScanValue:\r\n   {OneOf(\"Das\", \"Dieser Scan\")} \r\n   {OneOf(\"könnte\", \"kann\", \"sollte\") } \r\n   {Humanise(scanValue)} credditts \r\n   {OneOf(\"wert sein\", \"einbringen\")}.\r\n}\r\n\r\n{Log(\"EDDI Fktn.: Report last scan value\")}",
      "name": "Report last scan value",
      "description": "OK ! Report the estimated value of the last body scanned",
      "default": false,
      "defaultValue": "{_ Preferences }\r\n{set minScanValue to 5000} {_ Set the minimum credit value that should be voiced _}\r\n\r\n{_ Context }\r\n{set scanValue to state.eddi_context_last_scan_estimated_value}\r\n\r\n{if scanValue >= minScanValue:\r\n   {OneOf(\"This\", \"This data\", \"This scan\")} \r\n   {OneOf(\"could\", \"might\", \"can\", \"should\") } \r\n   {OneOf(\"fetch\", \"be worth\", \"get you\", \"sell for\")}\r\n   {Humanise(scanValue)} credits.\r\n}\r\n"
    },
    "Ring hotspots detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Hotspots detected\")}\r\n{Pause(500)}\r\n{set commodity1 to \"Tieftemperaturdiamanten\"} {_ Welche drei Materialien in VA angezeigt werden sollen, bitte hier eintragen _}\r\n{set commodity2 to \"Tritium\"}\r\n{set commodity3 to \"Leerenopal\"}\r\n\r\n{if SecondsSince(state.eddi_context_system_lastvisit) / 3600 > 1 :\r\n\t{if ship.Role.invariantName = \"Miner\" || ship.Role.invariantName = \"Multipurpose\" || ship.Role.invariantName = \"Exploration\":    \r\n\t    {set ringhotspots to event}\r\n\t    {set hotspots to []}\r\n\t   \t{set AnzahlHotspots to 0}\r\n\t   \t{SetState(\"ring_hotspots_body\", \"\")}\r\n\t   \t{SetState(\"ring_hotspots_commodity1\", \"\")}\r\n\t   \t{SetState(\"ring_hotspots_commodity2\", \"\")}\r\n\t   \t{SetState(\"ring_hotspots_commodity3\", \"\")}\r\n\t   \t{for hotspot in event.hotspots:\r\n\t   \t\t{if hotspot.commodity = commodity1 || hotspot.commodity = commodity2 || hotspot.commodity = commodity3 :\r\n\t   \t\t\t{SetState(\"ring_hotspots_body\", event.bodyname)}\r\n\t   \t\t\t{if hotspot.commodity = commodity1 : {SetState(\"ring_hotspots_commodity1\", \"Diamanten\")}\r\n\t   \t\t\t|elif hotspot.commodity = commodity2 : {SetState(\"ring_hotspots_commodity2\", \"Tritium\")}\r\n\t   \t\t\t|elif hotspot.commodity = commodity3 : {SetState(\"ring_hotspots_commodity3\", \"Opale\")}\r\n\t   \t\t\t|else:\r\n\t   \t\t\t}\r\n\t   \t\t|else:\r\n\t   \t\t}\r\n\t       \t{set hotspot_desc to: \r\n\t           \t{set translate to hotspot.commodity} {F(\"Translate Commodity\")}\r\n\t           \t{if hotspot.amount = 1: ein, Hotspot |else: {hotspot.amount}}\r\n\t           \t{set AnzahlHotspots to AnzahlHotspots + hotspot.amount}\r\n\t       \t}\r\n\t       \t{set hotspots to cat(hotspots, [hotspot_desc])}\r\n\t   \t}\r\n\t   \t{if AnzahlHotspots = 1 : Ein Hotspot gefunden. |else: {AnzahlHotspots} Hotspots gefunden.}\r\n\t\t{Pause(500)}\r\n\t    {List(hotspots)}\r\n\t}\r\n}\r\n\r\n{_ dump hotspots}\r\n{_ if spokenHotspot[event.commodity] = true : }\r\n\r\n{_ bodyname - The body where surface signals were detected}\r\n{_ hotspots - A list of CommodityAmount objects (with properties 'commodity' and 'amount')}\r\n\r\n{_ set spokenHotspot to [\r\n\"Alexandrite\": false,\r\n\"Benitoite\": false,\r\n\"Bertrandite\": false,\r\n\"Bromellite\": true,\r\n\"Grandidierite\": false,\r\n\"Lepidolite\" : false,\r\n\"LowTemperatureDiamond\": true,\r\n\"Niedrigtemperatur Diamanten\": true,\r\n\"Tieftemperaturdiamanten\" true,\r\n\"Monazite\": false,\r\n\"Musgravite\": false,\r\n\"Painite\": true,\r\n\"Platin\": true,\r\n\"Rhodplumsite\": false,\r\n\"Serendibite\": false,\r\n\"Tritium\": true,\r\n\"Void opals\": true\r\n\"Leere Opale\"; true\r\n\"Leerenopal\"; true\r\n]}\r\n",
      "name": "Ring hotspots detected",
      "description": "Triggered when hotspots are detected in a ring",
      "default": false,
      "defaultValue": "{if ship.Role.invariantName = \"Miner\" || ship.Role.invariantName = \"Multipurpose\":\r\n    {set hotspots to []}\r\n    {for hotspot in event.hotspots: \r\n        {set hotspot_desc to: \r\n            {hotspot.amount} of {hotspot.commodity}\r\n        }\r\n        {set hotspots to cat(hotspots, [hotspot_desc])}\r\n    }\r\n\r\n    Hotspots detected.\r\n    {List(hotspots)}\r\n}"
    },
    "Ring mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_last_subject', 'ring')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_ring_name', event.ringname)}\r\n\r\n{_ Process the event _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\r\n    {Pause(3000)}\r\n\r\n    {OneOf(\"Das Meppen\", \"Die Erkundung\", \"Das Scannen\")}\r\n    des {event.composition}en Rings ist beendet.\r\n    \r\n    {if event.reserves:\r\n    \tEs sind {event.reserves} Vorkommen entdeckt worden.\r\n\t|else:\r\n\t}\r\n}\r\n\r\n{_ event.composition - eisig}\r\n{_ event.reserves - unberührte}\r\n{_ event.mass - Mengenangabe 1881900000}\r\n\r\n{Log(\"EDDI EVENT: Ring mapped\")}",
      "name": "Ring mapped",
      "description": "Triggered after mapping a ring with the Surface Area Analysis scanner",
      "default": false,
      "defaultValue": "{_ Context}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_last_subject', 'ring')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_ring_name', event.ringname)}\r\n\r\n{_ Process the event _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\r\n    {Pause(3000)}\r\n\r\n    {OneOf(\"mapping\", \"probing\", \"scanning\")}\r\n    of {event.reserves} {event.composition} ring\r\n    {OneOf(\"is\", \"is now\")}\r\n    {OneOf(\"complete\", \"finished\")}.\r\n}"
    },
    "Route details": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Route details _}\r\n{_ Triggered when a route has been generated or updated _}\r\n\r\n\r\n{_ Script Options _}\r\n{set clip_notify to true}\r\n\r\n{set type to event.routetype}\r\n\r\n{if type = \"encoded\" || type = \"facilitator\" || type = \"guardian\"\r\n    || type = \"human\" || type = \"manufactured\" || type = \"raw\":\r\n\r\n    {if type = \"facilitator\":\r\n        {set service to \"interstellar factors contact\"}\r\n    |elif type = \"encoded\" || type = \"manufactured\" || type = \"raw\":\r\n        {set service to cat(type, \" materials trader\")}\r\n    |elif type = \"guardian\" || type = \"human\":\r\n        {set service to cat(type, \" technology broker\")}\r\n    }\r\n\r\n    {if event.system && event.system != \"\":\r\n        The nearest {service} is at {event.station}, in the\r\n        {if event.system = system.name:\r\n            current system\r\n        |else:\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n     |else:\r\n         {service} not found within sensor range.\r\n     }\r\n|elif type = \"cancel\":\r\n    {if !va_active:\r\n        {if event.system && event.system != \"\":\r\n            Cancelled destination setting to the {event.system} system.\r\n        }\r\n    }\r\n    {set clip_notify to false}\r\n|elif type = \"expiring\":\r\n    {if event.system && event.system != \"\":\r\n        {set mission to MissionDetails(event.missionids[0])}\r\n\r\n        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n            {set type to \"Transport \"}\r\n            {set type to cat(type, mission.passengertype)}\r\n        |else:\r\n            {set type to mission.type}\r\n        }\r\n        {set type to cat(type, \" mission\")}\r\n\r\n        {type} {if mission.faction: for {mission.faction}}\r\n        {if mission.destinationsystem: in the\r\n            {if mission.destinationsystem = system.name:\r\n                current\r\n            |else:\r\n                {mission.destinationsystem}\r\n            } system\r\n        } is expiring next.\r\n    |else:\r\n        No active missions found.\r\n    }\r\n|elif type = \"farthest\":\r\n     {if event.system && event.system != \"\":\r\n         Your {if missionsCount = 1: only |else: farthest}\r\n         mission target is in the\r\n         {if event.system = system.name:\r\n             current system\r\n         |else:\r\n             {event.system} system, {round(event.distance, 1)} lightyears away\r\n         }.\r\n     |else:\r\n         Mission not found with a designated target system.\r\n     }\r\n|elif type = \"most\":\r\n     {if missionsCount = 1:\r\n         Your only mission target is {Occasionally(2,\"located\")} in\r\n         {if missions[0].destinationsystem = \"\":\r\n             an unknown\r\n         |elif missions[0].destinationsystem = system.name:\r\n             the current\r\n         |else:\r\n             the {missions[0].destinationsystem}\r\n         }\r\n         {Occasionally(2,\"star\")} system.\r\n     |else:\r\n         {set systems to split(event.systems, \"_\")}\r\n         {set system_most to event.system}\r\n         {set systems_count to len(systems)}\r\n\r\n         {if systems_count = 1:\r\n             {if system_most = system.name:\r\n                 {set system_most to \"The current system\"}\r\n             |else:\r\n                 {set system_most to cat(\"The \", system_most, \" system\")}\r\n             }\r\n             {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                 \"{system_most} has {OneOf('the most','most of your')} missions\",\r\n                 \"{system_most} has the most missions for you to complete\")}.\r\n         |elif systems_count > 1:\r\n             You have {event.count} mission target{if event.count > 1:s} each, in the\r\n\r\n             {set cur to 0}\r\n             {while cur < len(equal):\r\n                 {systems[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = systems_count-1: and |elif cur < systems_count: ,}\r\n             } systems.\r\n         }\r\n     }\r\n|elif type = \"nearest\":\r\n     {if event.system && event.system != \"\":\r\n         Your {if missionsCount = 1: only |else: nearest}\r\n         mission target is in the\r\n         {if event.system = system.name:\r\n             current system\r\n         |else:\r\n             {event.system} system, {round(event.distance, 1)} lightyears away\r\n         }.\r\n     |else:\r\n         Mission not found with a designated target system.\r\n     }\r\n|elif type = \"route\":\r\n     {if event.system && event.system != \"\":\r\n         Missions route calculated for {event.count} systems.\r\n         Total route distance is {round(event.routedistance, 1)} lightyears.\r\n         First mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n     |else:\r\n         Unable to calculate missions route.\r\n     }\r\n|elif type = \"set\":\r\n    {if !va_active:\r\n        {if event.system && event.system != \"\":\r\n            Destination set to the {event.system} system, {round(event.distance, 1)} lightyears away.\r\n        |else:\r\n            Unable to set destination.\r\n        }\r\n        {set clip_notify to false}\r\n    }\r\n|elif type = \"source\":\r\n     {if event.count > 0:\r\n         {set systems to split(event.route, \"_\")}\r\n\r\n         {set pos to 0}\r\n         {while pos < event.count:\r\n\r\n             {set source_cargo to []}\r\n             {for missionid in event.missionids:\r\n                 {set haulage to HaulageDetails(missionid)}\r\n                 {if haulage.sourcesystem = systems[pos]:\r\n                     {set cargo to CargoDetails(missionid)}\r\n                     {if find(source_cargo, cargo.name) = -1:\r\n                         {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                     }\r\n                 }\r\n             }\r\n\r\n             {if pos = 0:\r\n                 Your {if event.count = 1: only |else: nearest}\r\n             |elif pos = 1:\r\n                 Additionally, your\r\n             |elif pos = event.count - 1:\r\n                 Lastly, your\r\n             |else:\r\n                 Your\r\n             }\r\n\r\n             mission cargo source for\r\n             {set cur to 0}\r\n             {while cur < len(source_cargo):\r\n                 {source_cargo[cur]}\r\n                 {set cur to cur + 1}\r\n                 {if cur = len(source_cargo) - 1: and |elif cur < len(source_cargo): ,}\r\n             }\r\n\r\n             is in the\r\n             {if systems[pos] = system.name:\r\n                 current system\r\n             |else:\r\n                 {systems[pos]} system,\r\n                 {set distance to Distance(system.name, systems[pos])}\r\n                 {round(distance, 1)} light years away\r\n             }.\r\n             {set pos to pos + 1}\r\n         }\r\n         {SetState('eddi_context_cargo_source', event.route)}\r\n     |else:\r\n         Cargo source not found with a designated target system.\r\n     }\r\n|elif type = \"update\":\r\n     {if event.system && event.system != \"\":\r\n         Next mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n     }\r\n}\r\n\r\n{if event.system && event.system != \"\" && clip_notify && !va_active:\r\n    {Pause(1000)}\r\n    Clipboard set to destination system.\r\n}\r\n\r\n",
      "name": "Route details",
      "description": "Triggered when a route has been generated or updated",
      "default": false,
      "defaultValue": "{_ Route details _}\r\n{_ Triggered when a route has been generated or updated _}\r\n\r\n\r\n{_ Context _}\r\n{SetState('eddi_context_search_system', event.system)}\r\n{SetState('eddi_context_search_station', event.station)}\r\n{SetState('eddi_context_search_distance', event.distance)}\r\n{SetState('eddi_context_search_count', event.count)}\r\n\r\n{set clip_notify to false}\r\n{set type to event.routetype}\r\n{if type = \"encoded\" || type = \"facilitator\" || type = \"guardian\"\r\n    || type = \"human\" || type = \"manufactured\" || type = \"raw\":\r\n\r\n    {if type = \"facilitator\":\r\n        {set service to \"interstellar factors contact\"}\r\n    |elif type = \"encoded\" || type = \"manufactured\" || type = \"raw\":\r\n        {set service to cat(type, \" materials trader\")}\r\n    |elif type = \"guardian\" || type = \"human\":\r\n        {set service to cat(type, \" technology broker\")}\r\n    }\r\n\r\n    {if event.system && event.system != \"\":\r\n        The nearest {service} is at {event.station}, in the\r\n        {if event.system = system.name:\r\n            current system\r\n        |else:\r\n            {set clip_notify to true}\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n    |else:\r\n        {service} not found within sensor range.\r\n    }\r\n|elif type = \"cancel\":\r\n    {if !va_active:\r\n        {if event.system && event.system != \"\":\r\n            Cancelled destination setting to the {event.system} system.\r\n        }\r\n    }\r\n|elif type = \"expiring\":\r\n    {if event.system && event.system != \"\":\r\n        {set mission to MissionDetails(event.missionids[0])}\r\n\r\n        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n            {set type to \"Transport \"}\r\n            {set type to cat(type, mission.passengertype)}\r\n        |else:\r\n            {set type to mission.type}\r\n        }\r\n        {set type to cat(type, \" mission\")}\r\n\r\n        {type} {if mission.faction: for {mission.faction}}\r\n        {if mission.destinationsystem: in the\r\n            {if mission.destinationsystem = system.name:\r\n                current\r\n            |else:\r\n                {set clip_notify to true}\r\n                {mission.destinationsystem}\r\n            } system\r\n        } is expiring next.\r\n    |else:\r\n        No active missions found.\r\n    }\r\n|elif type = \"farthest\":\r\n    {if event.system && event.system != \"\":\r\n        Your {if missionsCount = 1: only |else: farthest}\r\n        mission target is in the\r\n        {if event.system = system.name:\r\n            current system\r\n        |else:\r\n            {set clip_notify to true}\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n    |else:\r\n        Mission not found with a designated target system.\r\n    }\r\n|elif type = \"most\":\r\n    {if missionsCount = 1:\r\n        Your only mission target is {Occasionally(2,\"located\")} in\r\n        {if missions[0].destinationsystem = \"\":\r\n            an unknown\r\n        |elif missions[0].destinationsystem = system.name:\r\n            the current\r\n        |else:\r\n            the {missions[0].destinationsystem}\r\n        }\r\n        {Occasionally(2,\"star\")} system.\r\n    |elif event.system && event.system != \"\":\r\n        {set systems to split(event.route, \"_\")}\r\n        {set systems_count to len(systems)}\r\n\r\n        {if systems_count = 1:\r\n            {if event.system = system.name:\r\n                {set system_most to \"The current system\"}\r\n            |else:\r\n                {set clip_notify to true}\r\n                {set system_most to cat(\"The \", event.system, \" system\")}\r\n            }\r\n            {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                \"{system_most} has {OneOf('the most','most of your')} missions\",\r\n                \"{system_most} has the most missions for you to complete\")}.\r\n        |elif systems_count > 2:\r\n            You have {event.count} mission target{if event.count > 1:s} each, in the\r\n\r\n            {_ Don't include the home system from the route list _}\r\n            {set cur to 0}\r\n            {set systems_count to systems_count - 1}\r\n            {while cur < len(systems_count):\r\n                {systems[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = systems_count-1: and |elif cur < systems_count: ,}\r\n            } systems.\r\n        }\r\n    |else:\r\n        Mission not found with a designated target system.\r\n    }\r\n|elif type = \"nearest\":\r\n    {if event.system && event.system != \"\":\r\n        Your {if missionsCount = 1: only |else: nearest}\r\n        mission target is in the\r\n        {if event.system = system.name:\r\n            current system\r\n        |else:\r\n            {set clip_notify to true}\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n    |else:\r\n        Mission not found with a designated target system.\r\n    }\r\n|elif type = \"route\":\r\n    {if event.system && event.system != \"\":\r\n        Missions route calculated for {event.count} systems.\r\n        Total route distance is {round(event.routedistance, 1)} lightyears.\r\n        First mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n        {set clip_notify to true}\r\n    |else:\r\n        Unable to calculate missions route.\r\n    }\r\n|elif type = \"set\":\r\n    {if !va_active:\r\n        {if event.system && event.system != \"\":\r\n            Destination set to the {event.system} system, {round(event.distance, 1)} lightyears away.\r\n        |else:\r\n            Unable to set destination. \r\n        }\r\n    }\r\n|elif type = \"source\":\r\n    {if event.count > 0:\r\n        {set systems to split(event.route, \"_\")}\r\n\r\n        {set pos to 0}\r\n        {while pos < event.count:\r\n\r\n            {set source_cargo to []}\r\n            {for missionid in event.missionids:\r\n                {set haulage to HaulageDetails(missionid)}\r\n                {if haulage.sourcesystem = systems[pos]:\r\n                    {set cargo to CargoDetails(missionid)}\r\n                    {if find(source_cargo, cargo.name) = -1:\r\n                        {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if pos = 0:\r\n                Your {if event.count = 1: only |else: nearest}\r\n            |elif pos = 1:\r\n                Additionally, your\r\n            |elif pos = event.count - 1:\r\n                Lastly, your\r\n            |else:\r\n                Your\r\n            }\r\n\r\n            mission cargo source for\r\n            {set cur to 0}\r\n            {while cur < len(source_cargo):\r\n                {source_cargo[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = len(source_cargo) - 1: and |elif cur < len(source_cargo): ,}\r\n            }\r\n\r\n            is in the\r\n            {if systems[pos] = system.name:\r\n                current system\r\n            |else:\r\n                {set clip_notify to true}\r\n                {systems[pos]} system,\r\n                {set distance to Distance(system.name, systems[pos])}\r\n                {round(distance, 1)} light years away\r\n            }.\r\n            {set pos to pos + 1}\r\n       }\r\n         {SetState('eddi_context_cargo_source', event.route)}\r\n    |else:\r\n        Cargo source not found with a designated target system.\r\n    }\r\n|elif type = \"update\":\r\n    {if event.system && event.system != \"\":\r\n        Next mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n        {set clip_notify to true}\r\n    }\r\n}\r\n\r\n{if clip_notify && !va_active:\r\n    {Pause(1000)}\r\n    Clipboard set to destination system.\r\n}\r\n\r\n"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Screenshot erstellt.",
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot",
      "default": false,
      "defaultValue": null
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} \r\n{if event.commodity.rare: rare}\r\n\r\n{if event.commodity.name = \"Black Box\":\r\n   {if event.amount > 1:\r\n      {OneOf(\"flight records\", \"black boxes\")}\r\n   |else: \r\n      {OneOf(\"flight record\", \"black box\")}\r\n   }\r\n\r\n|elif event.commodity.name = \"Damaged Escape Pod\":\r\n   {OneOf(\"damaged cryo pod\", \"damaged escape pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Occupied Escape Pod\":\r\n   {OneOf(\"occupied escape pod\", \"occupied cryo pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Personal Effects\":\r\n   {OneOf(\"set\", \"collection\")}{if event.amount > 1:s} of\r\n   {OneOf(\"personal effects\", \"personal belongings\")}\r\n\r\n|elif event.commodity.name = \"Salvageable Wreckage\":\r\n   {set wreckage to OneOf(\"wreckage\", \"debris\")}\r\n   {set fragment to OneOf(\"fragment\", \"bit\", \"piece\", \"part\", \"remnant\")}\r\n   {OneOf(\"{fragment}{if event.amount > 1:s} of {wreckage}\", \r\n          \"{wreckage} {fragment}{if event.amount > 1:s}\")}\r\n\r\n|elif event.commodity.name = \"Hostage\":\r\n   {OneOf(\"hostage\")}{if event.amount > 1:s}\r\n\r\n|else:\r\n   {event.commodity.name}{if event.amount > 1:s}\r\n}\r\n\r\n{OneOf(\"recovered\", \"salvaged\")}\r\n{Occasionally(2, \"in exchange\")}\r\nfor {Humanise(event.reward)} credditts\r\n\r\n{Log(\"EDDI EVENT: Search and rescue\")}\r\n\r\n{_\r\nSearch and rescue event\r\nTriggered when delivering items to a Search and Rescue contact.\r\n\r\n- commodity\t\t\t\t\tThe commodity (object) recovered\r\n- localizedcommodityname\tThe localized name of the commodity recovered\r\n- amount\t\t\t\t\tThe amount of the item recovered\r\n- reward\t\t\t\t\tThe monetary reward for completing the search and rescue\r\n_}\r\n",
      "name": "Search and rescue",
      "description": "Triggered when delivering items to a Search and Rescue contact",
      "default": false,
      "defaultValue": "{event.amount} \r\n{if event.commodity.rare: rare}\r\n\r\n{if event.commodity.name = \"Black Box\":\r\n   {if event.amount > 1:\r\n      {OneOf(\"flight records\", \"black boxes\")}\r\n   |else: \r\n      {OneOf(\"flight record\", \"black box\")}\r\n   }\r\n\r\n|elif event.commodity.name = \"Damaged Escape Pod\":\r\n   {OneOf(\"damaged cryo pod\", \"damaged escape pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Occupied Escape Pod\":\r\n   {OneOf(\"occupied escape pod\", \"occupied cryo pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Personal Effects\":\r\n   {OneOf(\"set\", \"collection\")}{if event.amount > 1:s} of\r\n   {OneOf(\"personal effects\", \"personal belongings\")}\r\n\r\n|elif event.commodity.name = \"Salvageable Wreckage\":\r\n   {set wreckage to OneOf(\"wreckage\", \"debris\")}\r\n   {set fragment to OneOf(\"fragment\", \"bit\", \"piece\", \"part\", \"remnant\")}\r\n   {OneOf(\"{fragment}{if event.amount > 1:s} of {wreckage}\", \r\n          \"{wreckage} {fragment}{if event.amount > 1:s}\")}\r\n\r\n|elif event.commodity.name = \"Hostage\":\r\n   {if event.amount > 1:hostages |else: hostage}\r\n\r\n|else:\r\n   {event.commodity.name}{if event.amount > 1:s}\r\n}\r\n\r\n{OneOf(\"recovered\", \"salvaged\")}\r\n{Occasionally(2, \"in exchange\")}\r\nfor {Humanise(event.reward)} credits.\r\n"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Security presence report\")}\r\n\r\n{_ Fetch from context _}\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{set trafficDetails to TrafficDetails(event.system)}\r\n{set deathDetails to TrafficDetails(event.system, \"deaths\")}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\": Welches System ist gemeint?\r\n|else:\r\n\t{if reportsystem.population > 0 \t\t\t\t\t\t\t\t\t\t: {OneOf(\"Registriere,\", \"Verzeichne,\")}\r\n        {  if system.security = \"None\"\t\t|| system.security = \"Keine\"  \t: kein\r\n        |elif system.security = \"Low\"   \t|| system.security = \"Niedrig\"\t: {OneOf(\"minimales\", \"geringes\", \"wenig\")}\r\n       \t|elif system.security = \"Medium\"\t|| system.security = \"Mittel\" \t: {OneOf(\"moderates\", \"mittleres\", \"duchschnittliches\")}\r\n       \t|elif system.security = \"High\"   \t|| system.security = \"Hoch\"   \t: {OneOf(\"hohes\", \"verstärktes\", \"starkes\")}\r\n       \t|elif system.security = \"Anarchie\"\t\t\t\t\t\t\t\t\t: {OneOf(\"Achtung, freies\", \"Achtung, ungeordnetes\", \"Achtung, willkürliches\",\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Achtung,anarchistisches\")}\r\n        |else\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: {system.security}\r\n\t\t}\r\n\t{OneOf(\"Polizei\",\"Sicherheits\")} Aufkommen {OneOf(\"vor Ort\", \"in diesem System\", \"in dieser Region\")}.\r\n    }\r\n\t\r\n{Pause(500)}\r\n\r\n\t{if event.system:\r\n\t\t{if trafficDetails.day > 1 : \r\n\t\t\t{if trafficDetails.day = 2 : Mindestens ein Schiff ist heute bereits im System \r\n\t\t\t\t{if (reportsystem.name) = \"Shinrarta Dezhra\": schinrata |else: {reportsystem.name}} gewesen. \r\n\t\t\t|else: {trafficDetails.day} Schiffe sind heute schon im System \r\n\t\t\t\t{if (reportsystem.name) = \"Shinrarta Dezhra\": schinrata |else: {reportsystem.name}} gesichtet worden.\r\n\t\t\t\t\t{if deathDetails.day != 0\t\t: Dabei kam es zu Feindseligkeiten in deren Verlauf\r\n\t\t\t\t\t\t{if deathDetails.day = 1\t: ein Schiff {OneOf(\"vernichtet\", \"zerstört\")} wurde.\r\n\t\t\t\t\t\t|elif deathDetails.day > 1\t: {deathDetails.day} Schiffe {OneOf(\"vernichtet\", \"zerstört\")} wurden.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n}",
      "name": "Security presence report",
      "description": "Function to report on the details of system security",
      "default": false,
      "defaultValue": "{if system.population > 0:\r\n    There is\r\n    {if system.security = \"None\":\r\n        no\r\n    |elif system.security = \"Low\":\r\n        {OneOf(\"minimal\", \"low\", \"weak\")}\r\n    |elif system.security = \"Medium\":\r\n        {OneOf(\"standard\", \"medium\", \"average\")}\r\n    |elif system.security = \"High\":\r\n        {OneOf(\"high\", \"heavy\", \"strong\")}\r\n    |else:\r\n        {system.security}\r\n    }\r\n    {OneOf(\"police\", \"security\", \"law enforcement\")} presence {OneOf(\"here\", \"in this system\", \"in the locality\")}.\r\n}"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Selbstzerstörungs Sequenz initiiert. Schließe die Kühl ventile.",
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence",
      "default": false,
      "defaultValue": "Self-destruct sequence initiated.  Closing heat vents."
    },
    "Settlement approached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Settlement approached }\r\n{_ Triggered when you approach a settlement }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'settlement')}\r\n{SetState('eddi_context_last_action', 'approach')}\r\n{SetState('eddi_context_last_settlement', event.name)}\r\n{SetState('eddi_context_approach_time', SecondsSince(0))}\r\n\r\n{_\r\nSettlement approached event\r\nTriggered when you approach a settlement.\r\n\r\n- name\t\tThe name of the settlement\r\n- bodyname\tThe name of the body containing the settlement\r\n- longitude\tThe longitude coordinate of the settlement (if given)\r\n- latitude\tThe latitude coordinate of the settlement (if given)\r\n_}",
      "name": "Settlement approached",
      "description": "Triggered when you approach a settlement",
      "default": false,
      "defaultValue": "{_ Settlement approached }\r\n{_ Triggered when you approach a settlement }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'settlement')}\r\n{SetState('eddi_context_last_action', 'approach')}\r\n{SetState('eddi_context_last_settlement', event.name)}\r\n{SetState('eddi_context_approach_time', SecondsSince(0))}\r\n"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Shields down\")}\r\n\r\n{OneOf(\"Wir haben die Schilde verloren\", \"Schilde zusammengebrochen\", \r\n\t\"Schilde ausgefallen\")}.",
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline",
      "default": false,
      "defaultValue": null
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Shields up\")}\r\n\r\n{OneOf(\"Schilde aufgeladen\", \"Schilde wieder hergestellt\", \"Schilde hochgefahren\", \r\n\t\"Wir haben die Schilde zurück\")}.",
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online",
      "default": false,
      "defaultValue": null
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nIhr Schiff {event.ship} ist gerade im System {system.name} in der Station {station.name} angekommen.\r\n\r\n",
      "name": "Ship arrived",
      "description": "Triggered when you complete a ship transfer",
      "default": false,
      "defaultValue": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nYour {event.ship} has \r\n\r\n{OneOf('arrived {if station.name != event.station && event.station: at}', \r\n       'completed its transfer {if station.name != event.station && event.station: to}')}\r\n\r\n{if station.name != event.station && event.station:\r\n   {event.station}\r\n   {if system.name != event.system && event.system:\r\n      in the {event.system} system\r\n   }\r\n}."
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set translate to cat(\"Ihre \",  event.ship)} {F(\"Translate Ship Names\")} wurde ausgeliefert.",
      "name": "Ship delivered",
      "description": "Triggered when your newly-purchased ship is delivered to you",
      "default": false,
      "defaultValue": "{ShipCallsign()} handover complete."
    },
    "Ship fsd": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship FSD\")} \r\n\r\n{  if event.fsd_status = \"masslock cleared\"   : Massen sperre aufgehoben\r\n|elif event.fsd_status = \"cooldown\"           : \r\n|elif event.fsd_status = \"cooldown complete\"  : Sprungantrieb {OneOf(\"betriebsbereit\",\"bereit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"einsatzbereit\", \"steht zur Verfügung\")}\r\n|elif event.fsd_status = \"charging\"           :\r\n|elif event.fsd_status = \"charging cancelled\" : F S A {OneOf(\"laden abgebrochen\", \"stop\")} \r\n|elif event.fsd_status = \"charging complete\"  : \r\n|elif event.fsd_status = \"masslock\"           : Massen sperre in Kraft\r\n|else                                         : keine Info über den FSA\r\n}\r\n\r\n{_ Ship fsd event\r\n\tTriggered when there is a change to the status of your ship's fsd.\r\n\r\n- fsd_status The status of your ship's fsd \r\n\t('cooldown', 'cooldown complete', 'charging', 'charging cancelled',\r\n\t'charging complete', 'masslock', or 'masslock cleared')\r\n_}",
      "name": "Ship fsd",
      "description": "Triggered when there is a change to the status of your ship's fsd",
      "default": false,
      "defaultValue": null
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship interdicted\")}\r\n\r\n{if event.submitted: Wir haben uns {event.interdictor}\r\n    {  if event.power = \"Imperium\"   : vom Imperium\r\n    |elif event.power = \"Föderation\" : von der Föderation\r\n    |elif event.power = \"Allianz\"    : von der Allianz\r\n    } zum Kampf gestellt.\r\n    {if event.iscommander: Seine Kampfstärke beträgt {event.rating}. |else}\r\n|elif event.succeeded:\r\n    Wir wurden durch {event.interdictor}, {event.rating} abgefangen.\r\n|else:\r\n    Wir haben den Abfangversuch von {event.interdictor} {event.rating} abgewehrt.\r\n}.\r\n\r\n{_ Ship interdicted event\r\n\tTriggered when your ship is interdicted by another ship.\r\n\r\n- succeeded\t\tIf the interdiction attempt was successful\r\n- submitted\t\tIf the commander submitted to the interdiction\r\n- iscommander\tIf the player carrying out the interdiction is a commander (as opposed to an NPC)\r\n- interdictor\tThe name of the commander or NPC carrying out the interdiction\r\n- rating\t\tThe combat rating of the commander or NPC carrying out the interdiction\r\n- faction\t\tThe faction of the NPC carrying out the interdiction\r\n- power\t\t\tThe power of the NPC carrying out the interdiction\r\n_}\r\n",
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship",
      "default": false,
      "defaultValue": null
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Wir versuchen {event.interdictee} abzufangen.\",\"{event.interdictee} wird interdicted.\")}\r\n\r\n{_ Ship interdiction event\r\n\tTriggered when you interdict another ship.\r\n\r\n- succeeded\t\tIf the interdiction attempt was successful\r\n- iscommander\tIf the player being interdicted is a commander (as opposed to an NPC)\r\n- interdictee\tThe name of the commander being interdicted\r\n- rating\t\tThe combat rating of the commander being interdicted\r\n- faction\t\tThe faction of the commander being interdicted\r\n- power\t\t\tThe power of the commander being interdicted\r\n_}\r\n\r\n\r\n\r\n",
      "name": "Ship interdiction",
      "description": "Triggered when you interdict another ship",
      "default": false,
      "defaultValue": null
    },
    "Ship loadout": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship loadout\")}\r\n\r\n{Pause(1000)}\r\n{set multi to 0)}\r\n{set kanonen to 0}\r\n{set rails to 0}\r\n{set fragment to 0}\r\n{set splitter to 0}\r\n{set plasma to 0}\r\n{set minenw to 0}\r\n{set sminenw to 0}\r\n{set rampen to 0}\r\n{set pylone to 0}\r\n{set dueppelw to 0}\r\n{set punktv to 0}\r\n{set heatsinkl to 0}\r\n{set cellbank to 0}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n\t{if  hardpoint.module.name = \"Mehrfachgeschütz\":\t{set multi to multi + 1}\r\n\t\t{set ammo_multi to ammo_multi + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_multi', ammo_multi)}\r\n\t} \r\n\t{if  hardpoint.module.name = \"Kanone\": \t\t\t\t{set kanonen to kanonen + 1}\r\n\t\t{set ammo_kanone to ammo_kanone + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_kanone', ammo_kanone)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Schienenkanone\":\t\t{set rails to rails + 1}\r\n\t\t{set ammo_rails to ammo_rails + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_rails', ammo_rails)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Fragmentkanone\":\t\t{set fragment to fragment + 1}\r\n\t\t{set ammo_fragment to ammo_fragment + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_fragment', ammo_fragment)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Splitterkanone\":\t\t{set splitter to splitter + 1}\r\n\t\t{set ammo_splitter to ammo_splitter + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_splitter', ammo_splitter)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Plasmabeschleuniger\":\t{set plasma to plasma + 1}\r\n\t\t{set ammo_plasma to ammo_plasma + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_plasma', ammo_plasma)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Minenwerfer\":\t\t\t{set minenw to minenw + 1}\r\n\t\t{set ammo_minenw to ammo_minenw + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_minenw', ammo_minenw)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Schockminenwerfer\":\t{set sminenw to sminenw + 1}\r\n\t\t{set ammo_sminenw to ammo_sminenw + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_sminenw', ammo_sminenw)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Raketenrampe\":\t\t{set rampen to rampen + 1}\r\n\t\t{set ammo_raketen to ammo_raketen + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_raketen', ammo_raketen)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Torpedopylon\":\t\t{set pylone to pylone + 1}\r\n\t\t{set ammo_pylone to ammo_pylone + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_pylone', ammo_pylone)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Düppel-Werfer\":\t\t{set dueppelw to dueppelw  + 1}\r\n\t\t{set ammo_chaff to ammo_chaff + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_chaff', ammo_chaff)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Punktverteidigung\":\t{set punktv to punktv + 1}\r\n\t\t{set ammo_points to ammo_points + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_points', ammo_points)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Kühlkörperabwurf\":\t{set heatsinkl to heatsinkl + 1}\r\n\t\t{set ammo_heatsinks to ammo_heatsinks + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_heatsinks', ammo_heatsinks)}\r\n\t}\r\n}\r\n\r\n{for compartment in ship.compartments:\t\t\r\n\t{if compartment.module.name = \"Schildzellenbank\":\t{set cellbank to cellbank + 1}\r\n\t\t{set ammo_cells to ammo_cells + compartment.module.ammoinhopper + compartment.module.ammoinclip}\r\n\t\t{SetState('eddi_ammo_cells', ammo_cells)}\t\t\r\n\t}\r\n}\t\r\n\r\n\r\n{SetState(\"eddi_multi\", multi)}\t\t\t{_state.eddi_multi}\r\n{SetState(\"eddi_kanonen\", kanonen)} \t{_state.eddi_kanonen}\r\n{SetState(\"eddi_rails\", rails)} \t\t{_state.eddi_rails}\r\n{SetState(\"eddi_fragment\", fragment)} \t{_state.eddi_fragment}\r\n{SetState(\"eddi_splitter\", splitter)} \t{_state.eddi_splitter}\r\n{SetState(\"eddi_plasma\", plasma)} \t\t{_state.eddi_plasma}\r\n{SetState(\"eddi_minenw\", minenw)} \t\t{_state.eddi_minenw}\r\n{SetState(\"eddi_sminenw\", sminenw)} \t{_state.eddi_sminenw}\r\n{SetState(\"eddi_rampen\", rampen)} \t\t{_state.eddi_rampen}\r\n{SetState(\"eddi_pylone\", pylone)} \t\t{_state.eddi_pylone}\r\n{SetState(\"eddi_dueppelw\", dueppelw)} \t{_state.eddi_dueppelw}\r\n{SetState(\"eddi_punktv\", punktv)} \t\t{_state.eddi_punktv}\r\n{SetState(\"eddi_heatsinkl\", heatsinkl)} {_state.eddi_heatsinkl}\r\n{SetState(\"eddi_cellbank\", cellbank)}\t{_state.eddi_cellbank}\r\n\r\n{_ es fehlen noch AX Multi, AX Missile, Remote Flak, Flechette, Shock, Enzyme Missile, G-Plasma,\r\nGaus, Shard, Seismic, Sub-Surface _}\r\n\r\n{ _____________________________________________________________________________________________________ _}\r\n\r\n{_ if status.vehicle = \"Fighter\" oder status.vehicle = \"SRV\" : kein Schiff _}\r\n\r\n{if vehicle = \"SRV\" : sitze im Rover\r\n|elif vehicle = \"Ship\" :\r\n\r\n\tSchiff Ausrüstung aktualisiert,\r\n\t\t\t\r\n\t{Pause(2000)}\r\n\r\n\t{_ Ship model, Fighter and SRV Check _}\r\n\t{F(\"Ammo check\")}\r\n\t{F(\"Limpet check\")}\r\n\t{F(\"Hangar check\")}\r\n\t{_ F(\"Launchbay report\")}\r\n\r\n|else:\r\n}\r\n\r\n{_ Ship loadout event\r\n\r\n- ship\t\t\tThe ship model\r\n- shipid\t\tThe ID of the ship\r\n- shipname\t\tThe name of the ship\r\n- shipident\t\tThe identification string of the ship\r\n- hullvalue\t\tThe value of the ship's hull (less modules)\r\n- modulesvalue\tThe value of the ship's modules (less hull)\r\n- value\t\t\tThe total value of the ship (hull + modules)\r\n- hullhealth\tThe health of the ship's hull\r\n- unladenmass\tThe unladen mass of the ship\r\n- maxjumprange\tThe max unlaiden jump range of the ship\r\n- optimalmass\tThe optimal mass value of the frame shift drive\r\n- rebuy\t\t\tThe rebuy value of the ship\r\n- hot\t\t\tTrue if the ship is `hot`\r\n- paintjob\t\tThe paintjob of the ship\r\n- compartments\tThe compartments of the ship\r\n- hardpoints\tThe hardpoints of the ship\r\n_}\r\n",
      "name": "Ship loadout",
      "description": "Triggered when you obtain the loadout of your ship",
      "default": false,
      "defaultValue": null
    },
    "Ship loadout function": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Ship loadout function\")}\r\n\r\n{Pause(800)}\r\n{set heatsinks to 0}\r\n{set chaff to 0}\r\n{set cells to 0}\r\n{set points to 0}\r\n{SetState('eddi_heatsinks', 0)}\r\n{SetState('eddi_chaff', 0)}\r\n{SetState('eddi_cells', 0)}\r\n{SetState('eddi_points', 0)}\r\n\r\n{if status.vehicle = Fighter || status.vehicle = SRV :\r\n|else:\r\n\r\n\t{for hardpoint in ship.hardpoints:\r\n\t\t{if hardpoint.module.name = \"Kühlkörperabwurf\":\r\n\t\t\t{set heatsinks to heatsinks + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n\t\t|elif hardpoint.module.name = \"Düppel-Werfer\":\r\n\t\t\t{set chaff to chaff + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n\t\t|elif hardpoint.module.name = \"Punktverteidigung\":\r\n\t\t\t{set points to points + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t}\r\n\t}\r\n\t{for compartment in ship.compartments:\r\n\t\t{if compartment.module.name = \"Schildzellenbank\":\r\n\t\t\t{set cells to cells + compartment.module.ammoinhopper + compartment.module.ammoinclip}\r\n\t\t}\r\n\t}\t\r\n\t{SetState('eddi_heatsinks', heatsinks)}\r\n\t{SetState('eddi_chaff', chaff)}\r\n\t{SetState('eddi_cells', cells)}\r\n\t{SetState('eddi_points', points)}\r\n\r\n\r\n\tSchiff Ausrüstung aktualisiert,\r\n\t\r\n\t{if heatsinks > 0 : \r\n\t\t{if heatsinks = 1 : ein |else: {heatsinks}} Kühlkörper {OneOf(\"vorhanden,\", \"an Bord,\", \"nutzbar,\")}\t\t\r\n\t|else: keine Kühlkörper vorhanden,}\r\n\r\n\t{if chaff > 0 : {chaff} Düppel stehen zur Verfügung,\r\n\t|else: keine Düppel an Bord,}\r\n\t\r\n\t{if cells > 0 : {if cells = 1 : eine Schildzelle |else: {cells} Schildzellen} nutzbar,\r\n\t|else: keine Schildzellen an Bord,}\r\n\t\r\n\t{if points > 9000 : die Punktverteidigung hat genügend Munition,\r\n\t\t|elif points > 5000 : das Magazin der Punktverteidigung ist noch mehr als halb voll,\r\n\t\t|elif points > 100 : das Magazin der Punktverteidigung ist fast leer,\r\n\t\t|elif points > 10 : Punktverteidigung ? Noch zwei oder drei Schuß,\r\n\t\t|else: das Magazin der Punktverteidigung ist leer,\r\n\t}\r\n\t\r\n\t{Pause(1000)}\r\n\r\n\t{_ Ship model, Fighter and SRV Check _}\r\n\t{F(\"Ammo check\")}\r\n\t{F(\"Limpet check\")}\r\n\t{F(\"Hangar check\")}\r\n\t{_ F(\"List launchbays\")}\r\n\t{_ F(\"Launchbay report\")}\r\n\r\n}",
      "name": "Ship loadout function",
      "description": "Ausrüstung des Schiffs abrufen",
      "default": false,
      "defaultValue": null
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set translate to (event.ship)} {F(\"Translate Ship Names\")} für {set value to (event.price)} {F(\"Humanise ValueGer\")} credditts gekauft.\r\n\r\n{SetState(\"ship_model\", ship.model)}\r\n{SetState(\"ship_name\", ship.name)}\r\n{SetState(\"ship_ident\", ship.ident)}\r\n{_ state.ship_model}\r\n{_ state.ship_name}\r\n{_ state.ship_ident}\r\n\r\n{_ F(\"Ship loadout function\")}",
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship",
      "default": false,
      "defaultValue": "{P(event.ship, \"shipmodel\")} purchased."
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Initiiere Neustart.",
      "name": "Ship rebooted",
      "description": "Triggered when you run reboot/repair on your ship",
      "default": false,
      "defaultValue": null
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship refuelled\")}\r\n\r\n{_ Context}\r\n{SetState('eddi_context_last_subject', 'refuelling')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_fuel_remaining', event.total)}\r\n\r\n{set fuelscooped to state.eddi_fuel_scooped}\r\n{set fueltotal to ship.fueltanktotalcapacity}\r\n\r\n{if event.source = \"Market\":\r\n   {OneOf('{ShipName()} wurde','Unser Schiff wurde')}\r\n   {OneOf(\"vollgetankt\",\"aufgetankt\")}.\r\n|else:\r\n   {SetState('eddi_fuel_scooped',(state.eddi_fuel_scooped + event.amount))}\r\n\r\n   {if event.amount <= 5.0000 :\r\n      {set total to (100/fueltotal)*event.total}\r\n\r\n      {set trim to round((100/fueltotal)*state.eddi_fuel_scooped,1)}\r\n      {F(\"ZeroTrim\")}\r\n      {set percent to trim}\r\n\r\n      {set trim to round(state.eddi_fuel_scooped,1)}\r\n      {F(\"ZeroTrim\")}\r\n      {set tonnes to trim}\r\n\r\n      {SetState('eddi_fuel_scooped',0)}\r\n      {Pause(3000)}\r\n\r\n      {if tonnes = 1:\r\n         {set tons to \"tonne\"}\r\n      |else:\r\n         {set tons to \"tonnen\"}\r\n      }\r\n\r\n         {if total > 0.1 && total < 100:\r\n         \t{if state.fuel_ansagen = 1:\r\n         \t\t{percent}% aufgetankt\r\n         \t|elif state.fuel_ansagen = 2:\r\n         \t\t{OneOf(\"{OneOf('{percent}%','{tonnes} {tons}')} Treibstoff gewonnen\", \r\n         \t\t\"{OneOf('{percent}%','{tonnes} {tons}')} Sprit an Bord genommen\")},\r\n         \t|elif state.fuel_ansagen = 3:\r\n         \t\t{set trim to total} {F(\"ZeroTrim\")}\r\n         \t\t{OneOf(\"Der Tank ist {Occasionally(3, 'jetzt')} zu {round(trim, 1)}% gefüllt.\", \r\n         \t\t\"Füllstand Tank {round(trim, 1)}%, \")}\r\n         \t|else :\r\n         \t\t{OneOf(\"{percent}% aufgetankt\",\r\n         \t\t\"{OneOf('{percent}%','{tonnes} {tons}')} Treibstoff gewonnen\",\r\n         \t\t\"{OneOf('{percent}%','{tonnes} {tons}')} Sprit an Bord genommen\")},\r\n\t\t\t\t{set trim to total} {F(\"ZeroTrim\")}\t\r\n         \t\t{OneOf(\"Der Tank ist {Occasionally(3, 'jetzt')} zu {round(trim, 1)}% gefüllt.\", \r\n         \t\t\"Füllstand Tank {round(trim, 1)}%, \")}\r\n         \t}\r\n\r\n         |elif total = 100: Der\r\n             {Occasionally(2,\"Haupt\")} {Occasionally(2,\"Treibstoff\")} tank \r\n             {OneOf(\"hat wieder volle Kapazität!\",\"ist jetzt zu 100% gefüllt\",\r\n                    \"ist wieder voll!\",\"wurde wieder komplett aufgefüllt!\")}\r\n         |else:\r\n            {F(\"JumpFuel\")}\r\n         }\r\n         {Occasionally(3,\"{F('Honorific')}\")}.\r\n      \r\n   }\r\n}\r\n\r\n{_ Ship refuelled event\r\n\r\n- source\tThe source of the fuel (Market or Scoop)\r\n- price\t\tThe price of refuelling (only available if the source is Market)\r\n- amount\tThe amount of fuel obtained\r\n- total\t\tThe new fuel level (only available if the source is Scoop)\r\n- full\t\tWhether this is a full refuel\r\n_}\r\n\r\n",
      "name": "Ship refuelled",
      "description": "Triggered when you refuel your ship",
      "default": false,
      "defaultValue": "{if event.source = \"Scoop\":\r\n   {SetState('eddi_context_fuel_remaining', event.total)}\r\n|elif event.full:\r\n   {SetState('eddi_context_fuel_remaining', ship.fueltanktotalcapacity)}\r\n|else:\r\n   {SetState('eddi_context_fuel_remaining', state.eddi_context_fuel_remaining + event.amount)}\r\n}\r\n\r\n{Pause(2000)}\r\n{if event.full:\r\n   {set refueled_desc to OneOf(\"fully refuelled\", \"at maximum fuel capacity\",\"at 100% fuel capacity\")}\r\n   {OneOf(\"Refueled\", \"Fuel at maximum\", \"Maximum fuel\", \"{ShipName()} is now {refueled_desc}\" )}\r\n|else:\r\n   {if event.amount <= 5.0000:\r\n      {F('Fuel check')}\r\n   }\r\n}"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship renamed\")}\r\n\r\nIhr Schiff {ShipName()} ist jetzt registriert mit {P(system.faction)}. \r\n\r\n{set ICAO_ID to ICAO(event.ident)}\r\n{if len(ICAO_ID) > 0:\r\n    Ei KeiO Identification ist {ICAO_ID}.\r\n|else:\r\n\tHinweis: Es wurde eine Schiffs-ID ausgewählt, \r\n\tdie im Standard-Radioalphabet nicht aussprechbar ist.\r\n}\r\n\r\n{SetState(\"ship_model\", ship.model)}\r\n{SetState(\"ship_name\", ship.name)}\r\n{SetState(\"ship_ident\", ship.ident)}\r\n{_ state.ship_model}\r\n{_ state.ship_name}\r\n{_ state.ship_ident}\r\n\r\n{_\r\n- ship \t\tThe model of the ship that was renamed\r\n- shipid \tThe ID of the ship that was renamed\r\n- name \t\tThe new name of the ship\r\n- ident \tThe new ident of the ship\r\n_}",
      "name": "Ship renamed",
      "description": "Triggered when you rename a ship",
      "default": false,
      "defaultValue": "{ShipName()} now registered with {P(system.faction, \"faction\")}. \r\n\r\n{set ICAO_ID to ICAO(event.ident)}\r\n{if len(ICAO_ID) > 0:\r\n    Identification is {ICAO_ID}.\r\n|else:\r\n    Advisory: you have chosen a ship ID that is not pronounceable in the standard radio alphabet.\r\n}\r\n"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship repaired\")}\r\n\r\n{SetState(\"ship_model\", ship.model)}\r\n{SetState(\"ship_name\", ship.name)}\r\n{SetState(\"ship_ident\", ship.ident)}\r\n{_ state.ship_model}\r\n{_ state.ship_name}\r\n{_ state.ship_ident}\r\n\r\n{if event.item = \"\": {OneOf(\"Unserem Schiff\",\"{ShipName()}\")} wurde für \r\n\t{set value to event.price} {F(\"Humanise ValueGer\")} credditts repariert.\r\n|elif event.item = \"Schiffszustand\": Der Schiffszustand von {OneOf(\"Unserem Schiff\",\"{ShipName()}\")} wurde für \r\n\t{set value to event.price} {F(\"Humanise ValueGer\")} credditts zu 100% wieder hergestellt.\r\n|elif event.item = \"All\": Alle Module von {OneOf(\"Unserem Schiff\",\"{ShipName()}\")} wurden für \r\n\t{set value to event.price} {F(\"Humanise ValueGer\")} credditts repariert.\r\n|elif event.item = \"Paint\": {OneOf(\"Unser Schiff\",\"{ShipName()}\")} wurde neu lackiert.\r\n|else: Das letzte reparierte Modul war {set translate to event.item} {F(\"Translate ship module\")}. \r\n\t{OneOf(\"Unserem Schiff\",\"{ShipName()}\")} wurde für \r\n\t{set value to event.price} {F(\"Humanise ValueGer\")} credditts repariert.\r\n}\r\n\r\n{_\r\n- item      Either 'All', 'Ship Integrity', 'Hull', 'Paint', the name of the item repaired \r\n            (if repairing one item), or nothing (if repairing multiple items)\r\n- items \tThe items repaired (if repairing multiple items)\r\n- module \ta module object representing the item repaired\r\n- modules \tmodule objects representing the items repaired (if repairing multiple items)\r\n- price \tThe price of the repair \r\n_}\r\n",
      "name": "Ship repaired",
      "description": "Triggered when you repair your ship",
      "default": false,
      "defaultValue": "{set repairedSystems to []}\r\n{if len(event.items) > 0:\r\n    {for item in event.items:\r\n        {if item = \"Paint\":\r\n            {set systemDescription to cat(Occasionally(2, \"{ShipName()}'s\"), \" paint \", OneOf(\"restored.\", \"renewed.\")))}\r\n            {set repairedSystems to cat(repairedSystems, [systemDescription])}        \r\n        |elif item = \"Ship Integrity\" || item = \"Wear\":\r\n            {set systemDescription to cat(Occasionally(2, \"{ShipName()}'s\"), \" \", Occasionally(2, '{OneOf(\\\"regular\\\", \\\"standard\\\")}'),\" maintenance completed.\"))}\r\n            {set repairedSystems to cat(repairedSystems, [systemDescription])}                 \r\n        }\r\n    }\r\n}\r\n\r\n{set repairedModules to []}\r\n{if len(event.modules) > 0:\r\n    {for module in event.modules:\r\n        {if len(module.localizedmount) > 0:\r\n            {_ This is a weapon. We'll identify the class, grade, and mount}\r\n            {set weaponDescription to cat(module.class, \" \", module.grade, \" \", module.mount, \" \", module.name)}\r\n            {set repairedModules to cat(repairedModules, [weaponDescription])}\r\n        |elif find(module.invariantName, \"Cockpit\") > -1:\r\n            {_ This isn't a weapon. We've matched it to the name of our cockpit module}\r\n            {set repairedModules to cat(repairedModules, [OneOf(\"Canopy\", \"Cockpit\")])}                 \r\n        |else:\r\n            {_ This isn't a weapon. We haven't matched it to the name of any particular module}\r\n            {set repairedModules to cat(repairedModules, [module.name])}\r\n        }\r\n    }\r\n}\r\n\r\n{if len(repairedSystems) > 0:\r\n    {List(repairedSystems)}.\r\n}\r\n{if len(repairedModules) > 0:\r\n    {List(repairedModules)} repaired.\r\n}\r\n{if len(repairedSystems) = 0 && len(repairedModules) = 0:\r\n    {ShipName()} repaired.\r\n}"
    },
    "Ship repurchased": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Ship repurchased",
      "description": "Triggered when you repurchase your ship",
      "default": true,
      "defaultValue": null
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship restocked\")}\r\n\r\n{set translate to ShipName()} {F(\"Translate Ship Names\")} wurde für \r\n\t{set value to (event.price)} {F(\"Humanise ValueGer\")} credditts \r\n\t{OneOf(\"wiederbewaffnet\",\"aufmonitioniert\")}.\r\n\r\n{F(\"Ship loadout\")}\r\n\r\n{_ - price The price of restocking _}",
      "name": "Ship restocked",
      "description": "Triggered when you restock your ship's ammunition",
      "default": false,
      "defaultValue": "{ShipName()} {OneOf(\"restocked\",\"rearmed\")}."
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Die Systeme wurden runter gefahren!",
      "name": "Ship shutdown",
      "description": "Triggered when your ship's system are shutdown",
      "default": false,
      "defaultValue": null
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship sold\")}\r\n\r\n{set translate to ShipName(event.shipid, event.ship)} {F('Translate Ship Names')} \r\nwurde  für {set value to (event.price)} {F(\"Humanise ValueGer\")} credditts \r\n{OneOf(\"aus dem aktiven Dienst genommen\", \"verkauft\", \"veräussert\",)}.\r\n\r\n{_ \r\n- ship \t\tThe ship that was sold\r\n- shipid \tThe ID of the ship that was sold\r\n- price \tThe price for which the ship was sold\r\n- system \tThe system where the ship was sold\r\n_}",
      "name": "Ship sold",
      "description": "Triggered when you sell a ship",
      "default": false,
      "defaultValue": "{OneOf(\"Retired {ShipName(event.shipid, event.ship)} from active duty\",\r\n             \"Decommissioned {ShipName(event.shipid, event.ship)}\",\r\n             \"Sold {ShipName(event.shipid, event.ship)}\")}\r\n{if event.system && event.system != system.name:\r\n   in {event.system}\r\n}."
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship sold on rebuy\")}\r\n\r\n{event.ship}, mit der Kennung {event.shipid}, wurde in {event.system} \r\nfür {Humanise(event.price)} credditts verkauft.\r\n\r\n{_\r\n- ship \t\tThe ship that was sold\r\n- shipid \tThe ID of the ship that was sold\r\n- price \tThe price for which the ship was sold\r\n- system \tThe system where the ship was sold\r\n_}",
      "name": "Ship sold on rebuy",
      "description": "Triggered when you sell a ship to raise funds on the insurance / rebuy screen",
      "default": false,
      "defaultValue": "{event.ship}, identification {event.shipid}, sold in {event.system} for {Humanise(event.price)} credits"
    },
    "Ship state check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{F(\"Ammo check\")}\r\n{_ F(\"Fighter bay check\")} - gibt es nicht\r\n{_ F(\"Heat sink check\")} - gibt es nicht\r\n{_ F(\"SRV check\")}\r\n{_ F(\"Docking computer check\")}\r\n{_ F(\"Exploration scanner check\")}\r\n{_ F(\"Interdictor check\")}",
      "name": "Ship state check",
      "description": "z.Z. n.a. / Checks the state of the ship configuration and sets appropriate states",
      "default": false,
      "defaultValue": null
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship swapped\")}\r\n\r\n{if event.storedship:\r\n    {set translate to ShipName(event.storedshipid, event.storedship)} {F(\"Translate Ship Names\")}\r\n    wurde {OneOf(\"eingelagert\", \"eingemottet\", \"geparkt\")}!\r\n|elif event.soldship:\r\n    {set translate to ShipName(event.soldshipid, event.soldship)} {F(\"Translate Ship Names\")} wurde verkauft!\r\n}\r\n\r\nWir wechseln auf {set to to 1} {set translate to ShipName(event.shipid, event.ship)} {F(\"Translate Ship Names\")}.\r\n\r\n{set fighterhangar to false}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.name = \"Fighter-Hangar\" : {set fighterhangar to true}\r\n    }\r\n}\r\n{if fighterhangar = true:\r\n\tZur Erinnerung: Wir müssen ein Besatzungsmitglied in den aktiven Dienst stellen.\r\n}\r\n\r\n{_ F(\"Ship loadout\")}\r\n\r\n\r\n{SetState(\"ship_model\", ship.model)}\r\n{SetState(\"ship_name\", ship.name)}\r\n{SetState(\"ship_ident\", ship.ident)}\r\n{_ state.ship_model}\r\n{_ state.ship_name}\r\n{_ state.ship_ident}\r\n\r\n{_\r\n- shipid \t\tThe ID of the ship that was swapped\r\n- ship \t\t\tThe ship that was swapped\r\n- soldshipid \tThe ID of the ship that was sold as part of the swap\r\n- soldship \t\tThe ship that was sold as part of the swap\r\n- storedshipid \tThe ID of the ship that was stored as part of the swap\r\n- storedship \tThe ship that was stored as part of the swap\r\n_}\r\n",
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship",
      "default": false,
      "defaultValue": "{if event.storedship:\r\n    {OneOf(\"Storing\", \"Mothballing\", \"Parking\")} {ShipName(event.storedshipid, event.storedship)} and\r\n|elif event.soldship:\r\n    Selling {ShipName(event.soldshipid, event.soldship)} and\r\n}\r\n{OneOf(\"swapping\",\"moving\",\"transferring\")} to {ShipName(event.shipid, event.ship)}.\r\n\r\n{F(\"Limpet check\")}\r\n{F(\"Launchbay report\")}\r\n\r\n{set fighterhangar to false}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\r\n        {set fighterhangar to true}\r\n    }\r\n}\r\n{if fighterhangar = true:\r\n    Reminder: you need to assign a crew member to active duty.\r\n}\r\n"
    },
    "Ship targeted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship targeted\")}\r\n\r\n{_ Ship targeted }\r\n{_ Triggered when the player selects a target }\r\n\r\n{_ event Parameters:   targetlocked - bool (ie false when losing target) }\r\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) }\r\n{_ If Scan stage >= 1: name (of pilot), rank (of pilot) }\r\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) }\r\n{_ If scan stage >= 3: faction, legalstatus (ie clean, wanted, etc), bounty (if appicable), }\r\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'targeted')}\r\n\r\n{if event.targetlocked = true\t: {SetState('ship_targetlocked', true)}\r\n|else\t\t\t\t\t\t\t: {SetState('ship_targetlocked', false)}\r\n}\r\n\r\n\r\n{if event.targetlocked && event.scanstage > 2 || !event.subsystem:\r\n    {set legalstatus to event.legalstatus}\r\n    {if legalstatus = \"Wanted\" || legalstatus = \"Wanted Enemy\" || legalstatus = \"Warrant\" || \r\n    \tlegalstatus = \"Gesetzlos\" || legalstatus = \"Feindlich\" || legalstatus = \"Gesuchter Feind\" || \r\n    \tlegalstatus = \"Gesucht\" || legalstatus = \"Haftbefehl\" || legalstatus = \"Bevollmächtigt\" :\r\n        Pilot {event.name}, im Schif {event.ship} mit Rang {event.rank} \r\n        {OneOf(\"hat ein Kopfgeld\", \"ist gesucht\", \"ist ein legitimes Ziel\")}.\r\n    }\r\n}\r\n\r\n{_\r\n- targetlocked\t\tTrue when a ship has been targeted. False when a target has been lost/deselected\r\n- ship\t\t\t\tthe model of the ship\r\n- scanstage\t\t\tthe stage of the ship scan (e.g. 0, 1, 2, or 3)\r\n- name\t\t\t\tThe name of the pilot\r\n- rank\t\t\t\tThe rank of the pilot\r\n- faction\t\t\tThe faction of the pilot\r\n- power\t\t\t\tThe aligned power of the pilot (if player is pledged)\r\n- legalstatus\t\tThe legal status of the pilot\r\n- shieldhealth\t\tThe health of the shields\r\n- hullhealth\t\tThe health of the hull\r\n- subsystem\t\t\tThe subsystem targeted\r\n- subsystemhealth\tThe health of the subsystem targeted\r\n_}\r\n",
      "name": "Ship targeted",
      "description": "Triggered when the player selects a target",
      "default": false,
      "defaultValue": "{_ Ship targeted }\r\n{_ Triggered when the player selects a target }\r\n\r\n{_ event Parameters:   targetlocked - bool (ie false when losing target) _}\r\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) _}\r\n{_ If Scan stage >= 1: name (of pilot), rank (of pilot) _}\r\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) _}\r\n{_ If scan stage >= 3: faction, power (if player is pledged to a power), _}\r\n{_                     legalstatus (ie clean, wanted, etc), bounty (if applicable), _}\r\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) _}\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'targeted')}\r\n\r\n{if event.targetlocked && event.scanstage > 2 && !event.subsystem:\r\n    {set legalstatus to event.legalstatus}\r\n    {if legalstatus = \"Wanted\" || legalstatus = \"Wanted Enemy\" || legalstatus = \"Warrant\":\r\n        {set wanted_list to split(state.eddi_context_wanted_list, \"+=\")}\r\n        {if find(wanted_list, event.name) < 0:\r\n            {event.name} {OneOf(\"has a bounty\", \"is fair game\", \"is a legitimate target\")}.\r\n            {if len(wanted_list) = 0: {set sep to \"\"} |else: {set sep to \"+=\"}}\r\n            {set wanted_list to cat(wanted_list, [event.name])}\r\n            {SetState('eddi_context_wanted_list', join(wanted_list, sep))}\r\n        }    \r\n    }\r\n}\r\n"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Ship transfer initiated\")}\r\n\r\n{set translate to ShipName(event.shipid, event.ship)} {F(\"Translate Ship Names\")} wird \r\n{if (event.system): von {(event.system)}} {OneOf(\"transferiert\", \"übersandt\", \"überführt\")}.\r\n\r\n{if event.transfercost: zum Preis von {Humanise(event.price)} credditts.}\r\n\r\n{set t_remaining to event.time}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Erwartete Ankunft in:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} Tagen,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} Stunden,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: und}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} Minuten.\r\n   }\r\n}\r\n\r\n{_ \r\n- shipid\tThe ID of the ship that is being transferred\r\n- ship\t\tThe ship that is being transferred\r\n- system\tThe system from which the ship is being transferred\r\n- distance\tThe distance that the transferred ship needs to travel, in light years\r\n- price\t\tThe price of transferring the ship\r\n- time\t\tThe time in seconds to complete transferring the ship\r\n_}",
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer",
      "default": false,
      "defaultValue": "{ShipName(event.shipid, event.ship)} {OneOf(\"on its way\",\"being transferred\", \"transfer initiated\", \"being transported\", \"being transferred\")} from {P(event.system, \"starsystem\")}\r\n\r\n{if event.transfercost: for a cost of {Humanise(event.price)} credits.}\r\n\r\n{set t_remaining to event.time}\r\n\r\n{if t_remaining:\r\n\r\n    {Pause(1000)}\r\n    Expected arrival in:\r\n\r\n    {if t_remaining > (60*60*24):\r\n        {set t_days to floor(t_remaining/(60*60*24))}\r\n        {if t_days > 1:\r\n            {t_days} days,\r\n        |else:\r\n            1 day,\r\n        }\r\n        {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n    }\r\n\r\n    {if t_remaining > 3600:\r\n        {set t_hours to floor(t_remaining/3600)}\r\n        {if t_hours > 1:\r\n            {t_hours} hours,\r\n        |else:\r\n            1 hour,\r\n        }\r\n        {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n    }\r\n\r\n    {if t_remaining > 60:\r\n        {if t_days || t_hours: and}\r\n        {set t_minutes to round(t_remaining/(60),0)}\r\n        {if t_minutes > 1:\r\n            {t_minutes} minutes.\r\n        |else:\r\n            1 minute,\r\n        }\r\n    }\r\n}"
    },
    "Shutdown": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Shutdown",
      "description": "Triggered on a clean shutdown of the game",
      "default": true,
      "defaultValue": null
    },
    "Signal detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Signal detected\")}\r\n\r\n{_ Edit the true/false values of `spokenSources` to identify signal types that should be announced whenever they are first detected within a system \r\n(otherwise, only signal sources detected while in fss or saa mode will be taken into account. _}\r\n\r\n{set spokenSources to [\r\n    \"Anomaly\": true,\r\n    \"Anomalie\": true,\r\n    \"AX Conflict Zone\": true,\r\n    \"AX Konfliktzone\": true,\r\n    \"Bekannte Navigationsboje\": false,\r\n    \"Capitol Ship\": true,\r\n    \"Ceremonial Comms\": false,\r\n    \"Combat Aftermath\": true,\r\n    \"Compromised Nav Beacon\": false,\r\n    \"Degraded Emissions\": true,\r\n    \"Degradierte Emissionen\": true,\r\n    \"Distress Call\": true,\r\n    \"Encoded Emissions\": true,\r\n    \"Großkampfschiff\": true,\r\n    \"Zeremonielle Kommunikation\": false,\r\n    \"Kampffolgen\": true,\r\n    \"Konvoi-Auflösungsmuster\": true,\r\n    \"Notruf\": true,\r\n    \"Verschlüsselte Emissionen\": true,\r\n    \"Hazardous Resource Extraction Site\": false,\r\n    \"Rohstoffabbau-Standort [Gefährlich]\": false,\r\n    \"Rohstoff-Abbau-Standort\": false,\r\n    \"High Grade Emissions\": true,\r\n    \"Hochgradige Emissionen\": true,\r\n    \"High Intensity Combat Zone\": false,\r\n    \"Kampfbereich [Hohe Intensität]\": false,\r\n    \"High Intensity Resource Extraction Site\": false,\r\n    \"Rohstoffabbau-Standort [Hoch]\": false,\r\n    \"Listening Post\": true,\r\n    \"Horchposten\": true,\r\n    \"Low Intensity Combat Zone\": false,\r\n    \"Kampfbereich [Geringe Intensität]\": false,\r\n    \"Low Intensity Resource Extraction Site\": false,\r\n    \"Rohstoffabbau-Standort [Gering]\": false,\r\n    \"Medium Intensity Combat Zone\": false,\r\n    \"Kampfbereich [Mittlere Intensität]\": false,\r\n    \"Mission Target\": true,\r\n    \"Missionsziel\": true,\r\n    \"Nav Beacon\": false,\r\n    \"Navigationsboje\": false,\r\n    \"Non-Human Signal Source\": true,\r\n    \"Nichtmenschliche Signalquelle\": true,\r\n    \"Notable Stellar Phenomena\": true,\r\n    \"Bemerkenswerte Sternenphänomene\": true,\r\n    \"Resource Extraction Site\": false,\r\n    \"Rohstoff-Abbau-Standort\": false,\r\n    \"Trading Beacon\": true,\r\n    \"Handelssignal\": true,\r\n    \"Unidentified Signal Source\": false,\r\n    \"Unidentifizierte Signalquelle\": false,\r\n    \"Unbekannte Signalquelle\": false,\r\n    \"Unregistered Comms Beacon\": true,\r\n    \"Unbekannte Kommunikationsboje\": true,\r\n    \"Weapons Fire\": false,\r\n    \"Waffenfeuer\": false,\r\n    \"Gefährdungsnavigationssignal\": true,\r\n]}\r\n\r\n{if status.gui_focus = \"fss mode\" || status.gui_focus = \"saa mode\" || (spokenSources[event.source] = true && event.unique) :\r\n    {if event.source && !event.stationsignal: \r\n        {if event.threatlevel > 0: Klasse {event.threatlevel} \r\n        }\r\n        {event.source} \r\n        {if event.faction != \"None\" || event.faction = \"Keine\":\r\n        für {event.faction}\r\n        }\r\n        entdeckt.\r\n    }\r\n}\r\n\r\n{_\r\n- source\t\t\tThe signal source\r\n- factionstate\t\tThe faction state that triggered the signal source, if any\r\n- faction\t\t\tThe faction affected by the signal source, if any\r\n- secondsremaining\tThe time before the signal expires, in seconds\r\n- stationsignal\t\tTrue if the signal source is a station\r\n- threatlevel\t\tThe risk posed by the signal source. Higher numbers are more dangerous.\r\n- unique            True if this is the first signal of this type detected within the star system\r\n_}",
      "name": "Signal detected",
      "description": "Triggered when a signal source is detected",
      "default": false,
      "defaultValue": "{_ Edit the true/false values of `spokenSources` to identify signal types that should be announced whenever they are first detected within a system (otherwise, only signal sources detected while in fss or saa mode will be taken into account. _}\r\n\r\n{set spokenSources to [\r\n    \"Anomaly\": true,\r\n    \"AX Conflict Zone\": true,\r\n    \"Capitol Ship\": false,\r\n    \"Ceremonial Comms\": false,\r\n    \"Combat Aftermath\": false,\r\n    \"Compromised Nav Beacon\": false,\r\n    \"Convoy Dispersal Pattern Detected\": false,\r\n    \"Degraded Emissions\": false,\r\n    \"Distress Call\": true,\r\n    \"Encoded Emissions\": false,\r\n    \"Hazardous Resource Extraction Site\": false,\r\n    \"High Grade Emissions\": false,\r\n    \"High Intensity Combat Zone\": false,\r\n    \"High Intensity Resource Extraction Site\": false,\r\n    \"Listening Post\": true,\r\n    \"Low Intensity Combat Zone\": false,\r\n    \"Low Intensity Resource Extraction Site\": false,\r\n    \"Medium Intensity Combat Zone\": false,\r\n    \"Mission Target\": true,\r\n    \"Nav Beacon\": false,\r\n    \"Non-Human Signal Source\": false,\r\n    \"Notable Stellar Phenomena\": true,\r\n    \"Resource Extraction Site\": false,\r\n    \"Trading Beacon\": false,\r\n    \"Unidentified Signal Source\": false,\r\n    \"Unregistered Comms Beacon\": true,\r\n    \"Weapons Fire\": false,\r\n]}\r\n\r\n{if status.gui_focus = \"fss mode\" || status.gui_focus = \"saa mode\" || \r\n(spokenSources[event.source] = true && event.unique):\r\n    {if event.source && !event.stationsignal:\r\n        {if event.threatlevel > 0:\r\n            Class {event.threatlevel} \r\n        }\r\n        {event.source} \r\n        {if event.faction != \"None\":\r\n            for {event.faction}\r\n        }\r\n        detected.\r\n    }\r\n}"
    },
    "Silent running": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": " \r\n{  if event.silentrunning: silent ranning\r\n|else                    : \r\n}",
      "name": "Silent running",
      "description": "Triggered when you activate or deactivate silent running",
      "default": false,
      "defaultValue": null
    },
    "Sprachausgabe Abbruch": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{disablespeechresponder}\r\n\r\n{Log(\"EDDI Fktn.: Sprachausgabe Abbruch\")}",
      "name": "Sprachausgabe Abbruch",
      "description": "Test ! um Sprachskripts zu beenden",
      "default": false,
      "defaultValue": null
    },
    "Squadron rank": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron rank }\r\n{_ Triggered when your rank with a squadron has changed }\r\n\r\n\r\nDie Führung der Staffel {event.name}hat Dich \r\n{if event.newrank > event.oldrank:\r\n    zum {cmdr.squadronrank.name}befördert.\r\n|elif event.newrank < event.oldrank:\r\n    zum {cmdr.squadronrank.name}degradiert.\r\n}\r\n\r\n{_\r\n- name\t\tThe squadron name\r\n- oldrank\tThe old rank\r\n- newrank\tThe new rank\r\n_}",
      "name": "Squadron rank",
      "description": "Triggered when your rank with a squadron has changed",
      "default": false,
      "defaultValue": "{_ Squadron rank }\r\n{_ Triggered when your rank with a squadron has changed }\r\n\r\n\r\nYou have been\r\n{if event.newrank > event.oldrank:\r\n    promoted \r\n|else:\r\n    demoted\r\n}\r\nto {cmdr.squadronrank.name} in the {event.name} squadron.\r\n"
    },
    "Squadron status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron status }\r\n{_ Triggered when your status with a squadron changes }\r\n\r\n\r\n{if event.status = \"applied\":\r\n    Du hast den Beitritt zur Staffel {event.name} beantragt.\r\n|elif event.status = \"created\":\r\n    Du hast soeben die Staffel {event.name} gegründet.\r\n|elif event.status = \"disbanded\":\r\n    Die Staffel {event.name} wurde aufgelöst.\r\n|elif event.status = \"invited\":\r\n    Die Staffel {event.name} hat Dir eine Einladung geschickt.\r\n|elif event.status = \"joined\":\r\n    Du bist Mitglied der Staffel {event.name}.\r\n|elif event.status = \"kicked\":\r\n    Die Staffel {event.name} hat Dich rausgeschmissen.\r\n|elif event.status = \"left\":\r\n    Du hast die Staffel {event.name} verlassen.\r\n}\r\n\r\n{_ \r\n- name\t\tThe squadron name\r\n- status\tThe squadron status `applied`, `created`, `disbanded`, `invited`, `joined`, `kicked`, `left`\r\n_}",
      "name": "Squadron status",
      "description": "Triggered when your status with a squadron has changed",
      "default": false,
      "defaultValue": "{_ Squadron status }\r\n{_ Triggered when your status with a squadron changes }\r\n\r\n\r\n{if event.status = \"applied\":\r\n    You have applied for admission into the {event.name} squadron.\r\n|elif event.status = \"created\":\r\n    You have created the {event.name} squadron.\r\n|elif event.status = \"disbanded\":\r\n    The {event.name} squadron has been disbanded.\r\n|elif event.status = \"invited\":\r\n    You have been invited into the {event.name} squadron.\r\n|elif event.status = \"joined\":\r\n    You have joined the {event.name} squadron.\r\n|elif event.status = \"kicked\":\r\n    You have been kicked from the {event.name} squadron.\r\n|elif event.status = \"left\":\r\n    You have left the {event.name} squadron.\r\n}\r\n"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: SRV docked\")}\r\n\r\n{SetState(\"use_srv\", false)}\r\n\r\n{Pause(3000)}\r\n{OneOf(\"Bodenfahrzeug\", \"Es Ar Wie\", \"Buggy\", \"Landungsfahrzeug\")} \r\n{OneOf(\"angedockt\",\"aufgenommen\",\"angekoppelt\",\"gesichert\")}.\r\n\r\n{_ - id The srv's id _}",
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship",
      "default": false,
      "defaultValue": "{OneOf(\"Buggy\", \"SRV\")} docked."
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: SRV launched\")}\r\n\r\n{SetState(\"use_srv\", true)}\r\n\r\n{Pause(3000)}\r\n\r\n{OneOf(\"Bodenfahrzeug\", \"Es Ar Wie\", \"Buggy\", \"Landungsfahrzeug\")} wird \r\n{OneOf(\"abgedockt\",\"freigegeben\",\"abgeladen\",\"abgekoppelt\",\"entsichert\")}.\r\n\r\n{set response to :\r\n\t{set gravity to round(body.gravity,2)}\r\n\t{Pause(500)}\r\n\t{if gravity > 0 : \r\n\t\tDas Objekt hat eine\r\n\t\t{if body.gravity < 0.5  : geringe\r\n\t\t|elif body.gravity < 2  : mittlere\r\n\t\t|elif body.gravity < 4  : hohe\r\n\t\t|else                         : extrem hohe\r\n\t\t}\r\n\t\tGravitation von {set value to (gravity)} {F(\"Humanise ValueGer\")} G.\r\n\t|else : Wir haben keine Information zur {OneOf(\"Gravitation\", \"Schwerkraft\")} !\r\n\t}\r\n}\r\n\r\n{Voice(response, \"IVONA 2 Hans OEM\")}\r\n\r\n{_ \r\n- loadout \t\t\tThe SRV's loadout\r\n- playercontrolled \tTrue if the SRV is controlled by the player\r\n_}\r\n",
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship",
      "default": false,
      "defaultValue": "{OneOf(\"Buggy\", \"SRV\")} {OneOf(\"launched\", \"away\")}."
    },
    "SRV turret": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{set respons to :\r\n\t{if event.deployed : {OneOf(\"Waffenturm\", \"Turm\")} ist jetzt ausgefahren.\r\n\t|else : {OneOf(\"Waffenturm\", \"Turm\")} {OneOf(\"gesichert\", \"blockiert\")}\r\n\t}\r\n}\r\n\r\n{Voice(response, \"IVONA 2 Hans OEM\")}",
      "name": "SRV turret",
      "description": "Triggered when you deploy or retract your SRV's turret",
      "default": false,
      "defaultValue": null
    },
    "SRV turret deployable": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if status.vehicle = \"SRV\":\r\n\t{if event.deployable:\r\n\t\t{OneOf(\"Waffenturm\", \"Turm\")} kann jetzt ausgefahren werden.\r\n\t|else:\r\n\t\t{OneOf(\"Waffenturm\", \"Turm\")} wird {OneOf(\"gesichert\", \"blockiert\", \"eingefahren\")}\r\n\t}\r\n}",
      "name": "SRV turret deployable",
      "description": "Triggered when your SRV enters or leaves the restriction zone around a ship.",
      "default": false,
      "defaultValue": "{if !event.deployable:\r\n   {OneOf(\"Buggy\", \"SRV\")} standing by for recovery.\r\n}"
    },
    "Star habitable zone": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}\r\n{if !reportbody:\r\n   {set reportbody to event)}\r\n}\r\n\r\n{_ Table referenced for values: https://docs.google.com/spreadsheets/d/1v8_TRdaNRyKVRHS49KtJomNtQlLNg8vg7ydLULMGVe4/edit#gid=529416250 _}\r\n\r\n{if reportbody.stellarclass = \"O\":\r\n   {set aLow to 16880}\r\n   {set bLow to 3.56}\r\n   {set cLow to -0.0000562}\r\n   {set aHigh to 26940}\r\n   {set bHigh to 5.68}\r\n   {set cHigh to -0.0000897}\r\n|elif reportbody.stellarclass = \"B\":\r\n   {set aLow to 3760}\r\n   {set bLow to 12.98}\r\n   {set cLow to -0.0019}\r\n   {set aHigh to 6000}\r\n   {set bHigh to 20.7}\r\n   {set cHigh to -0.00303}\r\n|elif reportbody.stellarclass = \"A\":\r\n   {set aLow to 768}\r\n   {set bLow to 76.8}\r\n   {set cLow to -0.539}\r\n   {set aHigh to 1226}\r\n   {set bHigh to 122.5}\r\n   {set cHigh to -0.86}\r\n|elif reportbody.stellarclass = \"F\":\r\n   {set aLow to 323.5}\r\n   {set bLow to 186.1}\r\n   {set cLow to -8.02}\r\n   {set aHigh to 516}\r\n   {set bHigh to 296.9}\r\n   {set cHigh to -12.79}\r\n|elif reportbody.stellarclass = \"G\":\r\n   {set aLow to 165.2}\r\n   {set bLow to 369.3}\r\n   {set cLow to -65.2}\r\n   {set aHigh to 263.6}\r\n   {set bHigh to 589.5}\r\n   {set cHigh to -104.2}\r\n|elif reportbody.stellarclass = \"K\":\r\n   {set aLow to 71.9}\r\n   {set bLow to 830}\r\n   {set cLow to -701}\r\n   {set aHigh to 114.8}\r\n   {set bHigh to 1324}\r\n   {set cHigh to -1119}\r\n|elif reportbody.stellarclass = \"M\":\r\n   {set aLow to 13.7}\r\n   {set bLow to 2.88}\r\n   {set cLow to -0.0185}\r\n   {set aHigh to 21.8}\r\n   {set bHigh to 4.59}\r\n   {set cHigh to -0.029}\r\n}\r\n\r\n{set hzmin to aLow+(bLow*reportbody.luminosity)+(cLow*reportbody.luminosity*reportbody.luminosity)}\r\n{set hzmax to aHigh+(bHigh*reportbody.luminosity)+(cHigh*reportbody.luminosity*reportbody.luminosity)}\r\n\r\n{if hzmin > 0 && hzmax > 0:\r\n   Bewohnbare Zone\r\n   {Occasionally(2, OneOf(\"wird berechnet mit\", \"fällt in den Bereich von\"))}: \r\n   {set value to (round(hzmin))} {F(\"Humanise ValueGer\")}\r\n   bis {set value to (round(hzmax))} {F(\"Humanise ValueGer\")}\r\n   Lichtsekunden.\r\n|elif hzmax > 0:\r\n   Bewohnbare Zone\r\n   {Occasionally(2, OneOf(\"wird berechnet mit maximal\", \"liegt im Bereich von maximal\"))}: \r\n   {set value to (round(hzmax))} {F(\"Humanise ValueGer\")}\r\n   Lichtsekunden.\r\n}",
      "name": "Star habitable zone",
      "description": "Berechne die bewohnbare Zone eines Sterns",
      "default": false,
      "defaultValue": "{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which star you are asking about.\r\n|else:\r\n    {if (reportbody.estimatedhabzoneinner && reportbody.estimatedhabzoneouter) && \r\n     (reportbody.estimatedhabzoneinner > 0 && reportbody.estimatedhabzoneouter> 0):\r\n       Habitable zone\r\n       {Occasionally(2, OneOf(\"calculated at\", \"calculated to fall from\"))}: \r\n       {Humanise(reportbody.estimatedhabzoneinner)} \r\n       to {Humanise(reportbody.estimatedhabzoneouter)} \r\n       lightseconds.\r\n    |elif reportbody.estimatedhabzoneouter && reportbody.estimatedhabzoneouter > 0:\r\n       Habitable zone\r\n       {Occasionally(2, OneOf(\"calculated at\", \"calculated to fall from\"))}: \r\n       {Humanise(reportbody.estimatedhabzoneouter)} \r\n       lightseconds maximum.\r\n    }\r\n}"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Star report\")}\r\n\r\n{_ SetState('state.eddi_context_star_star', \"Sun\") _}\r\n{_ SetState('state.eddi_context_star_system', \"Sol\") _}\r\n{_ state.eddi_context_star_star _}\r\n{_ state.eddi_context_star_system _}\r\n\r\n{_ Fetch from context _}\r\n{_ set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system) _}\r\n\r\n{set notables_tell to 0}                                   {_ oder to 1, wenn erzält werden soll}\r\n{set mainsequence to 0}\r\n\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\": Welcher Stern ist gemeint?\r\n|else:\r\n\t\r\n\t{state.eddi_context_star_star} ist\r\n\t{  if reportbody.stellarclass = \"O\"                    : ein unglaublich seltener Hauptreihenstern \t{set mainsequence to 0}\r\n\t|elif reportbody.stellarclass = \"B\"                    : ein sehr seltener Hauptreihenstern \t\t{set mainsequence to 0}\r\n\t|elif reportbody.stellarclass = \"A\"                    : ein seltener Hauptreihenstern\t\t\t\t{set mainsequence to 0}\r\n\t|elif reportbody.stellarclass = \"F\"                    : ein ungewöhnlicher Hauptreihenstern \t\t{set mainsequence to 0}\r\n\t|elif reportbody.stellarclass = \"G\"                    : ein gewöhnlicher Hauptreihenstern \t\t\t{set mainsequence to 0}\r\n\t|elif reportbody.stellarclass = \"K\"                    : ein gewöhnlicher Hauptreihenstern  \t\t{set mainsequence to 0}\r\n\t|elif reportbody.stellarclass = \"M\"                    : ein ganz gewöhnlicher Hauptreihenstern \t{set mainsequence to 0}\r\n\t|elif reportbody.stellarclass = \"L\"                    : ein brauner Zwerg\r\n\t|elif reportbody.stellarclass = \"T\"                    : ein brauner Zwerg\r\n\t|elif reportbody.stellarclass = \"Y\"                    : ein brauner Zwerg\r\n\t|elif reportbody.stellarclass = \"TTS\"                  : ein T-tauri Stern mit kontinuierlich ansteigender Gravitation\r\n\t|elif reportbody.stellarclass = \"AeBe\"                 : ein sehr junger Proto Stern der noch nicht zugeordnet werden kann\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Occasionally(4, \"aber auf dem besten Wege sich zu einem A oder B Klasse Stern zu entwickeln\")}\r\n\t|elif reportbody.stellarclass = \"W\"                    : ein alter Stern {Occasionally(4, \"der nicht länger Wasserstoff verbrennt und sich seinem Lebens Ende nähert\")}\r\n\t|elif reportbody.stellarclass = \"WN\"                   : ein alter Stern {Occasionally(4, \"der nicht länger Wasserstoff verbrennt und sich seinem Lebens Ende nähert\")}\r\n\t|elif reportbody.stellarclass = \"WNC\"                  : ein alter Stern {Occasionally(4, \"der nicht länger Wasserstoff verbrennt und sich seinem Lebens Ende nähert\")}\r\n\t|elif reportbody.stellarclass = \"WC\"                   : ein alter Stern {Occasionally(4, \"der nicht länger Wasserstoff verbrennt und sich seinem Lebens Ende nähert\")}\r\n\t|elif reportbody.stellarclass = \"WO\"                   : ein alter Stern {Occasionally(4, \"der nicht länger Wasserstoff verbrennt und sich seinem Lebens Ende nähert\")}\r\n\t|elif reportbody.stellarclass = \"CS\"                   : ein Kohlenstoff verbrennender Stern\r\n\t|elif reportbody.stellarclass = \"C\"                    : ein Kohlenstoff brennender Stern \t{Occasionally(2, \"in seiner Spätphase\")} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Occasionally(4, \"mit einer Kohlenstoff dominierenden Athmosphäre\")}\r\n\t|elif reportbody.stellarclass = \"CN\"                   : ein Kohlenstoff brennender Stern \t{Occasionally(2, \"in seiner Spätphase\")} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Occasionally(4, \"mit einer Kohlenstoff dominierenden Athmosphäre\")}\r\n\t|elif reportbody.stellarclass = \"CJ\"                   : ein Kohlenstoff brennender Stern \t{Occasionally(2, \"in seiner Spätphase\")} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Occasionally(2, \"mit hohen Anteilen an Kohlenstoff 13 in seiner Athmosphäre\")}\r\n\t|elif reportbody.stellarclass = \"CH\"                   : ein Kohlenstoff brennender Stern \t{Occasionally(2, \"in seiner Spätphase\")} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Occasionally(4, \"mit einer Kohlenstoff dominierenden Athmosphäre\")}\r\n\t|elif reportbody.stellarclass = \"CHd\"                  : ein Kohlenstoff brennender Stern \t{Occasionally(2, \"in seiner Spätphase\")} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Occasionally(4, \"mit einer Kohlenstoff dominierenden Athmosphäre\")}\r\n\t|elif reportbody.stellarclass = \"MS\"                   : ein late sequence star {Occasionally(4, \"der einst ein M Klasse Stern war und sich nun zu einem Kohlenstoff brennenden Stern wandelt\")}\r\n\t|elif reportbody.stellarclass = \"S\"                    : ein late sequence star {Occasionally(4, \"der einst ein M Klasse Stern war und sich nun zu einem Kohlenstoff brennenden Stern wandelt\")}\r\n\t|elif reportbody.stellarclass = \"D\"                    : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DA\"                   : ein weißer Zwerg {Occasionally(4, \"mit einer Wasserstoff reichen Athmosphäre\")}\r\n\t|elif reportbody.stellarclass = \"DAB\"                  : ein weißer Zwerg {Occasionally(4, \"mit einer Wasserstoff und Helium reichen Athmosphäre\")}\r\n\t|elif reportbody.stellarclass = \"DAO\"                  : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DAZ\"                  : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DAV\"                  : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DB\"                   : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DBZ\"                  : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DBV\"                  : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DO\"                   : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DOV\"                  : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DQ\"                   : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DC\"                   : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DCV\"                  : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"DX\"                   : ein weißer Zwerg\r\n\t|elif reportbody.stellarclass = \"N\"                    : ein neutronen Stern {Occasionally(4, \"mit einem gefärlich hochverdichteten Kern\")}\r\n\t|elif reportbody.stellarclass = \"H\"                    : ein schwarzes Loch\r\n\t|elif reportbody.stellarclass = \"X\"                    : ein ungewöhnliches Sternenphänomen\r\n\t|elif reportbody.stellarclass = \"SuperMassiveBlackHole\": ein supermassereiches schwarzes Loch\r\n\t|elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\": ein blau-weißer Überriese {Occasionally(4, \"der im Begriff ist sich zu einem Roten Überriesen zu wandeln\")}\r\n\t|elif reportbody.stellarclass = \"F_WhiteSuperGiant\"    : ein gelb-weißer Überriese {Occasionally(4, \"der im Begriff ist sich zu einem Roten Überriesen zu wandeln\")}\r\n\t|elif reportbody.stellarclass = \"M_RedSuperGiant\"      : ein roter Überriese {Occasionally(4, \"In seiner Heliumbrennphase\")}\r\n\t|elif reportbody.stellarclass = \"M_RedGiant\"           : ein roter Riese {Occasionally(4, \"der im Begriff ist sich zu einem Roten Überriesen zu wandeln\")}\r\n\t|elif reportbody.stellarclass = \"K_OrangeGiant\"        : ein gelb-roter Riese {Occasionally(4, \"der bis zu seinem Lebensende weiter expandiert\")}\r\n\t|elif reportbody.stellarclass = \"RoguePlanet\"          : ein Exo Planet\r\n\t|elif reportbody.stellarclass = \"Nebula\"               : ein Nebel\r\n\t|elif reportbody.stellarclass = \"StellarRemnantNebula\" : die Überreste eines Nebels\r\n}\r\n\r\n{set value to reportbody.age * 1000000} \r\n{OneOf(\"mit einem Alter von {F('Humanise ValueGer')} Jahren\",\"der {F('Humanise ValueGer')} Jahre alt ist\",\r\n       \"im Alter von {F('Humanise ValueGer')} Jahren\")}\r\n\r\n{set age to reportbody.age}\r\n{  if age <=       1 : {set age to \"jüngsten\"}\r\n|elif age <=    1000 : {set age to \"jüngeren\"}\r\n|elif age <=  900000 : {set age to []}\r\n|elif age <= 1400000 : {set age to \"älteren\"}\r\n|elif age >  1400000 : {set age to \"ältesten\"}\r\n|else                : Fehler in Variable age: {age}\r\n}\r\n\r\n{if age:,\t{OneOf(\"was Ihn zu einem der {age} Sterne {OneOf('der','unserer')} {OneOf('Milchstraße','Galaxis')} macht\",\r\n        \t\"und damit einer der {age} Sterne {OneOf('der','unserer')} {OneOf('Milchstraße','Galaxis','Galaxie')}\",\r\n        \t\"und kann somit einem der {age} Sterne {OneOf('der','unserer')} {OneOf('Milchstraße','Galaxis','Galaxie')} zugeordnert werden\",\r\n        \t\"und kann somit zu den {age} Sternen {OneOf('der','unserer')} {OneOf('Milchstraße','Galaxis','Galaxie')} gezählt werden\",\r\n        \t\"und zählt somit zu den {age} Sternen {OneOf('der','unserer')} {OneOf('Milchstraße','Galaxis','Galaxie')}\")}\r\n}.\r\n\r\n{if mainsequence = 1 :\r\n    { if reportbody.chromaticity = ''\t\t\t\t\t: Wir haben keine Infos über das abgestrahlte Licht\r\n    |else \t\t\t\t\t\t\t\t\t\t\t\t: Der Stern strahlt\r\n    \t{  if reportbody.chromaticity = 'blue'          : blaues\r\n    \t|elif reportbody.chromaticity = 'blau'\t\t    : blaues\r\n    \t|elif reportbody.chromaticity = 'blue-white'    : blau-weißes\r\n    \t|elif reportbody.chromaticity = 'blau-weiß'  \t: blau-weißes\r\n    \t|elif reportbody.chromaticity = 'white'         : weißes\r\n    \t|elif reportbody.chromaticity = 'weiß'\t\t    : weißes\r\n    \t|elif reportbody.chromaticity = 'yellow-white'  : gelb-weißes\r\n    \t|elif reportbody.chromaticity = 'gelb-weiß'     : gelb-weißes\r\n    \t|elif reportbody.chromaticity = 'yellow'        : gelbes\r\n    \t|elif reportbody.chromaticity = 'gelb'\t\t    : gelbes\r\n    \t|elif reportbody.chromaticity = 'yellow-orange' : gelb-oranges\r\n    \t|elif reportbody.chromaticity = 'gelb-orange'   : gelb-oranges\r\n    \t|elif reportbody.chromaticity = 'orange'        : oranges\r\n    \t|elif reportbody.chromaticity = 'orange-rot'\t: orange-rotes\r\n    \t|elif reportbody.chromaticity = 'orange-red'\t: orange-rotes\r\n    \t|else\t\t\t\t\t\t\t\t\t\t\t: {reportbody.chromaticity}\r\n    \t} Licht ab\r\n    }.\r\n\r\n{if notables_tell = 1:\r\n\r\n\t{set notables to []}\r\n\r\n\t{  if reportbody.massprobability <  0.01 : {set notables to cat(notables, [cat(\"Eine unglaublich niedrige Sonnenmasse von \", Humanise(reportbody.solarmass))])}\r\n\t|elif reportbody.massprobability <  0.1  : {set notables to cat(notables, [cat(\"Eine extrem niedrige Sonnenmasse von \", Humanise(reportbody.solarmass))])}\r\n\t|elif reportbody.massprobability <  1    : {set notables to cat(notables, [\"Eine ungewöhnlich niedrige Sonnenmasse\"])}\r\n\t|elif reportbody.massprobability < 10    : {set notables to cat(notables, [\"Eine unterdurchschnittlich niedrige Sonnenmasse\"])}\r\n\t|elif reportbody.massprobability > 99.99 : {set notables to cat(notables, [cat(\"Eine unglaublich hohe Sonnenmasse von \", Humanise(reportbody.solarmass))])}\r\n\t|elif reportbody.massprobability > 99.9  : {set notables to cat(notables, [cat(\"Eine extrem hohe Sonnenmasse von \", Humanise(reportbody.solarmass))])}\r\n\t|elif reportbody.massprobability > 99    : {set notables to cat(notables, [\"Eine ungewöhnlich hohe Sonnenmasse\"])}\r\n\t|elif reportbody.massprobability > 90    : {set notables to cat(notables, [\"Eine überdurchschnittlich hohe Sonnenmasse\"])}\r\n\t}\r\n\r\n\t{  if reportbody.radiusprobability < 0.01  : {set notables to cat(notables, [cat(\"Einen unglaublich kleinen Sonnenradius von \", Humanise(reportbody.solarradius))])}\r\n\t|elif reportbody.radiusprobability < 0.1   : {set notables to cat(notables, [cat(\"Einen extrem kleinen Sonnenradius von \", Humanise(reportbody.solarradius))])}\r\n\t|elif reportbody.radiusprobability <  1    : {set notables to cat(notables, [\"Einen ungewöhnlich kleinen Sonnenradius\"])}\r\n\t|elif reportbody.radiusprobability < 10    : {set notables to cat(notables, [\"Einen überdurchschnittlich kleinen Sonnenradius\"])}\r\n\t|elif reportbody.radiusprobability > 99.99 : {set notables to cat(notables, [cat(\"Einen extrem großen Sonnenradius von \", Humanise(reportbody.solarradius))])}\r\n\t|elif reportbody.radiusprobability > 99.9  : {set notables to cat(notables, [cat(\"Einen unglaublich großen Sonnenradius von \", Humanise(reportbody.solarradius))])}\r\n\t|elif reportbody.radiusprobability > 99    : {set notables to cat(notables, [\"Einen ungewöhnlich großen Sonnenradius\"])}\r\n\t|elif reportbody.radiusprobability > 90    : {set notables to cat(notables, [\"Einen überdurchschnittlich großen Sonnenradius\"])}\r\n\t}\r\n\t\r\n\t{  if reportbody.tempprobability <  0.01 : {set notables to cat(notables, [cat(\"Eine unglaublich geringe Oberflächentemperatur von \", Humanise(reportbody.temperature), \" Grad Kelvin\")])}\r\n\t|elif reportbody.tempprobability <  0.1  : {set notables to cat(notables, [cat(\"Eine extrem geringe Oberflächentemperatur von \", Humanise(reportbody.temperature), \" Grad Kelvin\")])}\r\n\t|elif reportbody.tempprobability <  1    : {set notables to cat(notables, [\"Eine ungewöhnlich niedrige Oberflächentemperatur\"])}\r\n\t|elif reportbody.tempprobability < 10    : {set notables to cat(notables, [\"Eine unterdurchschnittliche Oberflächentemperatur\"])}\r\n\t|elif reportbody.tempprobability > 99.99 : {set notables to cat(notables, [cat(\"Eine extrem hohe Oberflächentemperatur von \", Humanise(reportbody.temperature), \" Grad Kelvin\")])}\r\n\t|elif reportbody.tempprobability > 99.9  : {set notables to cat(notables, [cat(\"Eine unglaublich hohe Oberflächentemperatur von \", Humanise(reportbody.temperature), \" Grad Kelvin\")])}\r\n\t|elif reportbody.tempprobability > 99    : {set notables to cat(notables, [\"Eine ungewöhnlich hohe Oberflächentemperatur\"])}\r\n\t|elif reportbody.tempprobability > 90    : {set notables to cat(notables, [\"Eine überdurchschnittliche Oberflächentemperatur\"])}\r\n\t}\r\n|else:\r\n}\r\n\r\n{if len(notables) = 0 : {OneOf(\"\", \"Es handelt sich um ein typisches Exemplar seiner Sternenklasse.\", \"Es ist nichts bemerkenswertes an diesem Stern.\", \r\n\t\t\t\t\t\t\"Es ist ein durchschnittliches Beispiel für einen solchen Stern.\")}\r\n|else:\r\n    {OneOf('Verglichen mit anderen Sternen seiner Klasse', 'Im Vergleich zu anderen {reportbody.stellarclass}-Klasse Sternen', \r\n    'Verglichen mit anderen {reportbody.stellarclass}-Klasse Sternen')}, ist dieser Stern\r\n\t\t{  if len(notables) = 1 : bemerkenswert für {notables[0]}.\r\n        |elif len(notables) = 2 : {OneOf('intersessant', 'ungewöhnlich')} für {notables[0]} und {notables[1]}.\r\n        |elif len(notables) = 3 : {OneOf('besonders', 'bemerkenswert')} für {notables[0]}, {notables[1]} und {notables[2]}.\r\n        }\r\n    }\r\n}\r\n}",
      "name": "Star report",
      "description": "OK ! Function to report on the details of the contextual body",
      "default": false,
      "defaultValue": "{_ Preferences _}\r\n{set reportAge to 1}              {_ Set to 1 to report the star's age. _}\r\n{set reportRareStarClasses to 1}  {_ Set to 1 to report when rare star classes are found _}\r\n{set reportMass to 1}             {_ Set to 1 to report stars with abnormal mass _}\r\n{set reportRadius to 1}           {_ Set to 1 to report stars with abnormal radii _}\r\n{set reportRotation to 1}         {_ Set to 1 to report stars with abnormal rotational periods _}\r\n{set reportTemps to 1}            {_ Set to 1 to report stars with abnormal surface temperatures _}\r\n{set reportDensity to 1}          {_ Set to 1 to report notable densities (in kilograms per cubic meter) _}\r\n{set reportAbsMagnitude to 1}     {_ Set to 1 to report stars with abnormal absolute magnitude (lower is brighter) _}\r\n{set reportRingedStars to 1}      {_ Set to 1 to report when ringed stars are found _}\r\n{set reportChromaticity to 1}     {_ Set to 1 to report the star's colour. _}\r\n{set reportClass to 1}            {_ Set to 1 to report the stellar class. _}\r\n{set reportSubClass to 0}         {_ Set to 1 to report the stellar sub class (if reportClass is also 1) _}\r\n{set reportScanValue to 0}        {_ Set to 1 to report the scan value. _}\r\n{set reportHabZone to 0}          {_ Set to 1 to report habitable zone details for the primary star. _}\r\n{set mainSequenceFrequency to 4}  {_ Set to determine the frequency (1 chance in n) for describing applicable stars as \"main sequence\" _}\r\n{set reportRapidRotation to 1}    {_ Reports very fast rotating bodies _}\r\n\r\n{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}\r\n{if !reportbody: {set reportbody to BodyDetails(state.eddi_context_star_star)}}\r\n{if !reportbody && event: {set reportbody to event.star}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n\r\n    Which star are you {OneOf(\"asking about\", \"referencing\")}?\r\n\r\n|else:\r\n\r\n    {_ Set up a list of notable star characteristics _}\r\n    {set notables to []}\r\n\r\n    {_ Set up various groups of stars _}\r\n    {set mainsequence to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n    {set fastburning to [\"WC\", \"WN\", \"WO\", \"WNC\", \"W\"]}\r\n    {set browndwarves to [\"L\", \"T\", \"Y\"]}\r\n\r\n    {for starclass in mainsequence:\r\n        {if reportbody.stellarclass = starclass:\r\n            {set mainsequence to Occasionally(mainSequenceFrequency, \"main sequence\")}\r\n        }\r\n    }    \r\n    {for starclass in browndwarves:\r\n        {if reportbody.stellarclass = starclass:\r\n            {set browndwarf to 1}\r\n        }\r\n    }    \r\n    {for starclass in fastburning:\r\n        {if reportbody.stellarclass = starclass: \r\n            {set fastburning to 1}\r\n        }\r\n    }\r\n\r\n    {_ Is this a rare class of star? _}\r\n    {if reportRareStarClasses:\r\n        {if reportbody.starClass.percentage < 0.01:\r\n            {set rarity to \"Incredibly rare\"}\r\n        |elif reportbody.starClass.percentage < 0.1:\r\n            {set rarity to \"Very rare\"}\r\n        |elif reportbody.starClass.percentage < 1.0:\r\n            {set rarity to \"Rare\"}\r\n        |elif reportbody.starClass.percentage < 5:\r\n            {set rarity to \"Uncommon\"}\r\n        }\r\n    }\r\n\r\n    {_ Is the star notable in some other way? _}\r\n\r\n    {if reportAge:\r\n        {set ageInYears to reportbody.age * 1000000}\r\n        {if ageInYears <= 1000000:\r\n            {set ps to \", making it one of the youngest stars in the galaxy\"}\r\n        |elif ageInYears >= 13000000000:\r\n            {set ps to \", making it one of the oldest stars in the galaxy\"}\r\n        }\r\n        {if reportbody.ageprobability:\r\n            {if reportbody.ageprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"an incredibly young age of \", Humanise(ageInYears), \" years\", ps)])}\r\n            |elif reportbody.ageprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"an extremely young age of \", Humanise(ageInYears), \" years\", ps)])}\r\n            |elif reportbody.ageprobability < 5:\r\n                {set notables to cat(notables, [cat(\"an unusually young age of \", Humanise(ageInYears), \" years\", ps)])}\r\n            |elif reportbody.ageprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"an incredibly old age of \", Humanise(ageInYears), \" years\", ps)])}\r\n            |elif reportbody.ageprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"an extremely old age of \", Humanise(ageInYears), \" years\", ps)])}\r\n            |elif reportbody.ageprobability > 95:\r\n                {set notables to cat(notables, [cat(\"an unusually old age of \", Humanise(ageInYears), \" years\", ps)])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportMass && reportbody.massprobability:\r\n        {if reportbody.massprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low solar mass of \", Humanise(reportbody.solarmass), \" times Sol's\")])}\r\n        |elif reportbody.massprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low solar mass of \", Humanise(reportbody.solarmass), \" times Sol's\")])}\r\n        |elif reportbody.massprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an unusually low solar mass of \", Humanise(reportbody.solarmass), \" times Sol's\")])}\r\n        |elif reportbody.massprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an incredibly high solar mass of \", Humanise(reportbody.solarmass), \" times Sol's\")])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high solar mass of \", Humanise(reportbody.solarmass), \" times Sol's\")])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an unusually high solar mass of \", Humanise(reportbody.solarmass), \" times Sol's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRadius && reportbody.radiusprobability:\r\n        {if reportbody.radiusprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low radius at \", Humanise(reportbody.solarradius), \" times Sol's\")])}\r\n        |elif reportbody.radiusprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low solar radius at \", Humanise(reportbody.solarradius), \" times Sol's\")])}\r\n        |elif reportbody.radiusprobability < 5:\r\n            {set notables to cat(notables, [cat(\"an unusually low solar radius at \", Humanise(reportbody.solarradius), \" times Sol's\")])}\r\n        |elif reportbody.radiusprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely high solar radius at \", Humanise(reportbody.solarradius), \" times Sol's\")])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high solar radius at \", Humanise(reportbody.solarradius), \" times Sol's\")])}\r\n        |elif reportbody.radiusprobability > 95:\r\n            {set notables to cat(notables, [cat(\"an unusually high solar radius at \", Humanise(reportbody.solarradius), \" times Sol's\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRotation && reportbody.rotationalperiodprobability:\r\n        {if reportbody.rotationalperiodprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely \", OneOf(\"rapid\", \"high\"), \" rate of rotation at \", Humanise(reportbody.rotationalperiod), \" days \", Occasionally(2, \"per revolution\"))])}\r\n        |elif reportbody.rotationalperiodprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly \", OneOf(\"rapid\", \"high\"), \" rate of rotation at \", Humanise(reportbody.rotationalperiod), \" days \", Occasionally(2, \"per revolution\"))])}\r\n        |elif reportbody.rotationalperiodprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an unusually \", OneOf(\"rapid\", \"high\"), \" rate of rotation at \", Humanise(reportbody.rotationalperiod), \" days \", Occasionally(2, \"per revolution\"))])}\r\n        |elif reportbody.rotationalperiodprobability > 95:\r\n            {set notables to cat(notables, [cat(\"a high rate of rotation at \", Humanise(reportbody.rotationalperiod), \" days \", Occasionally(2, \" per revolution\"))])}\r\n        }\r\n    }\r\n\r\n    {if reportTemps && reportbody.tempprobability:\r\n        {if reportbody.tempprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an unusually low surface temperature\")])}\r\n        |elif reportbody.tempprobability < 5:\r\n            {set notables to cat(notables, [cat(\"lower than average surface temperature\")])}\r\n        |elif reportbody.tempprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" Kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an unusually high surface temperature\")])}\r\n        |elif reportbody.tempprobability > 95:\r\n            {set notables to cat(notables, [cat(\"higher than average surface temperature\")])}\r\n        }\r\n    }\r\n\r\n    {if reportDensity && reportbody.densityprobability:\r\n        {if reportbody.densityprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low average density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low average density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an unusually low average density\")])}\r\n        |elif reportbody.densityprobability < 5:\r\n            {set notables to cat(notables, [cat(\"lower than average density\")])}\r\n        |elif reportbody.densityprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely high average density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high average density of \", Humanise(reportbody.density), \" kilograms per cubic meter\")])}\r\n        |elif reportbody.densityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"an unusually high average density\")])}\r\n        |elif reportbody.densityprobability > 95:\r\n            {set notables to cat(notables, [cat(\"higher than average density\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRapidRotation && reportbody.rotationalperiodprobability:\r\n        {if reportbody.rotationalperiodprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"an incredibly short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif reportbody.rotationalperiodprobability < 1:\r\n            {set notables to cat(notables, [cat(\"an extremely short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        |elif reportbody.rotationalperiodprobability < 3:\r\n            {set notables to cat(notables, [cat(\"an unusually short rotational period of \", Humanise(reportbody.rotationalperiod), \" days\")])}\r\n        }\r\n    }\r\n\r\n    {if reportAbsMagnitude && reportbody.absolutemagnitudeprobability:\r\n        {if reportbody.absolutemagnitudeprobability < 0.01:\r\n            {set notables to cat(notables, [cat(OneOf(\"incredible brilliance\", \"incredible luminosity\"))])}\r\n        |elif reportbody.absolutemagnitudeprobability < 0.1:\r\n            {set notables to cat(notables, [cat(OneOf(\"extreme brilliance\", \"extremely high luminousity\"))])}\r\n        |elif reportbody.absolutemagnitudeprobability < 1:\r\n            {set notables to cat(notables, [cat(OneOf(\"unusually high brilliance\", \"unusually high luminousity\"))])}\r\n        |elif reportbody.absolutemagnitudeprobability < 5:\r\n            {set notables to cat(notables, [cat(OneOf(\"high brilliance\", \"high luminousity\"))])}\r\n        }\r\n    }\r\n\r\n    {_ Is the star ringed? _}\r\n    {if reportRingedStars:\r\n        {if reportbody.rings:\r\n            {set ringcompositions to []}\r\n            {set cur to 0}\r\n            {for ring in reportbody.rings:\r\n                {if find(ring.name, \"Ring\") > -1:\r\n                    {if find(ringcompositions, ring.composition) = -1:\r\n                        {set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n                    }\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n            {set cur to 0}\r\n            {set length to len(ringcompositions) - 1}\r\n            {while cur < len(ringcompositions):\r\n                {set ringsdescription to cat(ringsdescription, ringcompositions[cur])}\n                {set cur to cur + 1}\n                {if cur = length: \r\n                    {set ringsdescription to cat(ringsdescription, \" and \")}\n                |elif cur < length:\r\n                    {set ringsdecription to cat(ringsdescription, \", \")}\n                }\n            }\r\n            {if ringsdescription:\r\n                {if len(ringcompositions) = 1:\r\n                    {if StartsWithVowel(reportbody.reserves): \r\n                        {set a to \"an \"} \r\n                    |else: \r\n                        {set a to \"a \"}\r\n                    }\r\n                    {set rings to \"ring\"}\r\n                |else:\r\n                    {set rings to \"rings\"} \r\n                }\r\n                {if reportbody.reserveLevel.invariantName != \"None\": \r\n                    {set reserves to reportbody.reserves}\r\n                }\r\n                {set notables to cat(notables, [cat(a, \" \", reserves, \" \", ringsdescription, \" \", rings)])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Report notable stars _}\r\n\r\n    {if len(notables) > 0:\r\n\r\n        {_ Setup descriptions for our star _}\r\n\r\n        {if find([\"L\", \"T\", \"Y\"], reportbody.stellarclass) > -1:\r\n            {set shortdescription to \"brown dwarf\"}\r\n        |elif reportbody.stellarclass = \"TTS\":\r\n            {set shortdescription to \"T tauri star\"}\r\n            {set desc2 to Occasionally(2, \"in the process of gravitational contraction\")}\r\n        |elif reportbody.stellarclass = \"AEBE\":\r\n            {set age to \"Very young\"}\r\n            {set shortdescription to \"proto-star\"}\r\n            {set desc2 to Occasionally(2, \"yet to enter main sequence {Occasionally(2, \\\"but on the way to becoming an A or B class star\\\")}\")}\r\n        |elif reportbody.stellarclass = \"WC\":\r\n            {set desc1 to \"carbon rich\"}\r\n            {set shortdescription to \"Wolf-Rayet star\"}\r\n            {set desc2 to Occasionally(2, \", shedding considerable mass and exposing ionised carbon at its core, \")}\r\n        |elif reportbody.stellarclass = \"WN\":\r\n            {set desc1 to \"helium and nitrogen rich\"}\r\n            {set shortdescription to \"Wolf-Rayet star\"}\r\n            {set desc2 to Occasionally(2, \", shedding considerable mass and exposing ionised helium and nitrogen at its core, \")}\r\n        |elif reportbody.stellarclass = \"WO\":\r\n            {set desc1 to \"oxygen rich\"}\r\n            {set shortdescription to \"Wolf-Rayet star\"}\r\n            {set desc2 to Occasionally(2, \", shedding considerable mass and exposing ionised oxygen at its core, \")}\r\n        |elif reportbody.stellarclass = \"WNC\":\r\n            {set shortdescription to \"Wolf-Rayet star\"}\r\n            {set desc2 to Occasionally(2, \", shedding considerable mass and exposing ionised nitrogen, carbon, oxygen, and helium at its core, \")}\r\n        |elif reportbody.stellarclass = \"W\":\r\n            {set shortdescription to \"Wolf-Rayet star\"} \r\n            {set desc2 to Occasionally(2, \", shedding considerable mass and exposing heavier elements at its core, \")}\r\n        |elif reportbody.stellarclass = \"CS\":\r\n            {set shortdescription to \"carbon star\"}\r\n        |elif find([\"C\", \"CN\", \"CH\", \"CHd\"], reportbody.stellarclass) > -1:\r\n            {set age to Occasionally(2, \"late-sequence\")} \r\n            {set shortdescription to \"carbon-rich star\"}\r\n        |elif reportbody.stellarclass = \"CJ\":\r\n            {set age to Occasionally(2, \"late-sequence\")} \r\n            {set shortdescription to \"carbon star\"}\r\n            {set desc2 to Occasionally(2, \"with high levels of carbon 13 in its atmosphere\")}\r\n        |elif find([\"MS\", \"S\"], reportbody.stellarclass) > -1:\r\n            {set age to Occasionally(2, \"late-sequence\")} \r\n            {set shortdescription to \"star\"}\r\n            {set desc2 to Occasionally(4, \"that was once an M class star and is on the way to becoming a carbon star\")}\r\n        |elif reportbody.stellarclass = \"DA\":\r\n            {set shortdescription to \"white dwarf\"}\r\n            {set desc2 to Occasionally(4, \"with a hydrogen-rich atmosphere\")}\r\n        |elif reportbody.stellarclass = \"DAB\":\r\n            {set shortdescription to \"white dwarf\"}\r\n            {set desc2 to Occasionally(4, \"with an atmosphere rich in hydrogen and helium\")}\r\n        |elif slice(reportbody.stellarclass, 0, 1) = \"D\":\r\n            {set shortdescription to \"white dwarf\"}\r\n        |elif slice(reportbody.stellarclass, 0, 1) = \"N\":\r\n            {set shortdescription to \"neutron star\"}\r\n            {set desc2 to Occasionally(4, \"that has a dangerously high-density core\")}\r\n        |elif reportbody.stellarclass = \"H\":\r\n            {set shortdescription to \"black hole\"}\r\n        |elif reportbody.stellarclass = \"X\":\r\n            {set shortdescription to \"Exotic stellar entity\"}\r\n        |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n            {set shortdescription to \"Supermassive black hole\"}\r\n        |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n            {set class to \"{Spacialise(\\\"A\\\")}\"}\r\n            {set shortdescription to \"blue-white super-giant\"}\r\n            {set desc2 to Occasionally(4, \"that is expanding towards being a red super-giant\")}\r\n        |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n            {set class to \"{Spacialise(\\\"F\\\")}\"}            \r\n            {set shortdescription to \"yellow-white super-giant\"}\r\n            {set desc2 to Occasionally(4, \"that is expanding towards being a red super-giant\")}\r\n        |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n            {set class to \"{Spacialise(\\\"M\\\")}\"}  \r\n            {set shortdescription to \"red super-giant\"}\r\n            {set desc2 to Occasionally(4, \"in its helium burning phase\")}\r\n        |elif reportbody.stellarclass = \"M_RedGiant\":\r\n            {set class to \"{Spacialise(\\\"M\\\")}\"}  \r\n            {set shortdescription to \"red giant\"}\r\n            {set desc2 to Occasionally(4, \"that is expanding towards being a red super-giant\")}\r\n        |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n            {set class to \"{Spacialise(\\\"M\\\")}\"} \r\n            {set shortdescription to \"orange giant\"}\r\n            {set desc2 to Occasionally(4, \"that is expanding as it heads towards the end of its life\")}\r\n        |elif reportbody.stellarclass = \"RoguePlanet\":\r\n            {set class to \"\"}  \r\n            {set shortdescription to \"Rogue planet\"}\r\n        |elif reportbody.stellarclass = \"Nebula\":\r\n            {set class to \"\"}  \r\n            {set shortdescription to \"Nebula\"}\r\n        |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n            {set class to \"\"}  \r\n            {set shortdescription to \"Nebula remnant\"}\r\n        }\r\n\r\n        {if !shortdescription:\r\n            {set shortdescription to \"star\"}\r\n        }\r\n        {set description to shortdescription}\r\n        {if desc1: \r\n            {set description to cat(desc1, \" \", description)}\r\n        }\r\n        {if desc2: \r\n            {set description to cat(description, \" \", desc2)}\r\n        }\r\n\r\n        {_ Set additional common elements _}\r\n\r\n        {if !class:\r\n            {set class to Spacialise(reportbody.stellarclass)}\r\n        }\r\n\r\n        {_ Begin speaking _}\r\n\r\n        {if len(notables) > 0:\r\n            {if reportbody.shortname != reportbody.systemname:\r\n                {if fastburning = 1: {Occasionally(2, \"fast burning\")}}\r\n                {mainsequence}\r\n                {shortdescription}\r\n                {P(reportbody.shortname, \"body\")} is\r\n            |else:\r\n                This\r\n                {if fastburning = 1: {Occasionally(2, \"fast burning\")}}\r\n                {mainsequence}\r\n                {shortdescription} is\r\n            }\r\n\r\n            {if rarity:\r\n                {rarity}{if reportbody.chromaticity: \", \"} and\r\n            }\r\n\r\n            {if len(notables) = 1:\r\n                notable,\r\n            |elif len(notables) = 2:\r\n                {OneOf('interesting,', 'notable', 'remarkable')}\r\n            |elif len(notables) = 3:\r\n                {OneOf('exceptional,', 'remarkable,')}\r\n            |elif len(notables) = 4:\r\n                {OneOf('extraordinary,')}\r\n            |elif len(notables) >= 5:\r\n                {OneOf('one of a kind,', 'unique,')}\r\n            }\r\n\r\n            {if reportClass = 1 && len(class) > 0: \r\n                {set class to cat(\"class\", \" \", class)}\r\n                {if reportSubClass && reportbody.stellarsubclass:\r\n                    {set class to cat(class, \" \", reportbody.stellarsubclass)}\r\n                }\r\n            }\r\n            {Occasionally(3, \"relative to similar {class} {shortdescription}s,\")}\r\n\r\n            {if len(notables) = 1:\r\n                with {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                with {notables[0]} and {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                with {notables[0]}, {notables[1]} and {notables[2]}.\r\n            |elif len(notables) = 4:\r\n                with {notables[0]}, {notables[1]}, {notables[2]}, and {notables[3]}.\r\n            |elif len(notables) >= 5:\r\n                with {notables[0]}, {notables[1]}, {notables[2]}, {notables[3]}, and {notables[4]}.\r\n            }\r\n\r\n            {if reportbody.chromaticity && reportChromaticity = 1:\r\n                As you can see, it emits \r\n                {if StartsWithVowel(reportbody.chromaticity): an |else: a } \r\n                {reportbody.chromaticity} light. \r\n            }\r\n        }\r\n    }   \r\n\r\n    {if reportScanValue: {F(\"Report last scan value\")} }\r\n\r\n    {if reportHabZone && event.mainstar: {F(\"Star habitable zone\")} }\r\n}"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Star scanned\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n{SetState('eddi_context_star_scanned',1)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n{SetState(\"systemlowvalue\", state.systemlowvalue + event.estimatedvalue)}\r\n\r\n{if event.mainstar:\r\n   {if state.scanned_yet != event.name:\r\n\r\n      {Pause(500)}\r\n\r\n      Scan des {event.stellarclass}-Klasse Sterns abgeschlossen.\r\n\r\n      {F(\"Star report\")}\r\n\r\n      {_ F(\"Habitable zone\") _}\r\n   }\r\n}\r\n\r\n\r\n{SetState('scanned_yet', reportbody.name)}\r\n\r\n{_\r\n- absolutemagnitude The absolute (bolometric) magnitude of the star that has been scanned\r\n- absolutemagnitudeprobability The cumulative probability describing the star's age, \r\n\trelative to other stars of the same stellar class\r\n- age The age of the star that has been scanned, in millions of years\r\n- ageprobability The probablility of finding a star of this class with this age\r\n- alreadydiscovered Whether this star's scan data has already been registered with Universal Cartographics\r\n- bodyname The name of the star that has been scanned\r\n- chromaticity The apparent colour of the star that has been scanned\r\n- density The average density of the star, in kg per cubic meter\r\n- densityprobability The cumulative probability describing the star's density, relative to other stars of the same stellarclass\r\n- distance The distance in LS from the main star\r\n- eccentricity The orbital eccentricity of the star\r\n- eccentricityprobability The cumulative probability describing the star's orbital eccentricity, \r\n\trelative to other stars of the same stellar class\r\n- estimatedhabzoneinner The estimated inner radius of the habitable zone of the scanned star, \r\n\tin light seconds, not considering other stars in the system\r\n- estimatedhabzoneouter The estimated outer radius of the habitable zone of the scanned star, \r\n\tin light seconds, not considering other stars in the system\r\n- estimatedvalue The estimated value of the current scan\r\n- inclination The orbital inclination of the star, in degrees\r\n- inclinationprobability The cumulative probability describing the star's orbital inclination, \r\n\trelative to other stars of the same stellar class\r\n- luminosity The luminosity of the star that has been scanned\r\n- luminosityclass The luminosity class of the star that has been scanned\r\n- mainstar True if the star is the main / primary star in the star system\r\n- massprobability The probablility of finding a star of this class with this mass\r\n- orbitalperiod The number of seconds taken for a full orbit of the main star\r\n- orbitalperiodprobability The cumulative probability describing the star's orbital period about the main star, \r\n\trelative to other stars of the same stellar class\r\n- periapsis The argument of periapsis of the star, in degrees\r\n- periapsisprobability The cumulative probability describing the stars's argument of periapsis, \r\n\trelative to other stars of the same stellar class\r\n- radius The radius of the star that has been scanned, in metres\r\n- radiusprobability The probablility of finding a star of this class with this radius\r\n- rings The star's rings\r\n- rotationalperiod The number of seconds taken for a full rotation\r\n- rotationalperiodprobability The cumulative probability describing the stars's rotational period, \r\n\trelative to other stars of the same stellar class\r\n- scantype The type of scan event (AutoScan, Basic, Detailed, NavBeacon, NavBeaconDetail)\r\n- scoopable True if the star is scoopable (K, G, B, F, O, A, M)\r\n- semimajoraxis The semi major axis of the star's orbit, in light seconds\r\n- semimajoraxisprobability The cumulative probability describing the semi-major axis of the orbit of the star, \r\n\trelative to other stars of the same stellar class\r\n- solarmass The mass of the star that has been scanned, relative to Sol's mass\r\n- solarradius The radius of the star that has been scanned, compared to Sol\r\n- stellarclass The stellar class of the star that has been scanned (O, G, etc)\r\n- stellarsubclass The stellar sub class of the star that has been scanned (0 - 9, with 0 being hotter and 9 being cooler)\r\n- temperature The temperature of the star that has been scanned\r\n- tempprobability The probablility of finding a star of this class with this temperature\r\n- tilt Axial tilt for the star, in degrees (only available if DSS equipped)\r\n- tiltprobability The cumulative probability describing the star's orbital tilt, relative to other stars of the same stellar class\r\n_}\r\n\r\n\r\n",
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {F(\"Star report\")}\r\n}"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Station no fire zone entered\")}\r\n\r\n{_ VoiceAttack wird fragen die Waffen offline zu nehmen}\r\n\r\n{Pause(5000)}\r\n{if event.weaponsdeployed: Wir haben die Waffenfreie Zone betreten. Sie sollten jetzt die Waffen deaktivieren, {F(\"Honorific\")}.}\r\n\r\n{_ if !state.docking_granted: Vergessen Sie nicht die Andockerlaubnis einzuholen!}\r\n\r\n{_ - weaponsdeployed True if the ship's weapons are deployed when entering the zone _}\r\n\r\n",
      "name": "Station no fire zone entered",
      "description": "Triggered when your ship enters a station's no fire zone",
      "default": false,
      "defaultValue": null
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Station no fire zone exited\")}\r\n\r\n{SetState('docking_granted', 0)}\r\n\r\n{_ Waffenfreie Zone verlassen.}\r\n\r\nWir haben die waffenfreie Zone verlassen.",
      "name": "Station no fire zone exited",
      "description": "Triggered when your ship exits a station's no fire zone",
      "default": false,
      "defaultValue": null
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Station report\")}\r\n\r\n{set station to OneOf(\"Diese Station\", \"{station.name} {station.model}\") }\r\n{set witheconomy to OneOf(\"Mit einer Wirtschaft von \", \"the main work here is in\",\"der größte Bevölkerungsanteil ist dabei\" ) }\r\n{set controlledby to OneOf(\"kontolliert von\", \"regiert von\",\"verbunden mit\") }\r\n\r\n{(station.name)}, im {(system.name)} system {controlledby} {(station.faction)} {Occasionally (2,\"faction\")}.\r\n\r\n{  if system.state = \"Boom\"       : {(station.faction)} erfährt gerade einen Boom.\r\n|elif system.state = \"Bürgerkrieg\": {(station.faction)} ist gerade im Bürgerkrieg.\r\n|elif system.state = \"Hungersnot\" : {(station.faction)}'s Befölkerung hungert.\r\n|elif system.state = \"Lockdown\"   : {(station.faction)} wurde ein Lockdown verhängt.\r\n|elif system.state = \"Ausbruch\"   : {(station.faction)} versuchen den ausbruch einer Seuche einzudämmen.\r\n|elif system.state = \"Krieg\"      : {(station.faction)} ist gerade im Krieg.\r\n}\r\n\r\n{station} liegt {Occasionally (2,\" {(station.distancefromstar)} Lichtsekunden \r\n{OneOf(\"vom Stern\", \"von der Navigationsboje\")}, entfernt und\")} und ist verbunden {(station.allegiance)}, \r\n\r\n{witheconomy}\r\n\r\n{for economy in station.economies:\r\n  {economy}\r\n}\r\n\r\n{Occasionally (3,\"Hier gilt Sicherheitsstufe {system.security}.\")}",
      "name": "Station report",
      "description": "Function to report on the details of the current station",
      "default": false,
      "defaultValue": "Nothing of interest here."
    },
    "Statistics": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": null,
      "name": "Statistics",
      "description": "Statistics provided at the beginning of a game session",
      "default": true,
      "defaultValue": null
    },
    "Stored modules": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI EVENT: Stored modules\")}\r\n\r\n{OneOf(\"Ausrüstungs,apdeets\", \"Ausrüstungsdaten\", \"Ausrüstungsinformationen\", \"Kosten für Ausrüstung\" ,\"Ausrüstungsangebot\")}\r\n{OneOf(\"erhalten\", \"empfangen\")}.\r\n  \r\n{F(\"Swapout check\")}\r\n",
      "name": "Stored modules",
      "description": "Triggered when the Outfitting screen is opened, providing a list of all stored modules.",
      "default": false,
      "defaultValue": null
    },
    "Stored ships": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI EVENT: Stored ships\")}\r\n\r\n",
      "name": "Stored ships",
      "description": "Triggered when the Shipyard screen is opened, providing a list of all stored ships.",
      "default": false,
      "defaultValue": null
    },
    "Surface signals detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Surface signals detected\")}\r\n\r\n{_ Context _}\r\n{_ Used to remove initial pause in mapping script if signals are found. _}\r\n{SetState('eddi_context_surfacesignals', true)}\r\n\r\n{_ event.surfacesignals} \r\n\r\n{set surfacesignals to []}\r\n{for signal in event.surfacesignals: \r\n    {set surfacesignals_desc to: \r\n        {if signal.source = \"Other Surface Signal\" : \r\n        \t{if signal.amount = 1:\r\n        \t\t{set signal_amount to \"ein\"}\r\n        \t\t{set signal_source to \"unbekanntes Oberflächensignal\"}\r\n        \t|else: \r\n        \t\t{set signal_amount to signal.amount}\r\n        \t\t{set signal_source to \"unbekannte Oberflächensignale\"}\r\n        \t}\r\n        |elif signal.source = \"Geologisches Oberflächensignal\":\r\n        \t{if signal.amount = 1:\r\n        \t\t{set signal_amount to \"ein\"}\r\n        \t\t{set signal_source to \"Geologisches Oberflächensignal\"}\r\n        \t|else: \r\n        \t\t{set signal_amount to signal.amount}\r\n        \t\t{set signal_source to \"Geologische Oberflächensignale\"}\r\n        \t}\r\n        |elif signal.source = \"Menschliches Oberflächensignal\":\r\n        \t{if signal.amount = 1:\r\n        \t\t{set signal_amount to \"ein\"}\r\n        \t\t{set signal_source to \"Menschliches Oberflächensignal\"}\r\n        \t|else: \r\n        \t\t{set signal_amount to signal.amount}\r\n        \t\t{set signal_source to \"Menschlische Oberflächensignale\"}\r\n        \t}\r\n        |elif signal.source = \"Biologisches Oberflächensignal\":\r\n        \t{if signal.amount = 1:\r\n        \t\t{set signal_amount to \"ein\"}\r\n        \t\t{set signal_source to \"Biologisches Oberflächensignal\"}\r\n        \t|else: \r\n        \t\t{set signal_amount to signal.amount}\r\n        \t\t{set signal_source to \"Biologische Oberflächensignale\"}\r\n        \t}\r\n        |elif signal.source = \"Thargoiden Oberflächensignal\":\r\n        \t{if signal.amount = 1:\r\n        \t\t{set signal_amount to \"ein\"}\r\n        \t\t{set signal_source to \"Thargoiden Oberflächensignal\"}\r\n        \t|else: \r\n        \t\t{set signal_amount to signal.amount}\r\n        \t\t{set signal_source to \"Thargoiden Oberflächensignale\"}\r\n        \t}\r\n        |elif signal.source = \"Guardian Oberflächensignal\":\r\n        \t{if signal.amount = 1:\r\n        \t\t{set signal_amount to \"ein\"}\r\n        \t\t{set signal_source to \"Guardian Oberflächensignal\"}\r\n        \t|else: \r\n        \t\t{set signal_amount to signal.amount}\r\n        \t\t{set signal_source to \"Guardian Oberflächensignale\"}\r\n        \t}\r\n        }\r\n        {signal_amount} {signal_source}\r\n    }\r\n    {set surfacesignals to cat(surfacesignals, [surfacesignals_desc])}\r\n}\r\n{List(surfacesignals)} erkannt.\r\n\r\n{_ dump [AnzahlSignale,SignalTyp] - zum Auslesen der Variablen}\r\n\r\n{_ bodyname \t\tThe body where surface signals were detected}\r\n{_ surfacesignals \tA list of SignalAmount objects (with properties 'source' and 'amount')}\r\n{_ signal.sources\tBiological, Geological, Guardian, Human, Thargoid, other _}\r\n",
      "name": "Surface signals detected",
      "description": "Triggered when surface signal sources are detected",
      "default": false,
      "defaultValue": "{set surfacesignals to []}\r\n{for signal in event.surfacesignals: \r\n    {set surfacesignals_desc to: \r\n        {signal.amount} {signal.source}{if signal.amount > 1:s}\r\n    }\r\n    {set surfacesignals to cat(surfacesignals, [surfacesignals_desc])}\r\n}\r\n\r\n{List(surfacesignals)} detected."
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: Swapout check\")}\r\n\r\n{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if len(shipmodule.modifications) = 0:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Sie können {set value to saving)} {F(\"Humanise ValueGer\")} credditts einsparen, \r\n                    wenn Sie hier {shipmodule.name} eintauschen.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}",
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here",
      "default": false,
      "defaultValue": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDName = module.EDName:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    You could save {Humanise(saving)} credits by swapping out your {shipmodule.name} here.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Synthesised\")}\r\n\r\nSynthese abgeschlossen.\r\n\r\n{_\r\n- synthesis The thing that has been synthesised\r\n- materials Types and amounts of materials used in the synthesis\r\n_}",
      "name": "Synthesised",
      "description": "Triggered when you synthesise something from materials",
      "default": false,
      "defaultValue": "Synthesis complete."
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: System distance report\")}\r\n\r\n{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    System wurde nicht spezifiziert. Anfrage kann nicht beantwortet werden.\r\n|else:\r\n    Entfernung zu {if (reportsystem.name) = \"Shinrarta Dezhra\": schinrata |else: {reportsystem.name}} beträgt\r\n    {set value to (Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} \r\n    {F(\"Humanise ValueGer\")} Licht Jahre.\r\n}\r\n\r\n\r\n",
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system",
      "default": false,
      "defaultValue": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportsystem.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    Distance to {P(reportsystem.name, \"starsystem\")} is {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} light years.\r\n}"
    },
    "System faction changed": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: System faction changed\")}\r\n\r\n\r\n\r\n{_\r\n- match\t\t\tThe name of the pattern that this event matched\r\n- system\t\tThe name of the system\r\n- oldfaction\tThe name of the old controlling faction of the system\r\n- newfaction\tThe name of the new controlling faction of the system\r\n_}",
      "name": "System faction changed",
      "description": "Triggered when there is a change in the controlling faction of a watched system",
      "default": false,
      "defaultValue": null
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: System report\")}\r\n\r\n{_ SetState('eddi_context_system_system', 'CD-72 190')}\r\n{_ state.eddi_context_system_system}\r\n\r\n{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n{_ reportsystem}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\": Welches System ist gemeint?\r\n|else:\r\n\r\n{OneOf(\"Dieses System\", \"{(reportsystem.name)}\")} ist ein{if reportsystem.government = \"Diktatur\":e\r\n\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Werkstatt\":e}\r\n\r\n{  if reportsystem.allegiance = \"Federation\"\t: \tföderales\r\n|elif reportsystem.allegiance = \"Föderation\"\t: \tföderale{  if reportsystem.government = \"Gottesstaat\"\t:r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Staatenbund\"\t:r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Werkstatt\"\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|else \t\t\t\t\t\t\t\t\t\t\t:s}\r\n|elif reportsystem.allegiance = \"Empire\"\t\t: \timperiales\r\n|elif reportsystem.allegiance = \"Imperium\"\t\t: \timperiale{ if reportsystem.government = \"Gottesstaat\"\t:r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Staatenbund\"\t:r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Diktatur\"\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Werkstatt\"\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|else \t\t\t\t\t\t\t\t\t\t\t:s}\r\n|elif reportsystem.allegiance = \"Alliance\"\t\t: \talliiertes\r\n|elif reportsystem.allegiance = \"Allianz\"\t\t: \talliierte{ if reportsystem.government = \"Gottesstaat\"\t:r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Staatenbund\"\t:r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Werkstatt\"\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|else \t\t\t\t\t\t\t\t\t\t\t:s}\r\n|elif reportsystem.allegiance = \"Independent\"\t: \tunabhängiges\r\n|elif reportsystem.allegiance = \"Unabhängig\"\t: \tunabhängige{if reportsystem.government = \"Gottesstaat\"\t:r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Staatenbund\"\t:r \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Diktatur\"\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|elif reportsystem.government = \"Werkstatt\"\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|else \t\t\t\t\t\t\t\t\t\t\t:s}\r\n|elif reportsystem.allegiance = \"None\"\t\t\t: \tumkämpftes oder unbekanntes\r\n|elif reportsystem.allegiance = \"Keine\"     \t: \tumkämpftes oder unbekanntes\r\n|else                                           : \tumkämpftes oder unbekanntes\r\n}\r\n\r\n{  if reportsystem.government = \"Theocracy\"\t\t: Gottesstaat\r\n|elif reportsystem.government = \"Gottesstaat\"\t: Gottesstaat\r\n|elif reportsystem.government = \"Konföderation\" : Staatenbund\r\n|elif reportsystem.government = \"Staatenbund\"\t: Staatenbund\r\n|elif reportsystem.government = \"Confederacy\" \t: Staatenbund\r\n|elif reportsystem.government = \"Dictatorship\"\t: Diktatur\r\n|elif reportsystem.government = \"Diktatur\"\t\t: Diktatur\r\n|elif reportsystem.government = \"Patronat\"\t\t: Protektorat\r\n|elif reportsystem.government = \"Werkstatt\"\t\t: Werkstatt\r\n|else\t\t\t\t\t\t\t\t\t\t\t:\r\n\t{  if reportsystem.government = \"Anarchy\"   \t\t: anarchie\r\n\t|elif reportsystem.government = \"Anarchie\"\t\t\t: anarchie\r\n\t|elif reportsystem.government = \"Colony\"      \t\t: kolonial\r\n\t|elif reportsystem.government = \"Kolonie\"\t\t\t: kolonial\r\n\t|elif reportsystem.government = \"Cooperative\" \t\t: kooperations\r\n\t|elif reportsystem.government = \"Kooperative\" \t\t: kooperations\r\n\t|elif reportsystem.government = \"Konzernpolitik\"\t: konzern\r\n\t|elif reportsystem.government = \"Feudalismus\"\t\t: feudal\r\n\t|elif reportsystem.government = \"Feudal\"\t\t\t: feudal\r\n\t|elif reportsystem.government = \"Feudalsystem\"\t\t: feudal\r\n\t|elif reportsystem.government = \"Imperial\"    \t\t: hoheits\r\n\t|elif reportsystem.government = \"Communism\"\t\t\t: kommunistisches\r\n\t|elif reportsystem.government = \"Kommunismus\"\t\t: kommunistisches\r\n\t|elif reportsystem.government = \"Kommunistisch\"\t\t: kommunistisches\r\n\t|elif reportsystem.government = \"Democracy\"\t\t\t: demokratisches\r\n\t|elif reportsystem.government = \"Demokratie\"\t\t: demokratisches\r\n\t|elif reportsystem.government = \"Gefängniskolonie\"\t: Strafkolonie\r\n\t|elif reportsystem.government = \"Sträflingskolonie\"\t: Strafkolonie\r\n\t|else\t\t\t\t\t\t\t\t\t\t\t\t: {reportsystem.government}\r\n\t} System\r\n}\r\n}\r\n\r\n{OneOf(\"mit einer population von\", \"und Heimat von\", \"mit einer Bevölkerungsstärke von\")} \r\n{set value to (reportsystem.population)} {F(\"Humanise ValueGer\")} {OneOf(\"Siedlern\", \"Einwohnern\", \"Menschen\")}\r\n{if reportsystem.power:  {OneOf(\"Verbunden mit\", \"alliiert mit\", \"kontrolliert von\")} {set translate to (reportsystem.power)} {F('Translate Power')}\r\n}.\r\n\r\n{if reportsystem.faction:\r\n  {(reportsystem.faction)} gilt als die {OneOf(\"kontrollierende\", \"lokale\", \"unmittelbare\")} {OneOf(\"Macht\", \"Fraktion\", \"Kraft\")} ,.\r\n}\r\n\r\n{if len(reportsystem.stations) = 0 : Es sind keine Stationen\r\n|else:\r\n    {if len(reportsystem.orbitalstations) = 0:\r\n        {if len(reportsystem.planetarystations) = 1:\r\n            {OneOf(\"Eine einzelne\", \"Eine einzige\", \"Nur eine\", \"Eine\")} planetare Station\r\n        |else:\r\n            {len(reportsystem.planetarystations)} planetare Stationen\r\n        }\r\n    |elif len(reportsystem.orbitalstations) = 1:\r\n        \t{OneOf(\"Eine einzelne\", \"Eine einzige\", \"Nur eine\", \"Eine\")} orbital Station\r\n        {if len(reportsystem.planetarystations) = 1:\r\n            , {OneOf(\"sowie\", \"und\")} {OneOf(\"eine einzelne\", \"eine einzige\", \"eine\")} planetare Station\r\n        |elif len(reportsystem.planetarystations) > 1:\r\n            , {OneOf(\"sowie\", \"und\")} {len(reportsystem.planetarystations)} planetare Stationen\r\n        }\r\n    |else:\r\n        {len(reportsystem.orbitalstations)} orbital Stationen\r\n        {if len(reportsystem.planetarystations) = 1:\r\n            , {OneOf(\"sowie\", \"und\")} {OneOf(\"eine einzelne\", \"eine einzige\", \"eine\")} planetare Station\r\n        |elif len(reportsystem.planetarystations) > 1:\r\n            , {OneOf(\"sowie\", \"und\")} {len(reportsystem.planetarystations)} planetare Stationen\r\n        }\r\n    }\r\n}\r\n\r\n{if len(reportsystem.orbitalstations) + len(reportsystem.planetarystations) > 1 : sind\r\n|else: ist\r\n}\r\n{Occasionally(4, \"in diesem System\")} {OneOf(\"vorhanden\", \"registriert\", \"verzeichnet\")}.",
      "name": "System report",
      "description": "Function to report on the details of the current star system",
      "default": false,
      "defaultValue": "{_ Fetch from Context, if a context is set _}\r\n{if state.eddi_context_system_name:\r\n    {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    {P(reportSystem.name, \"starsystem\")} is\r\n\r\n    {if reportSystem.population && reportSystem.population > 0:\r\n        {if reportSystem.allegiance = \"Federation\":\r\n            a Federation\r\n        |elif reportSystem.allegiance = \"Empire\":\r\n            an Empire\r\n        |else:\r\n            an independent\r\n        }\r\n        {if reportSystem.government != \"None\":\r\n            {reportSystem.government}\r\n        |else:\r\n            system\r\n        }\r\n        {OneOf(\"of\", \"with a population of\", \"home to\", \"supporting\")} {Humanise(reportSystem.population)} {OneOf(\"people\", \"souls\")}\r\n        {if reportSystem.powerState.invariantName != \"None\":\r\n            {if reportSystem.powerState.invariantName = \"Home System\":\r\n                , and is home to {P(reportSystem.power, \"power\")}\r\n            |elif reportSystem.powerState.invariantName = \"Control\":\r\n                , and is {OneOf(\"allied with\", \"controlled by\")} {P(reportSystem.power, \"power\")}\r\n            |elif reportSystem.powerState.invariantName = \"Exploited\":\r\n                , and is {OneOf(\"aligned to\", \"within the influence of\")} {P(reportSystem.power, \"power\")}\r\n            |elif reportSystem.powerState.invariantName = \"Contested\":\r\n                , and is contested by multiple powers\r\n            }\r\n        }.\r\n\r\n        {if reportSystem.faction:\r\n            {P(reportSystem.faction, \"faction\")} is the {OneOf(\"controlling\", \"local\", \"immediate\")} {OneOf(\"power\", \"faction\")}.\r\n        }\r\n\r\n        {if len(reportSystem.stations) = 0:\r\n            There are no stations present\r\n        |else:\r\n            {set systemStations to []}\r\n            {if len(reportSystem.orbitalstations) = 1:\r\n                {set orbitalStationDesc to:                \r\n                    There is {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} orbital station\r\n                }\r\n            |elif len(reportSystem.orbitalstations) > 1:\r\n                {set orbitalStationDesc to:                \r\n                    There are {len(reportSystem.orbitalstations)} orbital stations\r\n                }\r\n            }\r\n            {if len(reportSystem.planetarystations) = 1:\r\n                {set planetaryStationDesc to:            \r\n                    {if len(reportSystem.orbitalstations) = 0: There is}\r\n                    {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} planetary station\r\n                }\r\n            |elif len(reportSystem.planetarystations) > 1:\r\n                {set planetaryStationDesc to:            \r\n                    {if len(reportSystem.orbitalstations) = 0: There are}\r\n                    {len(reportSystem.planetarystations)} planetary stations\r\n                }\r\n            }\r\n            {if len(reportSystem.carriersignalsources) = 1:\r\n                {set fleetCarrierDesc to:\r\n                    {if len(reportSystem.orbitalstations) = 0 && len(reportSystem.planetarystations) = 0: There is}\r\n                    {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} fleet carrier\r\n                }\r\n            |elif len(reportSystem.carriersignalsources) > 1:\r\n                {set fleetCarrierDesc to:            \r\n                    {if len(reportSystem.orbitalstations) = 0 && len(reportSystem.planetarystations) = 0: There are}\r\n                    {len(reportSystem.carriersignalsources)} fleet carriers\r\n                }\r\n            }\r\n            {if orbitalStationDesc:\r\n                {set systemStations to cat(systemStations, [orbitalStationDesc])}\r\n            }\r\n            {if planetaryStationDesc:\r\n                {set systemStations to cat(systemStations, [planetaryStationDesc])}\r\n            }\r\n            {if fleetCarrierDesc:\r\n                {set systemStations to cat(systemStations, [fleetCarrierDesc])}\r\n            }\r\n            {List(systemStations)}\r\n        }\r\n        in this system\r\n    |else:\r\n       unpopulated\r\n   }.\r\n}"
    },
    "System report 3.7.1": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: System report\")}\r\n\r\n{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportsystem.name = \"\": Welches System ist gemeint? \r\n|else:\r\n    {P(reportsystem.name)} ist\r\n\r\n    {if reportsystem.population && reportsystem.population > 0 :\r\n        {if reportsystem.allegiance = \"Federation\" : ein förderales\r\n        |elif reportsystem.allegiance = \"Empire\"   : ein imperiales\r\n        |else                                      : ein unabhängiges\r\n        }\r\n        {if reportsystem.government != \"None\" : {reportsystem.government},\r\n        |else: System\r\n        }\r\n              \r\n        {OneOf(\"von\", \"mit einer Population von\", \"Heimat von\", \"hier leben\")} \r\n        {set value to (reportsystem.population)} {F(\"Humanise ValueGer\")} {OneOf(\"Menschen\", \"Seelen\", \"Idividuen\")}\r\n        \r\n        {if reportsystem.powerState.invariantName != \"None\":\r\n            {if reportsystem.powerState.invariantName = \"Home System\":\r\n                , und ist Heimat to {P(reportsystem.power)}\r\n            |elif reportsystem.powerState.invariantName = \"Control\":\r\n                , und  {OneOf(\"ist alleiert mit\", \"wird kontrolliert von\")} {P(reportsystem.power)}\r\n            |elif reportsystem.powerState.invariantName = \"Exploited\":\r\n                , und  {OneOf(\"ist angepasst an\", \"wird beeinflusst von\")} {P(reportsystem.power)}\r\n            |elif reportsystem.powerState.invariantName = \"Contested\":\r\n                , und wird von verschiedenen Mächten angefochten\r\n            }\r\n        }.\r\n\r\n        {if reportsystem.faction:\r\n            {P(reportsystem.faction)} ist die {OneOf(\"kontrollierende \", \"lokale\", \"unmittelbare\")} {OneOf(\"Kraft\", \"Fraktion\")}.\r\n        }\r\n\r\n        {if len(reportsystem.stations) = 0 : Hier {OneOf(\"gibt es keine Stationen\", \"sind keine Stationen zu finden\")}.\r\n        |else:\r\n            {set systemStations to []}\r\n            {if len(reportsystem.orbitalstations) = 1 :\r\n                {set orbitalStationDesc to:                \r\n                    Es gibt {OneOf(\"eine einzelne\", \"eine einsame\", \"nur eine\", \"eine\")} orbital Station\r\n                }\r\n            |elif len(reportsystem.orbitalstations) > 1 :\r\n                {set orbitalStationDesc to:                \r\n                    Es gibt {len(reportsystem.orbitalstations)} orbital Stationen\r\n                }\r\n            }\r\n            {if len(reportsystem.planetarystations) = 1 :\r\n                {set planetaryStationDesc to:            \r\n                    {if len(reportsystem.orbitalstations) = 0 : Es gibt}\r\n                    {OneOf(\"eine einzelne\", \"eine einsame\", \"nur eine\", \"eine\")} planetare Station\r\n                }\r\n            |elif len(reportsystem.planetarystations) > 1 :\r\n                {set planetaryStationDesc to:            \r\n                    {if len(reportsystem.orbitalstations) = 0 : Es gibt}\r\n                    {len(reportsystem.planetarystations)} planetare Stationen\r\n                }\r\n            }\r\n            {if len(reportsystem.carriersignalsources) = 1 :\r\n                {set fleetCarrierDesc to:\r\n                    {if len(reportsystem.orbitalstations) = 0 && len(reportsystem.planetarystations) = 0 : Es gibt}\r\n                    {OneOf(\"einen einzelnen\", \"einen einsamen\", \"nur einen\", \"einen\")} Flottentransporter\r\n                }\r\n            |elif len(reportsystem.carriersignalsources) > 1:\r\n                {set fleetCarrierDesc to:            \r\n                    {if len(reportsystem.orbitalstations) = 0 && len(reportsystem.planetarystations) = 0: Es gibt}\r\n                    {len(reportsystem.carriersignalsources)} Flottentransporter\r\n                }\r\n            }\r\n            {if orbitalStationDesc:\r\n                {set systemStations to cat(systemStations, [orbitalStationDesc])}\r\n            }\r\n            {if planetaryStationDesc:\r\n                {set systemStations to cat(systemStations, [planetaryStationDesc])}\r\n            }\r\n            {if fleetCarrierDesc:\r\n                {set systemStations to cat(systemStations, [fleetCarrierDesc])}\r\n            }\r\n            {List(systemStations)}\r\n        }\r\n        in diesem System\r\n    |else:\r\n       unbesiedelt\r\n   }.\r\n}",
      "name": "System report 3.7.1",
      "description": "Function to report on the details of the contextual star system",
      "default": false,
      "defaultValue": null
    },
    "System scan complete": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: System scan complete\")}\r\n\r\n{set reportSystem to SystemDetails(system.name)}\r\n{set reportbody to reportSystem.bodies}\r\n{_ Preferences _}\r\n{set reportGreenSystems to true}  {_ if true, reports systems containing all fsd synthesis elements. _}\r\n{set reportGoldSystems to true}   {_ if true, reports systems containing all surface prospectable elements. _}\r\n{set reportBodiesToMap to true}   {_ If true, recommends bodies to map using the `Bodies to map` script. _}\r\n\r\n{if reportSystem:\r\n\t{set scannedBodies to 0} \r\n\t{set alreadydiscovered to 0}\r\n\t{set alreadymapped to 0}\r\n\t{set body_stern to 0}\r\n        \r\n\t{for body in reportSystem.bodies :\r\n\t\t{if body.alreadymapped: {set alreadymapped to alreadymapped + 1}}\r\n    \t{if body.alreadydiscovered: {set alreadydiscovered to alreadydiscovered + 1}}\r\n    \t{if body.scanned: {set scannedBodies to scannedBodies + 1}}\r\n    \t{if body.bodytype = \"Stern\": {set body_stern to body_stern + 1}\r\n\t\t\t{if body.mainstar && body.alreadydiscovered && !body.scanned : {set system_entdeckt to 0}\r\n        \t|elif body.mainstar && body.alreadydiscovered && body.scanned : {set system_entdeckt to 1}\r\n        \t}\r\n    \t}\t\r\n\t}\r\n\t{set bodiesToScan to (system.totalbodies - scannedBodies)}   \r\n}\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf(\"Alles erfasst\", \"Der System Scan ist abgeschlossen\", \"System gescannt\", \"System komplett gescannt\")} \r\n\t\t{F('Honorific')}.,\r\n\r\n{_ für Testzwecke}\r\n{_ if system.totalbodies = 1: ein Objekt, else: system.totalbodies Objekte _}\r\n{_ if body_stern = 1: ein Stern, else: body_stern _}\r\n{_ if alreadymapped = 1: ein Objekt gemeppt, else: alreadymapped Objekte gemeppt, _}\r\n    \r\n{if system.totalbodies - alreadymapped - body_stern = 0 : {Occasionally(5, \"Leider\")} keine \r\n\t\t{OneOf(\"Körper\", \"Objekte\")} für eine Ersterfassung {OneOf(\"vorhanden\", \"entdeckt\")}.\r\n|elif system.totalbodies - alreadymapped - body_stern = 1 : Es ist noch eine Ersterfassung möglich!\r\n|elif system.totalbodies - alreadymapped - body_stern > 1 : Wir können noch \r\n\t{system.totalbodies - alreadymapped - body_stern} {OneOf(\"Körper\", \"Objekte\")} als Erster kartografieren!\r\n|else: \r\n}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {for compartment in ship.compartments:\r\n        {if compartment.module.name = \"Planetenfahrzeug-Hangar\":\r\n            {set hasSRV to true}\r\n        }\r\n    }\r\n    {if hasSRV:\r\n        {if system.isgold:\r\n            {if reportGoldSystems:\r\n                Dieses {Occasionally(2, \"Sternen\")} System {OneOf(\"beherbergt\", \"besitzt\", \"hat\")} jedes\r\n                auf Planetenoberflächen {OneOf(\"zu findende\", \"verfügbare\")} Element.\r\n                Erkundungsklasse: Gold.\r\n            }\r\n        |elif system.isgreen:\r\n            {if reportGreenSystems:\r\n                Dieses {Occasionally(2, \"Sternen\")} System {OneOf(\"beherbergt\", \"besitzt\", \"hat\")} \r\n                jedes {Occasionally(2, \"benötigte\")} Element, um\r\n                {OneOf(\"die {Occasionally(2, \\\"Sprung\\\")}reichweite dieses Schiffes\", \r\n                \"eines Erkunders {Occasionally(2, \\\"Sprung\\\")}reichweite\", \r\n                \"{ShipName()}'s {Occasionally(2, \\\"Sprung\\\")}reichweite\")}\r\n                {OneOf(\"zu erhöhen.\", \"zu erweitern.\")} \r\n                Erkundungsklasse: Grün.\r\n            }\r\n        }\r\n    }\r\n      \r\n    {if reportBodiesToMap:\r\n        {set bodiesToMap to F(\"Bodies to map\")}\r\n        {if bodiesToMap:\r\n            {Pause(2000)}\r\n            {bodiesToMap}\r\n        }\r\n    }\r\n}\r\n\r\n{_\r\n- systemname  The name of the scanned system\r\n- count       The count of bodies from the scanned system\r\n_}\r\n",
      "name": "System scan complete",
      "description": "Triggered after having identified all bodies in the system",
      "default": false,
      "defaultValue": "{_ Preferences _}\r\n{set reportGreenSystems to true}  {_ if true, reports systems containing all fsd synthesis elements. _}\r\n{set reportGoldSystems to true}   {_ if true, reports systems containing all surface prospectable elements. _}\r\n{set reportBodiesToMap to true}   {_ If true, recommends bodies to map using the `Bodies to map` script. _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n    {for compartment in ship.compartments:\r\n        {if compartment.module.invariantName = \"Planetary Vehicle Hangar\":\r\n            {set hasSRV to true}\r\n        }\r\n    }\r\n    {if hasSRV:\r\n        {if system.isgold:\r\n            {if reportGoldSystems:\r\n                This {Occasionally(2, \"star\")} system \r\n                {OneOf(\"contains\", \"holds\", \"has\")}\r\n                every element \r\n                {OneOf(\"that can be found\", \"available\")}\r\n                {OneOf(\"on planetary surfaces.\", \"from surface prospecting.\")}\r\n                Exploration class: Gold.\r\n            }\r\n        |elif system.isgreen:\r\n            {if reportGreenSystems:\r\n                This {Occasionally(2, \"star\")} system \r\n                {OneOf(\"contains\", \"holds\", \"has\")}\r\n                every element \r\n                {Occasionally(2, \"that may be\")} \r\n                required to \r\n                {OneOf(\"augment\", \"boost\")} \r\n                {OneOf(\"the {Occasionally(2, \\\"jump\\\")} range of this ship.\", \r\n                       \"an explorer's {Occasionally(2, \\\"jump\\\")} range.\", \r\n                       \"{ShipName()}'s {Occasionally(2, \\\"jump\\\")} range.\"\r\n                )}\r\n                Exploration class: Green.\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportBodiesToMap:\r\n        {set bodiesToMap to F(\"Bodies to map\")}\r\n        {if bodiesToMap:\r\n            {Pause(2000)}\r\n            {bodiesToMap}\r\n        }\r\n    }\r\n}"
    },
    "System state changed": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: System state changed\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_state')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{  if event.system = homesystem.name: {set system to OneOf('{(event.system)}', 'Ihr heimat System')}\r\n|elif event.system = system.name    : {set system to OneOf('{(event.system)}', 'dieses System')}\r\n|else                               : {set system to OneOf('system {(event.system)}' '{(event.system)}'))}\r\n}\r\n\r\n{if event.newstate != 'None':\r\n  {_ System has entered a new state}\r\n  {OneOf('Lokale Übertragungen berichten, dass', 'Information: ', 'Transmission abgefangen.  Inhalt lautet: ')}\r\n  {  if event.newstate = 'Boom'        : {OneOf('{system} is experiencing a commercial boom', '{system} is entering a period of hightened commercial success')}\r\n  |elif event.newstate = 'Bust'        : {system} is experiencing economic hardship\r\n  |elif event.newstate = 'Civil Unrest': {OneOf('{system} is experiencing civil unrest', 'there is unrest in the {system} system')}\r\n  |elif event.newstate = 'Civil War'   : {OneOf('{system} is at war with another faction in the same system', 'civil war has broken out in {system}', '{system} has fallen in to civil war', 'hostilities have broken out in {system}')}\r\n  |elif event.newstate = 'Election'    : {system} is undergoing elections\r\n  |elif event.newstate = 'Expansion'   : {OneOf(\"a faction in {system}'s is attempting to expand in to a neighbouring system\", \"a faction in {system}'s is preparing to expand in to a neighbouring system\")}\r\n  |elif event.newstate = 'Famine'      : {system} is suffering from famine\r\n  |elif event.newstate = 'Investment'  : {system}'s controlling faction are investing heavily in their local infrastructure\r\n  |elif event.newstate = 'Lockdown'    : {system} has hightened security due to a lockdown by the controlling faction\r\n  |elif event.newstate = 'Outbreak'    : {system} is suffering from an outbreak of contagious disease\r\n  |elif event.newstate = 'Retreat'     : {system}'s controlling faction is retreating from a neighbouring system\r\n  |elif event.newstate = 'War'         : {system} is now at war with a neighbouring system\r\n  |else                                : {OneOf('{system} has entered {event.state}', '{system} is now in a state of {event.state}')}\r\n  }.\r\n}\r\n\r\n{_ Triggered when there is a change in the state of a watched system.\r\n\r\n- match\t\tThe name of the pattern that this event matched\r\n- system\tThe name of the system\r\n- oldstate\tThe old state of the system\r\n- newstate\tThe new state of the system _}\r\n\r\n",
      "name": "System state changed",
      "description": "Triggered when there is a change in the state of a watched system",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_state')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system, \"starsystem\")}',\r\n                       'your home system')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P(event.system, \"starsystem\")}',\r\n                       'this system')}\r\n|else:\r\n  {set system to OneOf('system {P(event.system, \"starsystem\")}',\r\n                       '{P(event.system, \"starsystem\")}')}\r\n}\r\n\r\n{if event.newstate != 'None':\r\n  {_ System has entered a new state}\r\n  {OneOf('Local transmissions report that', 'Information: ', 'Transmission intercepted.  Contents state that ')}\r\n  {if event.newstate = 'Boom':\r\n    {OneOf('{system} is experiencing a commercial boom',\r\n           '{system} is entering a period of heightened commercial success')}\r\n  |elif event.newstate = 'Bust':\r\n    {system} is experiencing economic hardship\r\n  |elif event.newstate = 'Civil Unrest':\r\n    {OneOf('{system} is experiencing civil unrest',\r\n           'there is unrest in the {system} system')}\r\n  |elif event.newstate = 'Civil War':\r\n    {OneOf('{system} is at war with another faction in the same system',\r\n           'civil war has broken out in {system}',\r\n           '{system} has fallen in to civil war',\r\n           'hostilities have broken out in {system}')}\r\n  |elif event.newstate = 'Election':\r\n    {system} is undergoing elections\r\n  |elif event.newstate = 'Expansion':\r\n    {OneOf(\"a faction in {system}'s is attempting to expand in to a neighbouring system\",\r\n           \"a faction in {system}'s is preparing to expand in to a neighbouring system\")}\r\n  |elif event.newstate = 'Famine':\r\n    {system} is suffering from famine\r\n  |elif event.newstate = 'Investment':\r\n    {system}'s controlling faction are investing heavily in their local infrastructure\r\n  |elif event.newstate = 'Lockdown':\r\n    {system} has heightened security due to a lockdown by the controlling faction\r\n  |elif event.newstate = 'Outbreak':\r\n    {system} is suffering from an outbreak of contagious disease\r\n  |elif event.newstate = 'Retreat':\r\n    {system}'s controlling faction is retreating from a neighbouring system\r\n  |elif event.newstate = 'War':\r\n    {system} is now at war with a neighbouring system\r\n  |else:\r\n    {OneOf('{system} has entered {event.state}',\r\n           '{system} is now in a state of {event.state}')}\r\n  }.\r\n}\r\n\r\n"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{Log(\"EDDI Fktn.: System state report\")}\r\n\r\n{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{_ set reportsystem to SystemDetails(\"IX\")}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    Bitte das Sternen System spezifizieren.\r\n|elif reportsystem.state && reportsystem.state != 'kein' && reportsystem.state != 'None':\r\n\r\n    Dieses System\r\n    {if reportsystem.state = \t\"Rückzug\"          \t\t\t\r\n    \t|| reportsystem.state = \"Retreat\"      \t\t\t \t: ist im Rückzug.\r\n    |elif reportsystem.state = \t\"Krieg\"          \t\t\t\r\n    \t|| reportsystem.state = \"War\"        \t\t\t\t: ist im Kriegszustand. Vorsicht ist geboten!\r\n    |elif reportsystem.state = \t\"Aufschwung\"     \t\t\t\r\n    \t|| reportsystem.state = \"Boom\"       \t\t\t \t: ist im Aufschwung. Hier könnten sich gute Geschäfte ergeben.\r\n    |elif reportsystem.state = \t\"Bürgerkrieg\"    \t\t\t\r\n    \t|| reportsystem.state = \"Civil War\"   \t\t\t  \t: macht einen Bürgerkrieg durch. Vorsicht ist geboten!\r\n    |elif reportsystem.state = \t\"Unruhen\" \t\t\t\t\t\r\n    \t|| reportsystem.state = \"Civil Unrest\" \t\t\t \t: befindet sich in Aufruhr. Vorsicht ist geboten!\r\n    |elif reportsystem.state = \t\"Hungersnot\"     \t\t\t\r\n    \t|| reportsystem.state = \"Famine\"       \t\t\t \t: durchleidet eine Hungersnot. Vorsicht ist geboten!\r\n    |elif reportsystem.state = \t\"Abriegelung\"    \t\t\t\r\n    \t|| reportsystem.state = \"Lockdown\"     \t\t\t \t: ist gegenwärtig abgeriegelt. Vorsicht ist geboten!\r\n    |elif reportsystem.state = \t\"Ausbruch\"       \t\t\t\r\n    \t|| reportsystem.state = \"Outbreak\"     \t\t\t \t: versucht den Ausbruch einer Seuche zu verhindern. Vorsicht ist geboten!\r\n    |elif reportsystem.state = \t\"Expansion\"\t    \t\t\t\r\n    \t|| reportsystem.state = \"Expansion\"    \t\t\t \t: bereitet eine Expansion in ein weiteres System vor.\r\n    |elif reportsystem.state = \t\"Pleite\"         \t\t\t\r\n    \t|| reportsystem.state = \"Bust\"        \t\t\t  \t: ist pleite.\r\n    |elif reportsystem.state = \t\"Wahlen\"         \t\t\t\r\n    \t|| reportsystem.state = \"Election\"    \t\t\t\t: wählt eine neue Führung.\r\n    |elif reportsystem.state = \t\"Investition\"\t\t\t\t\r\n    \t|| reportsystem.state = \"Investment\"   \t\t\t\t: investiert zur Zeit in seine Infrastruktur.\r\n    |elif reportsystem.state = \t\"Bürgerliche Freiheit\" \t\t\r\n    \t|| reportsystem.state = \"Civil Liberty\" \t\t\t: schenkt seinen Einwohnern die Unabhängigkeit.\r\n    |elif reportsystem.state = \t\"Eindringen\" \t\t\t\t\r\n    \t|| reportsystem.state = \"Incursion\"\t\t\t\t\t: kämpft mit einem Eindringling.\r\n\t|elif reportsystem.state = \t\"Naturkatastrophe\" \t\t\t\r\n\t\t|| reportsystem.state = \"Natural Disaster\"  \t\t: kämpft mit einer Naturkatastrophe.\r\n    |elif reportsystem.state = \t\"Ausfall der Infrastruktur\"\t\r\n    \t|| reportsystem.state = \"Infrastructure Failure\" \t: hat Probleme mit der Versorgungsstruktur.\r\n    |elif reportsystem.state = \t\"Dürre\"  \t\t\t\t\t\r\n    \t|| reportsystem.state = \"Natural Disaster\" \t\t\t: kämpft mit einer Dürre.\t\t\r\n    |elif reportsystem.state = \t\"Terroranschlag\" \t\t\t\r\n    \t|| reportsystem.state = \"Terrorism\"\t\t \t\t\t: muss einen Terroranschlag überwinden.\r\n    |elif reportsystem.state = \t\"Feiertag\" \t\t\t\t\t\r\n    \t|| reportsystem.state = \"Public Holiday\" \t\t\t: feiert einen Feiertag.\r\n    |elif reportsystem.state = \t\"Seuche\" \t\t\t\t\t\r\n    \t|| reportsystem.state = \"Blight\"\t\t \t\t\t: kämpft mit einer Seuche.\r\n    |else:\r\n     meldet keinen besonderen Zustand.\r\n    }\r\n}",
      "name": "System state report",
      "description": "Report on the current state of the contextual system",
      "default": false,
      "defaultValue": "{_ Fetch from Context, if a context is set _}\r\n{if state.eddi_context_system_name:\r\n    {set reportSystem to SystemDetails(state.eddi_context_system_name)}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n\r\n    I'm not sure which system you are asking about.\r\n\r\n|else:\r\n\r\n    {_ Report any ongoing conflicts _}\r\n    {set conflictfactions to []}\r\n    {if reportSystem.conflicts != null:\r\n        {for conflict in reportSystem.conflicts:\r\n            The \r\n            {if reportSystem.faction = conflict.faction1: controlling}\r\n            {conflict.faction1} faction\r\n            {if conflict.status = \"active\":\r\n              is\r\n            |elif conflict.status = \"pending\":\r\n              will soon be\r\n            |else:\r\n               is recovering after\r\n            }\r\n            {if conflict.faction1dayswon > conflict.faction2dayswon:\r\n               {if conflict.margin >= 3:\r\n                   dominating\r\n               |elif conflict.margin = 2:\r\n                   winning\r\n               |else:\r\n                   ahead in\r\n               }\r\n            |elif conflict.faction2dayswon > conflict.faction1dayswon:\r\n               {if conflict.margin >= 2:\r\n                   losing\r\n               |else:\r\n                   trailing in\r\n               }\r\n            |else:\r\n               tied in\r\n            }\r\n            {if StartsWithVowel(conflict.state): an |else: a }\r\n            {conflict.state}\r\n            with the \r\n            {if reportSystem.faction = conflict.faction2: controlling}\r\n            {conflict.faction2} faction\r\n            {if conflict.stake:\r\n               for control of {conflict.stake}\r\n            }\r\n            .\r\n            {set conflictfactions to cat(conflictfactions, [conflict.faction1])}\r\n            {set conflictfactions to cat(conflictfactions, [conflict.faction2])}\r\n        }\r\n    }\r\n\r\n    {_ List our non-conflict faction states _}\r\n    {set otherstates to []}\r\n    {for faction in reportSystem.factions:\r\n        {if faction.influence > 0 && find(conflictfactions, faction.name) = -1:\r\n            {for presence in faction.presences:\r\n                {if presence.systemName = reportSystem.name:\r\n                    {if presence.FactionState.invariantName != \"None\":\r\n\r\n                        {_ Note our controlling faction, if present in our `otherstates` list. _}\r\n                        {if faction.name = reportSystem.faction:\r\n                            {set factions to token(factions, \"\", index, \"controlling \")}\r\n                        }\r\n\r\n                        {_ Add the faction to our list _}\r\n                        {if has(otherstates, presence.state):\r\n                            {set factions to otherstates[presence.state])}\r\n                            {set factions to cat(factions, \",\", P(faction.name, \"faction\"))}\r\n                            {set otherstates to union(otherstates, [presence.state: factions])}\r\n                        |else:\r\n                            {set otherstates to union(otherstates, [presence.state: P(faction.name, \"faction\")])}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Sort from most factions with each state to least factions with each state. _}\r\n    {declare by_items(a, b) as:\r\n        {return cmp(len(split(b, \",\")), len(split(a, \",\")))}\r\n    }\r\n    {sort(otherstates, by_items)}\r\n\r\n    {_ Prepare summaries for each state _}\r\n    {set statesummaries to []}\r\n    {for state, factions in otherstates:\r\n\r\n        {set factions to split(factions, \",\")}\r\n\r\n        {set statesummary to:\r\n            The \r\n            {if len(factions) > 1:\r\n                {List(factions)} are\r\n            |else:\r\n                {factions[0]} is\r\n            }\r\n            {if state = \"Retreat\":\r\n                in retreat\r\n            |elif state = \"War\":\r\n                at war\r\n            |elif state = \"Boom\":\r\n                undergoing a boom\r\n            |elif state = \"Civil Liberty\":\r\n                enjoying a period of heightened civil liberty\r\n            |elif state = \"Civil Unrest\":\r\n                experiencing civil unrest\r\n            |elif state = \"Civil War\":\r\n                in civil war\r\n            |elif state = \"Famine\":\r\n                in a state of famine\r\n            |elif state = \"Lockdown\":\r\n                in lockdown\r\n            |elif state = \"Outbreak\":\r\n                attempting to contain an outbreak of disease\r\n            |elif state = \"Expansion\":\r\n                gearing up to expand to another system\r\n            |elif state = \"Bust\":\r\n                financially bust\r\n            |elif state = \"Election\":\r\n                electing new leaders\r\n            |elif state = \"Investment\":\r\n                investing in its infrastructure\r\n            |elif state = \"Incursion\":\r\n                under assault by alien forces\r\n            |elif state = \"Pirate Attack\":\r\n                suffering from pirate attacks\r\n            |elif state = \"Blight\":\r\n                suffering from a crop blight\r\n            |else: {_ catch-all, worded to avoid deciding between a/an}\r\n                in a state of {state}\r\n            }\r\n        }\r\n        {set statesummaries to cat(statesummaries, [statesummary])}\r\n    }\r\n\r\n    {_ Describe our non-conflict states _}\r\n    {if len(statesummaries) > 0:\r\n        {Pause(100)}\r\n        {List(statesummaries)}\r\n    }\r\n\r\n}"
    },
    "Technology broker": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": null,
      "name": "Technology broker",
      "description": "Triggered when using the Technology Broker to unlock new purchasable technology",
      "default": true,
      "defaultValue": null
    },
    "Test": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Joe Scarborough legte am Dienstagmorgen die Stirn in Sorgenfalten. «Es wird immer schlimmer», sagte der beliebte Gastgeber der Politrunde «Morning Joe» auf MSNBC. Was Donald Trump über das Wochenende von sich gegeben habe, sei «sehr bizarr».}\r\n\r\n{_ set reportsystem to SystemDetails('TOLUKU')}\r\n{_ set reportsystem to SystemDetails('Shinrarta Dezhra')}\r\n\r\n{_ reportsystem.state}\r\n\r\nBefehl set {set allegiance to lastsystem.allegiance} Befehl Ende. \r\n\r\nSuperpower {allegiance}\r\n\r\n{lastsystem.allegiance}\r\n\r\n{Pause(500)}\r\n\r\nDie Sonnenfarbe ist {reportbody.chromaticity}, Ende.\r\n\r\n{Pause(500)}\r\n\r\n{if  (reportsystem.name) =  \"Shinrarta Dezhra\":  Schinrata\r\n|else: {(reportsystem.name)}\r\n}\r\n\r\n{Pause(500)}\r\n\r\n{_ set translate to (homestation.name)} {if translate = \"Jameson Base\": Dscheimsen Bais}\r\n\r\n{Pause(500)}\r\n\r\n{OneOf(\"X% aufgetankt\",\"{OneOf('y%','Tonnen')} {OneOf('Suppe','Wasser') gewonnen}\",\"{OneOf('z%','Tonnen')} Sprit an Bord genommen\")},\r\n\r\n{\r\nF('Honorific')} {cmdr.name},\r\n\r\nDu bist im system {P(system.name)}, es gehört zur\r\n\r\n{Pause(100)}\r\n\r\n{set translate to (system.allegiance)} {if translate = \"Keine\": ein neutrales System}\r\n{translate}\r\n\r\nDie Sicherheit ist {system.security}.\r\n\r\nWir nutzen das {status.vehicle}\r\n\r\n{event.power}\r\n\r\n{event.rank}\n\r\n{ship.compartments}\r\n\r\n{if lastsystem.allegiance && lastsystem.allegiance != \"None\" \r\n                                       && lastsystem.allegiance != \"keine\" \r\n                                       && lastsystem.allegiance != \"Independent\" \r\n                                       && lastsystem.allegiance != \"Unabhängig\" \r\n                                       && (!system.allegiance || system.allegiance = \"None\" \r\n                                                              || system.allegiance = \"keine\" \r\n                                                              || system.allegiance = \"Independent\" \r\n                                                              || system.allegiance = \"Unabhängig\"):\r\n\r\n            und verlassen {OneOf(\"jetzt\", \"gerade\", \"hiermit\", \"somit\", \"derzeit\")} {lastsystem.allegiance}\r\n            }\r\n",
      "name": "Test",
      "description": "Test",
      "default": false,
      "defaultValue": null
    },
    "Test 2": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{set Runde to 0}\r\n{for count in inventory:\t\t\t{_ Überhaupt Drohnen an Bord? _}\r\n\t{_ Runde}\r\n\t{if inventory[Runde].name = \"Limpet\" || inventory[Runde].name = \"Drohne\": {set Anzahl_Drohnen to inventory[Runde].total}\r\n\t{if Anzahl_Drohnen = 1: Drohne vorhanden |else: {Anzahl_Drohnen} Drohnen vorhanden}\r\n\t}\r\n\t{set Runde to Runde + 1}\r\n}\r\n\r\n\r\n{if Drohnen = true:\t\t\t\t\t{_ Drohnen vorhanden, Abfrage wie viele _}\r\n\t{for cargo in inventory:\r\n\t\t{if cargo.name = \"Limpet\" || cargo.name = \"Drohne\": \r\n\t\t\t{if cargo.total = 1: Eine |else: {cargo.total}} Drone{if cargo.total > 1:n} vorhanden,\r\n\t\t}\r\n\t}\r\n|else: keine Drohnen an Bord\r\n}\r\n\r\n{inventory[1].total}\r\n",
      "name": "Test 2",
      "description": "Limpets abfragen und Cargo berechnen",
      "default": false,
      "defaultValue": null
    },
    "Test 3": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ state.ship.fueltanktotalcapacity _}\r\n{_ Voice((station.name), \"Microsoft Zira Desktop\" _}\r\n\r\n{_ system.name _}\r\n\r\n{_ Preferences _}\r\n\r\n{set fullBodyReport to 0} {_ 0 for summary report, 1 for full report _}\r\n{set short_intro to 1}    {_ Set to 1 for shorter 'scan complete' speech _}\r\n\r\n{_ Context _}\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n{_ Process the event _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\r\n    {if (SecondsSince(0) - state.eddi_context_autoscantime > 8) && event.scantype = \"AutoScan\" :\r\n\t\tAuto scan abgeschlossen. {SetState('eddi_context_autoscantime', SecondsSince(0))}\r\n    }\r\n\r\n    {if fullBodyReport : {set report to F(\"Body report\")}\r\n    |else: {set report to F(\"Body report summary\")}\r\n    }\r\n\r\n    {if report || state.eddi_context_discovery_done:\r\n        {Pause(500)}\r\n        {set body to OneOf(\"Körper\", event.bodytype)}\r\n\r\n        {if short_intro = 1 :\r\n            {set reportBody to BodyDetails(event.bodyname, event.systemname)}\r\n            {OneOf(\"{OneOf('Analyse', 'Scan')} {OneOf('beendet', 'komplett', \"fertig\")}\",\r\n                   \"{body} {Occasionally(3 , P(reportBody.shortname))} gescannt\")}\r\n        |else:\r\n            {OneOf(\"Scan\", \"Analyse\", \"Scan and Analyse\")}\r\n            {Occasionally(3 , \"von {body}\")}\r\n            {OneOf(\"komplett\", \"beendet\", \"fertig\")}\r\n        }\r\n\r\n        {report}\r\n    }\r\n}",
      "name": "Test 3",
      "description": "Autoscan",
      "default": false,
      "defaultValue": null
    },
    "Test 4": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set reportbody to BodyDetails(\"LHS 289 B 3 c\", \"LHS 289\")}\r\n\r\n{set desiredmaterials to []}\r\n{for material in reportbody.materials:\r\n\t{set percent to material.percentage}\r\n\t{material.name} {percent} \r\n}\r\n",
      "name": "Test 4",
      "description": "Ansage % Materials",
      "default": false,
      "defaultValue": null
    },
    "Test 5": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set Liste to []}\r\n{for cargo in inventory:\r\n\t{if cargo.total > 0:\r\n    \t{set Liste to cat(Liste, [cargo])}\r\n    }\r\n}\r\n\r\n{for cargo in Liste:\r\n\t{cargo.total}  Tonne{if cargo.total != 1:n} {cargo.name}\r\n    {set position to position + 1}\r\n    {if position = len(Liste) - 1: und |else:,}\r\n}\r\n\r\n\r\n{_ ---------------------------------------------------------------------- _}\r\n\r\n{set Cargo_Liste to []}\r\n{for cargo in inventory:\r\n\t{if cargo.total > 0: {set Liste to cat(Cargo_Liste , [cargo])}\r\n    }\r\n}\r\n\r\n{if !cargo.total || cargo.total = \"\": keine Angabe zum Frachtraum möglich. \r\n|elif cargo.total > 0:\r\n\t\r\n\t{set position to 0}\r\n\tIm Frachtraum befinden sich\r\n\t{for cargo in Liste: \r\n\t\t{if cargo.total = 1\t: eine \r\n\t\t|else\t\t\t\t: {cargo.total}\r\n\t\t}\r\n\t\t{if cargo.name = \"Limpet\" || cargo.name = \"Drohne\" \t: Drone{if cargo.total > 1:n}\r\n    \t|else\t\t\t\t\t\t\t\t\t\t\t\t: Tonne{if cargo.total > 1:n} {cargo.name}\r\n    \t}\r\n           \r\n    \t{set position to position + 1}\r\n    \t{if position = len(Liste) - 1: und |else:,}\r\n\t}\r\n|else: Unser Frachtraum ist leer.\r\n}\r\n\r\n{_ ----------------------------------------------------------------------- -}\r\n\r\n{set Liste to []}\r\n{for cargo in inventory:\r\n\t{if cargo.total > 0:\r\n    \t{set Liste to cat(Liste, [cargo])}\r\n    }\r\n}\r\n\r\n{ for cargo in Liste:\r\n\t{cargo.total}  Tonne{ if cargo.total != 1:n} {cargo.name}\r\n    { set position to position + 1}\r\n    { if position = len(Liste) - 1: und |else:,}\r\n}\r\n\r\n{set sold_summe to sold_summe + state.eddi_context_commodity_amount * state.eddi_context_commodity_price}",
      "name": "Test 5",
      "description": "Cargo Test 2",
      "default": false,
      "defaultValue": null
    },
    "Test 6": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{SetState(\"eddi_context_system_lastvisit\", system.lastVisitSeconds)}\r\n\r\n{_ Beispiel: Station data is \"SecondsSince(station.updatedat) / 3600\" hours old. _}\r\n\r\n{if SecondsSince(state.body_rings_scanned) / 3600 > 1 : jetzt kann wieder angesagt werden\r\n}\r\n\r\n{len(SystemDetails(system).lastVisitSeconds)}.\r\n{set body to BodyDetails(event.body)}\r\n{body.mapped}\r\n\r\n\r\n{if SecondsSince(state.eddi_context_system_lastvisit) / 3600 > 1 : Test Test\r\n}\r\n\r\n\r\n\r\n{system.lastVisitSeconds}",
      "name": "Test 6",
      "description": "Ring Hotspot ansagen",
      "default": false,
      "defaultValue": null
    },
    "Test Discovery": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from Context _}\r\n{_ len(SystemDetails(state.eddi_context_system_name).bodies.alreadydiscovered)} - {_ ansagen lassen von ... _}\r\n{set reportSystem to SystemDetails(system.name)},\r\n{len(SystemDetails(system.name).bodies)} Körper im System,\r\n\r\n{for body in reportSystem.bodies:\r\n\t{if body.alreadymapped: {set alreadymapped to alreadymapped + 1}}\r\n    {if body.alreadydiscovered: {set alreadydiscovered to alreadydiscovered + 1}}\r\n    {if body.scanned: {set scannedBodies to scannedBodies + 1}}\r\n    {body.bodytype}\r\n}\r\n        \r\n{alreadymapped} kartografiert,\r\n{alreadydiscovered} entdeckt,\r\n{scannedBodies} gescannt,",
      "name": "Test Discovery",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Test Düppel, Schildzellen, Kühlkörper": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set multi to 0)}\r\n{set kanonen to 0}\r\n{set rails to 0}\r\n{set fragment to 0}\r\n{set splitter to 0}\r\n{set plasma to 0}\r\n{set minenw to 0}\r\n{set sminenw to 0}\r\n{set rampen to 0}\r\n{set pylone to 0}\r\n{set dueppelw to 0}\r\n{set punktv to 0}\r\n{set heatsinkl to 0}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n\t{if  hardpoint.module.name = \"Mehrfachgeschütz\":\t{set multi to multi + 1}\r\n\t\t{set ammo_multi to ammo_multi + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_multi', ammo_multi)}\r\n\t} \r\n\t{if  hardpoint.module.name = \"Kanone\": \t\t\t\t{set kanonen to kanonen + 1}\r\n\t\t{set ammo_kanone to ammo_kanone + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_kanone', ammo_kanone)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Schienenkanone\":\t\t{set rails to rails + 1}\r\n\t\t{set ammo_rails to ammo_rails + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_rails', ammo_rails)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Fragmentkanone\":\t\t{set fragment to fragment + 1}\r\n\t\t{set ammo_fragment to ammo_fragment + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_fragment', ammo_fragment)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Splitterkanone\":\t\t{set splitter to splitter + 1}\r\n\t\t{set ammo_splitter to ammo_splitter + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_splitter', ammo_splitter)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Plasmabeschleuniger\":\t{set plasma to plasma + 1}\r\n\t\t{set ammo_plasma to ammo_plasma + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_plasma', ammo_plasma)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Minenwerfer\":\t\t\t{set minenw to minenw + 1}\r\n\t\t{set ammo_minenw to ammo_minenw + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_minenw', ammo_minenw)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Schockminenwerfer\":\t{set sminenw to sminenw + 1}\r\n\t\t{set ammo_sminenw to ammo_sminenw + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_sminenw', ammo_sminenw)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Raketenrampe\":\t\t{set rampen to rampen + 1}\r\n\t\t{set ammo_raketen to ammo_raketen + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_raketen', ammo_raketen)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Torpedopylon\":\t\t{set pylone to pylone + 1}\r\n\t\t{set ammo_pylone to ammo_pylone + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_pylone', ammo_pylone)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Düppel-Werfer\":\t\t{set dueppelw to dueppelw  + 1}\r\n\t\t{set ammo_chaff to ammo_chaff + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_chaff', ammo_chaff)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Punktverteidigung\":\t{set punktv to punktv + 1}\r\n\t\t{set ammo_points to ammo_points + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_points', ammo_points)}\r\n\t}\r\n\t{if  hardpoint.module.name = \"Kühlkörperabwurf\":\t{set heatsinkl to heatsinkl + 1}\r\n\t\t{set ammo_heatsinks to ammo_heatsinks + hardpoint.module.ammoinhopper + hardpoint.module.ammoinclip}\r\n   \t\t{SetState('eddi_ammo_heatsinks', ammo_heatsinks)}\r\n\t}\r\n}\r\n\r\n{SetState(\"eddi_multi\", multi)}\t\t\t{_state.eddi_multi}\r\n{SetState(\"eddi_kanonen\", kanonen)} \t{_state.eddi_kanonen}\r\n{SetState(\"eddi_rails\", rails)} \t\t{_state.eddi_rails}\r\n{SetState(\"eddi_fragment\", fragment)} \t{_state.eddi_fragment}\r\n{SetState(\"eddi_splitter\", splitter)} \t{_state.eddi_splitter}\r\n{SetState(\"eddi_plasma\", plasma)} \t\t{_state.eddi_plasma}\r\n{SetState(\"eddi_minenw\", minenw)} \t\t{_state.eddi_minenw}\r\n{SetState(\"eddi_sminenw\", sminenw)} \t{_state.eddi_sminenw}\r\n{SetState(\"eddi_rampen\", rampen)} \t\t{_state.eddi_rampen}\r\n{SetState(\"eddi_pylone\", pylone)} \t\t{_state.eddi_pylone}\r\n{SetState(\"eddi_dueppelw\", dueppelw)} \t{_state.eddi_dueppelw}\r\n{SetState(\"eddi_punktv\", punktv)} \t\t{_state.eddi_punktv}\r\n{SetState(\"eddi_heatsinkl\", heatsinkl)} {_state.eddi_heatsinkl}\r\n\r\n{if state.eddi_multi: Die Mehrfachgeschütze haben {ammo_multi} Schuß zur Verfügung,\t\t\t\t\t\t{_ 90/2100 _}\r\n\t{if state.eddi_ammo_multi < multi*2190*10/100 : weniger als {multi*2190*10/100} Schuß im Magazin}}\r\n\t\r\n{if state.eddi_kanonen: Die Kanonen haben {ammo_kanone} Schuß zur Verfügung,\t\t\t\t\t\t\t{_ 5/100 _}\r\n\t{if state.eddi_ammo_kanone < kanonen*105*10/100 : weniger als {multi*2190*10/100} Schuß im Magazin}}\r\n\r\n{if state.eddi_dueppelw : Wir haben {ammo_chaff} Düppel zur Verfügung,\t\t\t\t\t\t\t\t\t{_ 1/10 _}\r\n\t{if state.eddi_ammo_chaff < dueppelw*11*10/100 : weniger als {dueppelw*11*10/100} Schuß im Magazin}}\r\n\t\r\n{if state.eddi_punktv : Die Punktverteidigung hat {ammo_points} Schuß zur Verfügung,\t\t\t\t\t{_ 12/10000 _}\r\n\t{if state.eddi_ammo_points < punktv*10012*10/100 : weniger als {punktv*10012*10/100} Schuß im Magazin}}\r\n\t\r\n{if state.eddi_heatsinkl : Der Kühlkörper Werfer hat {ammo_heatsinks} Kühlkörper zur Verfügung,\t\t\t{_ 1/2 _}\r\n\t{if state.eddi_ammo_heatsinks < 2 : wir haben nor noch einen Kühlkörper zur Verfügung}}\r\n\r\n{for hardpoint in ship.hardpoints:\t\r\n\t{if  hardpoint.module.name = \"Mehrfachgeschütz\":\r\n   \t\t\r\n\t|elif hardpoint.module.name = \"Schockkanone\":\r\n\t\t{if hardpoint.module.ammoinhopper < 240:\r\n\t\t{SetState('ammo2required', 2)}\r\n\t\t}\r\n\t|elif hardpoint.module.name = \"Punktverteidigung\":\r\n\t\t{if hardpoint.module.ammoinhopper < 10000:\r\n\t\t{SetState('ammo3required', 3)}\r\n\t\t}\r\n\t|elif hardpoint.module.name = \"Kühlkörperabwurf\":\r\n\t\t{if hardpoint.module.ammoinhopper < 2:\r\n\t\t{SetState('ammo4required', 4)}\r\n\t\t}\r\n\t|elif hardpoint.module.name = \"Düppel-Werfer\":\r\n\t\t{if hardpoint.module.ammoinhopper < 2:\r\n\t\t{SetState('ammo5required', 5)}\r\n\t\t}\r\n\t} \r\n}",
      "name": "Test Düppel, Schildzellen, Kühlkörper",
      "description": "",
      "default": false,
      "defaultValue": null
    },
    "Test gui_focus / hardpoints / compartments": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ status.gui_focus}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n\t{hardpoint.module.name},\r\n}\r\n\r\n{if status.docked = true : angedockt\r\n\t|else : nicht gedockt\r\n}\r\n\r\n{for compartment in ship.compartments:\r\n    {  if compartment.module.name = \"Standard-Landecomputer\": {SetState('dockingcomp_installed', true)}\r\n\t\t{if compartment.module.enabled\t: \r\n\t\t\t{SetState('dockingcomp_enabled', true)} Oh schön, ein Landecomputer ist installiert.}\r\n\t\t\t\r\n\t|elif compartment.module.name = \"Fortschrittlicher Landecomputer\" \r\n\t\t|| compartment.module.name = \"Advanced Docking Computer\": \r\n\t\t\t{SetState('a-dockingcomputer_installed', true)}\r\n\t\t{if compartment.module.enabled: \r\n\t\t\t{SetState('a-dockingcomputer_enabled', true)} \r\n\t\t\tWau ! Dieses Schiff verfügt über einen Start und Landecomputer, Großartig !}\r\n\t\t\t\r\n\t|elif compartment.module.name = \"Treibstoffsammler\": {SetState('fuelscoop_installed', true)}\r\n\t\t{if compartment.module.enabled\t: \r\n\t\t{SetState('fuelscoop_enabled', true)} Treibstoffsammler? Check, sehr nützlich.}\r\n\t\t\r\n\t|elif compartment.module.name = \"Fighter-Hangar\": {SetState('fighter_installed', true)}\r\n\t\t{if compartment.module.enabled\t: {SetState('fighter_enabled', true)} Ein Jäger kann uns unterstützen.}\r\n\t\t\r\n\t|elif compartment.module.name = \"Planetenfahrzeug-Hangar\": {SetState('srv_installed', true)}\r\n\t\t {if compartment.module.enabled: {SetState('srv_enabled', true)}\r\n\t\t\t{if compartment.size = 2 || compartment.size = 3: \r\n\t\t\t\tEin {OneOf(\"Bodenfahrzeug\",\"S-Arr-Vi\", \"Rover\", \"Buggy\")}, \r\n\t\t\t\t{OneOf(\"steht auch zur Verfügung\", \"ist auch mit an Bord\")},\r\n\t\t\t|elif compartment.size = 4 : Wir haben sogar zwei \r\n\t\t\t\t{OneOf(\"Bodenfahrzeuge\",\"S-Arr-Wie\", \"Rover\", \"Buggy\")} mit an Bord,\r\n\t\t\t|elif compartment.size > 4 : Es stehen mehrere \r\n\t\t\t\t{OneOf(\"Bodenfahrzeuge\",\"S-Arr-Wie\", \"Rover\", \"Buggy\")} zu Planetenerkundungen im Hangar,}\r\n\t\t\t}\r\n\t\t\t\r\n\t|elif compartment.module.name = \"Detail-Oberflächenscanner\": {SetState('dos_installed', true)}\r\n\t\t{if compartment.module.enabled\t: \r\n\t\t\t{SetState('dos_enabled', true)} und ein Detail-Oberflächenscanner ist installiert}.\r\n\t|else :\r\n\t}\r\n}",
      "name": "Test gui_focus / hardpoints / compartments",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Test Translators": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set translate to \"Agri-Medicines\"} {F(\"Translate Commodity\")}\r\n{Pause(500)} \r\n{set translate to \"Oxygen\"} {F(\"Translate Element\")}\r\n{Pause(500)} \r\n{set translate to \"Asp Explorer\"} {F(\"Translate Ship Names\")}\r\n{Pause(500)} \r\n{set translate to \"your Asp Explorer\"} {F(\"Translate Ship Names\")}\r\n{Pause(500)} \r\n{set to to 1} {set translate to \"your Asp Explorer\"} {F(\"Translate Ship Names\")}\r\n{Pause(500)} \r\n{set translate to \"Life Support\"} {F(\"Translate Ship Modules\")}\r\n{Pause(500)} \r\n{set value to round(1.56846, 1)} {F(\"Humanise ValueGer\")}\r\n{Pause(500)} \r\n{set value to 36908} {F('HuVal')}\r\n{Pause(500)}\r\n{set translate to \"J2Z-9QZ\"} {F(\"Translate FleetCarrier\")} ",
      "name": "Test Translators",
      "description": "Das Translator Script testen",
      "default": false,
      "defaultValue": null
    },
    "Test Zähler": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set Liste to [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]}\r\n{for counter in Liste:\r\n\t{counter} {Pause(200)}\r\n}",
      "name": "Test Zähler",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Testschleife body system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set anzahl_bodies to 0}\r\n{set liste_bodies to []}\r\n{set Objektwert to 20000}\r\n{for body in SystemDetails(system.name).bodies :\r\n\t{if body.estimatedvalue > Objektwert:\r\n\t\t{set anzahl_bodies to anzahl_bodies + 1}\r\n\t\t{set body_desc to : Objekt {body.shortname},{body.planettype},\r\n\t\t\t{set value to (body.estimatedvalue)} {F(\"Humanise ValueGer\")}\r\n\t\t}\r\n\t\t{set liste_bodies to cat(liste_bodies, [body_desc])}\r\n\t\t{_ Objekt body.shortname - body.planettype - body.estimatedvalue _}\r\n\t\t\r\n\t\t{if body.bodytype = \"Stern\": \r\n\t\t\t{_ if body.scanned : Stern gescannt}\r\n\t\t\t{_ if body.mapped : Stern gemeppt}\r\n\t\t\t{_ if body.alreadydiscovered && body.scanned : System von Kommandanten entdeckt}\r\n\t\t\t{_ if body.alreadydiscovered && !body.scanned : System von Anfang an entdeckt}\r\n\t\t\t{_ if body.alreadymapped: Stern kartografiert}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n{ if anzahl_bodies = 0  : Kein lohnendes Objekt\r\n|elif anzahl_bodies = 1 : Ein lohnendes Objekt\r\n|else: {anzahl_bodies} lohnende Objekte\r\n} zum Kartographieren für über {Objektwert} credditts gefunden.\r\n\r\n{List(liste_bodies)}\r\n",
      "name": "Testschleife body system",
      "description": "Scan  lohnenswert ?",
      "default": false,
      "defaultValue": null
    },
    "Testschleife Waffen/Munition": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for hardpoint in ship.hardpoints:\r\n   {if hardpoint.module.name = \"Mehrfachgeschütz\": {hardpoint.module.ammoinhopper}} \r\n}\r\n\r\n{set fighterhangar to false} {dump fighterhangar}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.name = \"Fighter-Hangar\" : {set fighterhangar to true}\r\n    }\r\n}\r\n{if fighterhangar = true:\r\n\tZur Erinnerung: Wir müssen ein Besatzungsmitglied in den aktiven Dienst stellen.\r\n}\r\n\r\n{_ for compartment in ship.compartments: compartment.module.name} {_ bei \"Slot\" im Namen _}\r\n\r\n{for hardpoint in ship.hardpoints: \r\n\t{if hardpoint.module.name = \"Kühlkörperabwurf\": Treffer {set Werfer to Werfer + 1}}\r\n\t{set muni to hardpoint.module.ammoinclip}\r\n}\r\nAnzahl Kühlkörperwerfer gleich {Werfer} und {muni}\r\n\r\n{_ ship.hardpoints[1].module.name}\r\n\r\n{_ ship.compartments[1].module.name}\r\n\r\n{_ for bulkhead in ship.bulkheads: bulkhead.module.name}\r\n\r\n",
      "name": "Testschleife Waffen/Munition",
      "description": null,
      "default": false,
      "defaultValue": null
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Touchdown\")}\r\n\r\n{_ Skript von CMDR Melbar Kaasom [EOT] angepasst _}\r\n\r\n{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{set srv_count to 0}\r\n\r\n{for launchbay in ship.launchbays:\r\n\t{for vehicle in launchbay.vehicles:\r\n\t\t{if launchbay.type = \"SRV\": {SetState('srv_installed', true)}\r\n            \t\t\t\t\t\t{SetState('srv_enabled', true)}\r\n                    \t\t\t\t{set srv_count to srv_count + 1}\r\n        }\r\n    {Pause(100)}\r\n    }\r\n}\r\n\r\n{if event.playercontrolled = true: Tatsch daun\r\n\t{if body.name: auf {body.name}},.\r\n\t{OneOf(\"Motoren\",\"Triebwerke\",\"Antrieb\")} {OneOf(\"Offline\",\"deaktiviert\",\"heruntergefahren\")}.\r\n\t\r\n\t{Pause(1000)}\r\n\t\r\n\t{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" :\r\n   \t\t{OneOf(\"Wir sind bei folgenden Koordinaten gelandet:\",\"Die Koordinaten \\{OneOf(\\\"sind:\\\",\\\"lauten:\\\")\\}\")} \r\n   \t\t{round(event.latitude, 2)} Grad Breite, {round(event.longitude, 2)} Grad Länge.\r\n\t}\r\n\t\r\n\t{  if srv_count = 0\t: Es ist kein Bodenfahrzeug an Bord.\r\n\t|elif srv_count = 1\t: Wir haben ein Bodenfahrzeug an Bord.\r\n\t|elif srv_count = 2\t: Für Planetenerkundungen sind zwei Bodenfahrzeuge an Bord.\r\n\t|elif srv_count > 2 : Wir haben mehrere Bodenfahrzeuge zur Planetenerkundung an Bord.\r\n\t}\r\n\t{if state.srv_installed && state.srv_enabled\t: Bodenfahrzeug bereit {Occasionally(2, \"zum absetzen\")}.\r\n\t|elif state.srv_installed\t\t\t\t\t\t: Für eine Exkursion aktivieren Sie bitte zunächst den Fahrzeug Hangar.\r\n\t|else\t\t\t\t\t\t\t\t\t\t\t: Es ist kein Fahrzeug Hangar installiert.\r\n\t}\r\n|elif event.playercontrolled = false: {OneOf(\"Das Schiff steht für Sie bereit\", \"{ShipName()} ist gelandet\")} \r\n}\r\n\r\n{_\r\n- longitude \t\t\tThe longitude from where the ship has touched down\r\n- latitude \t\t\t\tThe latitude from where the ship has touched down\r\n- playercontrolled \t\tTrue if the ship is controlled by the player\r\n- nearestdestination \tThe nearest location from where the ship has touched down\r\n_}",
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface",
      "default": false,
      "defaultValue": "{_ Touchdown _}\r\n{_ Triggered when your ship touches down on a planet's surface _}\r\n\r\n\r\n{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{if event.playercontrolled = true && state.eddi_context_last_subject != 'location':\r\n  Touchdown \r\n  {if body.name: on {P(body.name, \"body\")} }.\r\n|else:\r\n  {ShipName()} has touched down\r\n  {if body.name: on {P(body.name, \"body\")} }.\r\n}\r\n\r\n{Pause(2000)}\r\n\r\n{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" :\r\n   Coordinates are  {round(event.latitude, 2)} degrees latitude, {round(event.longitude, 2)} degrees longitude.\r\n}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'land')}\r\n"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Trade data purchased\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\nHandelsdaten zum Preis von {event.price} credditts\r\n{OneOf(\"für das System {P(event.system)} gekauft\",\r\n       \"für das System {P(event.system)} sind jetzt verfügbar\",\r\n       \"für das System {P(event.system)} bestätigt\",\r\n       \"von den Stationsdiensten für das System {P(event.system)} empfangen\")}.\r\n\r\n{_\r\n- system  The system for which trade data was purchased\r\n- price   The price of the purchase\r\n_}",
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Purchased trade data for {P(event.system, 'starsystem')}\",\r\n            \"Trade data for {P(event.system, 'starsystem')} now available\",\r\n            \"Received trade data for {P(event.system, 'starsystem')} from station services\",\r\n            \"Receipt of {P(event.system, 'starsystem')} trade data confirmed\")}."
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Trade promotion\")}\r\n\r\nGlückwunsch {F(\"Honorific\")} {cmdr.name}.\r\nSie wurden auf Grund Ihres {OneOf(\"guten\", \"ausgezeichneten\", \"hervorragenden\")} Handels Geschicks auf den\r\nRang eines {set TradeRank to cmdr.traderating.rank + 1} {F(\"Honorific\")} befördert.\r\n\r\n{_ cmdr.traderating.rank}\r\n\r\n{_ - rating \tThe commander's new trade rating _}",
      "name": "Trade promotion",
      "description": "Triggered when your trade rank increases",
      "default": false,
      "defaultValue": "You have been recognised for your trading ability, {F(\"Honorific\")}."
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Trade voucher redeemed\")}\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\n{OneOf(\"Handels-\", \"Verkaufs-\")}Gutscheine über {Humanise(event.amount)} credditts\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n  \tvon {set from to : \"\"}\r\n    {set translate to (event.rewards[0].faction)} {F('Translate Power')}\r\n  |else:\r\n    von\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0 :\r\n        |elif cur < len(event.rewards) - 1 : , \r\n        |else: und\r\n        }\r\n        {set translate to (event.rewards[0].faction)} {F('Translate Power')}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}\r\n{OneOf(\"eingelöst\", \"abgerufen\", \"gurt schreiben lassen\", \"abgerechnet\")}.\r\n\r\n{_\r\n- rewards\t\t\tThe rewards obtained broken down by faction\r\n- amount \t\t\tThe amount rewarded (after any broker fees)\r\n- brokerpercentage \tBroker precentage fee (if paid via a Broker)\r\n_}\r\n",
      "name": "Trade voucher redeemed",
      "description": "Triggered when you redeem a trade voucher",
      "default": false,
      "defaultValue": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nTrade vouchers for {Humanise(event.amount)} credits redeemed\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    by {P(event.rewards[0].faction, \"faction\")}\r\n  |else:\r\n    by\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            and\r\n        }\r\n        {P(event.rewards[cur].faction, \"faction\")}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n"
    },
    "Translate Attributes": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to \"Very common\"}\r\n\r\n{set Translation to []}\r\n\r\n{  if translate = \"Very common\" : {set Translation to \"sehr häufig\"}\r\n|elif translate = \"Common\"      : {set Translation to \"häufig\"}\r\n|elif translate = \"Standard\"    : {set Translation to \"standard\"}\r\n|elif translate = \"Rare\"        : {set Translation to \"selten\"}\r\n|elif translate = \"Very rare\"   : {set Translation to \"sehr selten\"}\r\n}\r\n\r\n{if Translation: {Translation} |else: {translate}}\r\n",
      "name": "Translate Attributes",
      "description": "übersetzt Eigenschaften vom englischen ins deutsche",
      "default": false,
      "defaultValue": null
    },
    "Translate Commodity": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to  \"Fabrikatoren\"}\r\n\r\n{  if translate = \"Antimony\"   : Anti mon     \r\n|elif translate = \"Argon\"      : Argon        \r\n|elif translate = \"Arsenic\"    : Arsen        \r\n|elif translate = \"Barium\"     : Barium       \r\n|elif translate = \"Bismuth\"    : Bismut       \r\n|elif translate = \"Boron\"      : Bor          \r\n|elif translate = \"Bromellite\" : Bromellit    \r\n|elif translate = \"Bromine\"    : Brom         \r\n|elif translate = \"Cadmium\"    : Kattmium     \r\n|elif translate = \"Calcium\"    : Calcium      \r\n|elif translate = \"Carbon\"     : Kohlenstoff  \r\n|elif translate = \"Cesium\"     : Caesium      \r\n|elif translate = \"Chlorine\"   : Chlor        \r\n|elif translate = \"Chrome\"     : Chrom        \r\n|elif translate = \"Chromium\"   : Chrom        \r\n|elif translate = \"Dysprosium\" : Dysprosium   \r\n|elif translate = \"Erbium\"     : Erbium       \r\n|elif translate = \"Europium\"   : Europium     \r\n|elif translate = \"Fluorine\"   : Fluor        \r\n|elif translate = \"Gadolinium\" : Gadolinium   \r\n|elif translate = \"Germanium\"  : Germanium    \r\n|elif translate = \"Helium\"     : Helium       \r\n|elif translate = \"Holmium\"    : Holmium      \r\n|elif translate = \"Hydrogen\"   : Wasserstoff  \r\n|elif translate = \"Iodine\"     : Jod          \r\n|elif translate = \"Iridium\"    : Iridium      \r\n|elif translate = \"Iron\"       : Eisen        \r\n|elif translate = \"Krypton\"    : Kryptonn     \r\n|elif translate = \"Lead\"       : Blei         \r\n|elif translate = \"Lutetium\"   : Luttetsium   \r\n|elif translate = \"Magnesium\"  : Magnesium    \r\n|elif translate = \"Manganese\"  : Mahn gahn    \r\n|elif translate = \"Mercury\"    : Quecksilber  \r\n|elif translate = \"Molybdenum\" : Molyb dehn\r\n|elif translate = \"Molibdän\"   : Molyb dehn\r\n|elif translate = \"Neodymium\"  : Neodym       \r\n|elif translate = \"Neon\"       : Neon         \r\n|elif translate = \"Nickel\"     : Nickel       \r\n|elif translate = \"Niobium\"    : Niob         \r\n|elif translate = \"Nitrogen\"   : Stickstoff   \r\n|elif translate = \"Oxygen\"     : Sauerstoff   \r\n|elif translate = \"Phosphorus\" : Phosphor     \r\n|elif translate = \"Polonium\"   : Polohnium    \r\n|elif translate = \"Potassium\"  : Kalium       \r\n|elif translate = \"Promethium\" : Prometsium   \r\n|elif translate = \"Rhenium\"    : Rhenium      \r\n|elif translate = \"Rubidium\"   : Rubidium     \r\n|elif translate = \"Ruthenium\"  : Ruthenium    \r\n|elif translate = \"Scandium\"   : Skandium     \r\n|elif translate = \"Selenium\"   : Seeleen\r\n|elif translate = \"Silicon\"    : Silicium     \r\n|elif translate = \"Sodium\"     : Natrium      \r\n|elif translate = \"Strontium\"  : Strontium    \r\n|elif translate = \"Sulphur\"    : Schwefel\r\n|elif translate = \"Tantalum\"   : Tanntahl\r\n|elif translate = \"Tantal\"     : Tanntahl\r\n|elif translate = \"Technetium\" : Techneetsium \r\n|elif translate = \"Tellurium\"  : Tellur       \r\n|elif translate = \"Terbium\"    : Terbium      \r\n|elif translate = \"Tin\"        : Zinn\r\n|elif translate = \"Tritium\"\t   : Tritium\r\n|elif translate = \"Tungsten\"   : Wolfram      \r\n|elif translate = \"Vanadium\"   : Vanadium     \r\n|elif translate = \"Xenon\"      : Xenon        \r\n|elif translate = \"Ytterbium\"  : Ytterbiumm   \r\n|elif translate = \"Yttrium\"    : Yttriumm     \r\n|elif translate = \"Zinc\"       : Zink         \r\n|elif translate = \"Zirconium\"  : Zirkonium    \r\n|elif translate = \"Anormal kompakten Emissionsdaten\"     : Anormal kompakten Emissions daten\r\n|elif translate = \"FSA-Daten-Cache-Ausnahmen\"\t\t\t : FSA Dahten Cesch Ausnahmen\r\n|elif translate = \"Fortschr. Katalysatoren\"              : Fortschrittliche Katalysatoren       \r\n|elif translate = \"AI Relikte\"                           : K.I. Relikte                         \r\n|elif translate = \"Altairianische Haut\"                  : Altairi ahnische Haut                \r\n|elif translate = \"Antike Sprachdaten\"                   : Antike Sprach daten                  \r\n|elif translate = \"Anduliga Feuerwerk\"                   : Andu liga Feuerwerk                  \r\n|elif translate = \"Antimaterie-Eindämmungs-Einheit\"      : Anti materie-Eindämmungs-Einheit     \r\n|elif translate = \"Aquaponiksysteme\"                     : Aquaponik Systeme                    \r\n|elif translate = \"Atmosphärenprozessoren\"               : Atmosphären Proze ssohren\r\n|elif translate = \"Agri-Medicines\"\t\t                 : Agrar Medikamente\r\n|elif translate = \"Tiermedizin\"\t\t\t                 : Agrar Medikamente\r\n|elif translate = \"Fabrikatoren\"                         : Fabrika toren                        \r\n|elif translate = \"Bast Schlange Gin\"                    : Bast Schlangen Gin                   \r\n|elif translate = \"Bertrandit\"                           : Berrtrandit                          \r\n|elif translate = \"Biotech-Leiter\"                       : Biotech Leiter\r\n|elif translate = \"BiotechConductors\"\t\t\t\t\t : Biotech Leiter\r\n|elif translate = \"Azure Milch\"                          : Azurblaue Milch                      \r\n|elif translate = \"Borasetani Pathogenetik\"              : Borasetani Patho genetik             \r\n|elif translate = \"Baufabrikatoren\"                      : Bau fabrika toren                     \r\n|elif translate = \"Centauri Mega Gin\"                    : Centauri Meegaa Gin                  \r\n|elif translate = \"Chemische Prozessoren\"                : Chemische Proze ssoren               \r\n|elif translate = \"Chemische Lagereinheiten\"             : Chemische Lager einheiten            \r\n|elif translate = \"Werbeproben\"                          : Werbe proben                         \r\n|elif translate = \"Leitfähige Polymere\"                  : Leitfähige Poly mehre                \r\n|elif translate = \"Unterhaltungselektronik\"              : Unterhaltungs Elektronik             \r\n|elif translate = \"Geknackte Industrielle Firmware\"      : Geknackte Industrie elle Förmwaer    \r\n|elif translate = \"Kryolith\"                             : Krüh olieth                          \r\n|elif translate = \"Kristallkugeln\"                       : Kristal kugeln                        \r\n|elif translate = \"Dekodierte Emissionsdaten\"            : Dehkodierte Emissionsdaten           \r\n|elif translate = \"Deuringas Trüffel\"                    : Deurin gaas Trüffel                  \r\n|elif translate = \"Haushaltsgeräte\"                      : Haushalts geräte                     \r\n|elif translate = \"Erdrelikte\"                           : Ehrdrelikte                          \r\n|elif translate = \"Exzentrische Hyperraum Trajektorie\"   : Exzentrische Hyperraum Trajektohrie  \r\n|elif translate = \"Elektrochemische Arrays\"              : Elektro chemische Arrays             \r\n|elif translate = \"Ethgreze Teeknospen\"                  : Esgries Teeknospen                   \r\n|elif translate = \"Experimentelle Chemikalien\"           : Experimentelle Chemie kalien         \r\n|elif translate = \"Fossile Überreste\"                    : Fossile Über reste                   \r\n|elif translate = \"Hafnium 178\"                          : Haffnium 178\r\n|elif translate = \"Hybridkondensatoren\"                  : Hybridkondensatoren\r\n|elif translate = \"Kühlkörperverbinder\"                  : Kühlkörper ver binder                \r\n|elif translate = \"Heliostatische Öfen\"                  : Heliostatische Öhfen                 \r\n|elif translate = \"HIP Organophosphat\"                   : HIP Orgaa no Phosphat                \r\n|elif translate = \"HIP Proto-Tintenfisch\"                : HIP Proo toh Tintenfisch             \r\n|elif translate = \"Holva Duellierklingen\"                : Holva Duellier klingen               \r\n|elif translate = \"Ehrlichkeitspillen\"                   : Ehrlichkeits pillen                  \r\n|elif translate = \"Isoliermembran\"                       : Isolier membrane                     \r\n|elif translate = \"Jadeit\"                               : Jade iet                             \r\n|elif translate = \"Jaradharre Puzzelkiste\"               : Jaradharre Pusselkiste               \r\n|elif translate = \"Landminen\"                            : Landmienen                           \r\n|elif translate = \"Großer Erkundungsdatenspeicher\"       : Großer Erkundungsdaten speicher      \r\n|elif translate = \"Lithium\"                              : Lietsium                             \r\n|elif translate = \"Lithiumhydroxid\"                      : Lietsium hydroxid                    \r\n|elif translate = \"Magnetische Emitterspule\"             : Magnetische Emitter spule            \r\n|elif translate = \"Mechucos Hochlandtee\"                 : Mechucos Hochland tee                \r\n|elif translate = \"Meta-Legierungen\"                     : Meetaa Legierungen                   \r\n|elif translate = \"Methanklathrat\"                       : Methan klathrat                      \r\n|elif translate = \"Mikrobielle Öfen\"                     : Mikrobielle Öhfen                    \r\n|elif translate = \"Mikrocontroller\"                      : Mikrocon troler                      \r\n|elif translate = \"Mineralextraktoren\"                   : Mineral ex traktoren                \r\n|elif translate = \"Erdöl\"                                : Ehrd öl                              \r\n|elif translate = \"Modifizierte Firmware für Verbraucher\": Modifizierte Förmwaer für Verbraucher\r\n|elif translate = \"Modifizierte Embedded Firmware\"       : Modifizierte Embedded Förmwaer       \r\n|elif translate = \"Modulterminals\"                       : Modulterminals              \r\n|elif translate = \"Mukusubii Chitin-Os\"                  : Mukusu bie Schietien O S             \r\n|elif translate = \"Nanozertrümmerer\"                     : Nah noh zertrümmerer                 \r\n|elif translate = \"Neogewebe-Isolierung\"                 : Neo gewebe Isolierung                \r\n|elif translate = \"Nichttödliche Waffen\"                 : Nicht tödliche Waffen                \r\n|elif translate = \"Besetzte Cryokapsel\"                  : Besetzte Crüho kapsel                \r\n|elif translate = \"Ochoeng Peperoni\"                     : Ocho eng Pepe roni                   \r\n|elif translate = \"Schädliches Orrerian Gebräu\"          : Schädliches Orr eriahn Gebräu        \r\n|elif translate = \"Eigenartige Schildfrequenzdaten\"      : Eigenartige Schildfrequenz daten     \r\n|elif translate = \"Polymerkondensatoren\"                 : Poly mer kondensatoren               \r\n|elif translate = \"Polymere\"                             : Poly mehre                           \r\n|elif translate = \"Rajukru Multi-Öfen\"                   : Raju kru Multie Öfen                 \r\n|elif translate = \"Rajukru Multi-Öfen\"                   : Raju kru Multie Öfen                 \r\n|elif translate = \"Rapa Bao Schlangenhäute\"              : Rapa Bahoh Schlangenhäute            \r\n|elif translate = \"Rebellen Transmissionen\"              : Raebaellen Transmissionen            \r\n|elif translate = \"Republik Garnisonszubehör\"            : Republikanische Garnisonszubehör     \r\n|elif translate = \"Samarium\"                             : Sahmarium                            \r\n|elif translate = \"Sicherheits-Firmware-Patch\"           : Sicherheits Förmwaer Patch           \r\n|elif translate = \"Schildemitter\"                        : Schild emitter                       \r\n|elif translate = \"Spezialisierte Legacy Firmware\"       : Spezialisierte Legacy Förmwaer       \r\n|elif translate = \"Seltsame Sogwolkenscandaten\"          : Seltsame Sogwolkenscan daten         \r\n|elif translate = \"Strukturregulatoren\"                  : Struktur regulatoren\r\n|elif translate = \"Supraleiter\"                          : Supra Leiter                 \r\n|elif translate = \"Überlebensausrüstung\"                 : Überlebens ausrüstung                \r\n|elif translate = \"Taaffeite\"                            : Taaffeit                             \r\n|elif translate = \"Aufklärungsdaten\"                     : Aufklärungs daten                    \r\n|elif translate = \"Thallium\"                             : Tha llium                            \r\n|elif translate = \"Thermal-Kühleinheiten\"                : Thermal Kühl einheiten               \r\n|elif translate = \"Thorium\"                              : Thohrium                             \r\n|elif translate = \"Tabak\"                                : Thabak\r\n|elif translate = \"Tierfleisch\"                          : Fleisch von Tieren     \r\n|elif translate = \"Toxandij Verozid\"                     : Toxandie Ve rozid                    \r\n|elif translate = \"Unerwartete Emissionsdaten\"           : Unerwartete Emissions daten          \r\n|elif translate = \"Unidentifizierte Scan-Archive\"        : Un identifizierte Scan Archive       \r\n|elif translate = \"Experimentelle Chemikalien\"           : Experimentelle Chemie kalien         \r\n|elif translate = \"Handelsdaten\"                         : Handels daten                        \r\n|elif translate = \"Uszaianisches Baumgras\"               : Uszai anisches Baum gras             \r\n|elif translate = \"Vanayequinisches Nashorn-Fell\"        : Vanaye quinisches Nashorn-Fell       \r\n|elif translate = \"Veganisches Schlankheitskraut\"        : Vegaanische Schlankheitskraut        \r\n|elif translate = \"Vidavanische Spitze \"                 : Vidavantiaanische Spitze             \r\n|elif translate = \"Wheemete Weizenkekse\"                 : Wheemete Weizen keekse               \r\n|elif translate = \"Witchhaul Kobe-Rindfleisch\"           : Witch hohl Kob Rindfleisch           \r\n|elif translate = \"Wolf Fesh\"                            : Wulf Fesch\r\n|elif translate = \"Tieftemperaturdiamanten\"\t\t\t\t : Diamanten\r\n|elif translate = \"LowTemperatureDiamond\"\t\t\t\t : Diamanten\r\n|elif translate = \"Niedrigtemperatur Diamanten\"\t\t\t : Diamanten\r\n|elif translate = \"Niedertemperatur Diamanten\"\t\t\t : Diamanten\r\n|elif translate = \"Leere Opale\"\t\t\t\t\t\t\t : Opale\r\n|elif translate = \"Leerenopal\"\t\t\t\t\t\t\t : Opale\r\n|else           \t\t\t\t\t\t\t\t\t\t : {translate}\r\n}",
      "name": "Translate Commodity",
      "description": "übersetzt die englischen Warenbezeichnugen ins Deutsche",
      "default": false,
      "defaultValue": null
    },
    "Translate Component": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to \"Basic Conductors\"}\r\n\r\n{set Translation to []}\r\n\r\n{  if translate = \"Basic Conductors\"               : {set Translation to \"Einfache Leiter\"}\r\n|elif translate = \"Biotech Conductors\"             : {set Translation to \"Biotech Leiter\"}\r\n|elif translate = \"Chemical Distillery\"            : {set Translation to \"Chemiedestillerie\"}\r\n|elif translate = \"Chemical Manipulators\"          : {set Translation to \"Chemische Manipulatoren\"}\r\n|elif translate = \"Chemical Processors\"            : {set Translation to \"Chemische Prozessoren\"}\r\n|elif translate = \"Chemical Storage Units\"         : {set Translation to \"Chemische Speichereinheiten\"}\r\n|elif translate = \"Compact Composites\"             : {set Translation to \"Verbundwerkstoff\"}\r\n|elif translate = \"Compound Shielding\"             : {set Translation to \"Verbundschilde\"}\r\n|elif translate = \"Conductive Ceramics\"            : {set Translation to \"Elektrokeramiken\"}\r\n|elif translate = \"Conductive Components\"          : {set Translation to \"Leitfähige Komponenten\"}\r\n|elif translate = \"Conductive Polymers\"            : {set Translation to \"Leitfähige Ploymere\"}\r\n|elif translate = \"Configurable Components\"        : {set Translation to \"Konfigurierbare Komponenten\"}\r\n|elif translate = \"Core Dynamics Composites\"       : {set Translation to \"Core Dynamics Kompositwerkstoffe\"}\r\n|elif translate = \"Crystal Shards\"                 : {set Translation to \"Kristallsplitter\"}\r\n|elif translate = \"Electrochemical Arrays\"         : {set Translation to \"Elektrochemische Detektoren\"}\r\n|elif translate = \"Exquisite Focus Crystals\"       : {set Translation to \"Erlesene Laserkristalle\"}\r\n|elif translate = \"Filament Composites\"            : {set Translation to \"Filament-Komposite\"}\r\n|elif translate = \"Flawed Focus Crystals\"          : {set Translation to \"Fehlerhafte Fokuskristalle\"}\r\n|elif translate = \"Focus Crystals\"                 : {set Translation to \"Laserkristalle\"}\r\n|elif translate = \"Galvanising Alloys\"             : {set Translation to \"Galvanisierende Legierungen\"}\r\n|elif translate = \"Grid Resistors\"                 : {set Translation to \"Gitterwiderstände\"}\r\n|elif translate = \"Heat Conduction Wiring\"         : {set Translation to \"Wärmeleitungsverdrahtung\"}\r\n|elif translate = \"Heat Dispersion Plate\"          : {set Translation to \"Wärmeverteilungsplatte\"}\r\n|elif translate = \"Heat Exchangers\"                : {set Translation to \"Wärmeaustauscher\"}\r\n|elif translate = \"Heat Resistant Ceramics\"        : {set Translation to \"Hitzebeständige Keramik\"}\r\n|elif translate = \"Heat Vanes\"                     : {set Translation to \"Wärmeleitbleche\"}\r\n|elif translate = \"High Density Composites\"        : {set Translation to \"Komposite hoher Dichte\"}\r\n|elif translate = \"Hybrid Capacitors\"              : {set Translation to \"Hybridkondensatoren\"}\r\n|elif translate = \"Imperial Shielding\"             : {set Translation to \"Imperiale Schilde\"}\r\n|elif translate = \"Improvised Components\"          : {set Translation to \"Behelfskomponenten\"}\r\n|elif translate = \"Mechanical Components\"          : {set Translation to \"Mechanische Komponenten\"}\r\n|elif translate = \"Mechanical Equipment\"           : {set Translation to \"Mechanisches Equipment\"}\r\n|elif translate = \"Mechanical Scrap\"               : {set Translation to \"Mechanischer Schrott\"}\r\n|elif translate = \"Military Grade Alloys\"          : {set Translation to \"Militärqualitätslegierung\"}\r\n|elif translate = \"Military Supercapacitors\"       : {set Translation to \"Militärische Superkondensatoren\"}\r\n|elif translate = \"Pharmaceutical Isolators\"       : {set Translation to \"Pharmazeutische Isolatoren\"}\r\n|elif translate = \"Phase Alloys\"                   : {set Translation to \"Phasenlegierungen\"}\r\n|elif translate = \"Polymer Capacitors\"             : {set Translation to \"Polymerkondensatoren\"}\r\n|elif translate = \"Precipitated Alloys\"            : {set Translation to \"Vergütete Legierungen\"}\r\n|elif translate = \"Proprietary Composites\"         : {set Translation to \"Kompositwerkstoffe\"}\r\n|elif translate = \"Proto Heat Radiators\"           : {set Translation to \"Proto-Wärmestrahler\"}\r\n|elif translate = \"Proto Light Alloys\"             : {set Translation to \"Leicht Legierung (Proto)\"}\r\n|elif translate = \"Proto Radiolic Alloys\"          : {set Translation to \"Radiologische Legierung (Proto)\"}\r\n|elif translate = \"Refined Focus Crystals\"         : {set Translation to \"Raffinierte Laserkristalle\"}\r\n|elif translate = \"Salvaged Alloys\"                : {set Translation to \"Geborgene Legierungen\"}\r\n|elif translate = \"Shield Emitters\"                : {set Translation to \"Schildemitter\"}\r\n|elif translate = \"Shielding Sensors\"              : {set Translation to \"Schildsensoren\"}\r\n|elif translate = \"Tempered Alloys\"                : {set Translation to \"Gehärtete Legierungen\"}\r\n|elif translate = \"Thermic Alloys\"                 : {set Translation to \"Thermit-Legierungen\"}\r\n|elif translate = \"Unknown Fragment\"               : {set Translation to \"Unbekanntes Fragment\"}\r\n|elif translate = \"Worn Shield Emitters\"           : {set Translation to \"Gebrauchte Schildemitter\"}\r\n}\r\n\r\n{if Translation: {Translation} |else: {translate}}",
      "name": "Translate Component",
      "description": "übersetzt hergestellte Komponenten von englisch auf deutsch",
      "default": false,
      "defaultValue": null
    },
    "Translate Data": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to \"Inconsistent Shield Soak Analysis\"}\r\n\r\n{set Translation to []}\r\n\r\n{  if translate = \"Aberrant Shield Pattern Analysis\"      : {set Translation to \"Abweichende SchildeinsatzAnalysen\"}\r\n|elif translate = \"Abnormal Compact Emission Data\"        : {set Translation to \"Anormale kompakte Emissionsdaten\"}\r\n|elif translate = \"Adaptive Encryptors Capture\"           : {set Translation to \"Adaptive Verschlüsselungserfassung\"}\r\n|elif translate = \"Anomalous Bulk Scan Data\"              : {set Translation to \"Anormale Massen-Scan-Daten\"}\r\n|elif translate = \"Anomalous FSD Telemetry\"               : {set Translation to \"Anormale FSA-Telemetrie\"}\r\n|elif translate = \"Atypical Disrupted Wake Echoes\"        : {set Translation to \"Atypische FSA-Stör-Aufzeichnungen\"}\r\n|elif translate = \"Atypical Encryption Archives\"          : {set Translation to \"Atypische Verschlüsselungsarchive\"}\r\n|elif translate = \"Classified Scan Databanks\"             : {set Translation to \"Scandatenbank unter Verschluss\"}\r\n|elif translate = \"Classified Scan Fragment\"              : {set Translation to \"Geheimes Scan Fragment\"}\r\n|elif translate = \"Cracked Industrial Firmware\"           : {set Translation to \"Gecrackte Industrie-Firmware\"}\r\n|elif translate = \"Datamined Wake Exceptions\"             : {set Translation to \"FSA Dahten Cesch Ausnahmen\"}\r\n|elif translate = \"FSA-Daten-Cache-Ausnahmen\"             : {set Translation to \"FSA Dahten Cesch Ausnahmen\"}\r\n|elif translate = \"Decoded Emission Data\"                 : {set Translation to \"Entschlüsselte Emissionsdaten\"}\r\n|elif translate = \"Distorted Shield Cycle Recordings\"     : {set Translation to \"Gestörte-Schildzyklus-Aufzeichnung\"}\r\n|elif translate = \"Divergent Scan Data\"                   : {set Translation to \"Divergente Scandaten\"}\r\n|elif translate = \"Eccentric Hyperspace Trajectories\"     : {set Translation to \"Exzentrische Hyperraumrouten\"}\r\n|elif translate = \"Exceptional Scrambled Emission Data\"   : {set Translation to \"Außergewöhnliche verschlüsselte Emissionsdaten\"}\r\n|elif translate = \"Inconsistent Shield Soak Analysis\"     : {set Translation to \"Inkonsistente Schildleistungsanalyse\"}\r\n|elif translate = \"Irregular Emission Data\"               : {set Translation to \"Irreguläre Emissionsdaten\"}\r\n|elif translate = \"Modified Consumer Firmware\"            : {set Translation to \"Modifizierte Consumer Firmware\"}\r\n|elif translate = \"Modified Embedded Firmware\"            : {set Translation to \"Modifizierte integrierte Firmware\"}\r\n|elif translate = \"Open Symmetric Keys\"                   : {set Translation to \"Offene symetrische Schlüssel\"}\r\n|elif translate = \"Peculiar Shield Frequency Data\"        : {set Translation to \"Verdächtige Schildfrequenz-Daten\"}\r\n|elif translate = \"Security Firmware Patch\"               : {set Translation to \"Sicherheits-Firmware-Patch\"}\r\n|elif translate = \"Specialised Legacy Firmware\"           : {set Translation to \"Spezial Legacy Firmware\"}\r\n|elif translate = \"Strange Wake Solutions\"                : {set Translation to \"Seltsame FSA-Zielorte\"}\r\n|elif translate = \"Tagged Encryption Codes\"               : {set Translation to \"Getaggte Verschlüsselungscodes\"}\r\n|elif translate = \"Unexpected Emission Data\"              : {set Translation to \"Unerwartete Emissionsdaten\"}\r\n|elif translate = \"Unidentified Scan Archives\"            : {set Translation to \"Unidentifizierte Scan-Archive\"}\r\n|elif translate = \"Untypical Shield Scans\"                : {set Translation to \"Untypische Schildscans\"}\r\n|elif translate = \"Unusual Encrypted Files\"               : {set Translation to \"Ungewöhnliche verschlüsselte Files\"}\r\n}\r\n\r\n{if Translation: {Translation} |else: {translate}}\r\n",
      "name": "Translate Data",
      "description": "übersetzt die englischen Datenbezeichnungen ins deutsche",
      "default": false,
      "defaultValue": null
    },
    "Translate Element": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to \"Copper\"}\r\n\r\n{set Translation to []}\r\n\r\n{  if translate = \"Aluminum\"     : {set Translation to \"Aluminium\"}\r\n|elif translate = \"Antimony\"     : {set Translation to \"Anti mon\"}\r\n|elif translate = \"Argon\"        : {set Translation to \"Argon\"}\r\n|elif translate = \"Arsenic\"      : {set Translation to \"Arsen\"}\r\n|elif translate = \"Barium\"       : {set Translation to \"Barium\"}\r\n|elif translate = \"Beryllium\"    : {set Translation to \"Beryllium\"}\r\n|elif translate = \"Bismuth\"      : {set Translation to \"Bismut\"}\r\n|elif translate = \"Boron\"        : {set Translation to \"Bor\"}\r\n|elif translate = \"Bromine\"      : {set Translation to \"Brom\"}\r\n|elif translate = \"Cadmium\"      : {set Translation to \"Kattmium\"}\r\n|elif translate = \"Calcium\"      : {set Translation to \"Kalzium\"}\r\n|elif translate = \"Carbon\"       : {set Translation to \"Kohlenstoff\"}\r\n|elif translate = \"Cerium\"       : {set Translation to \"Cer\"}\r\n|elif translate = \"Cesium\"       : {set Translation to \"Caesium\"}\r\n|elif translate = \"Chlorine\"     : {set Translation to \"Chlor\"}\r\n|elif translate = \"Chrome\"       : {set Translation to \"Chrom\"}\r\n|elif translate = \"Cobalt\"       : {set Translation to \"Kobalt\"}\r\n|elif translate = \"Copper\"       : {set Translation to \"Kupfer\"}\r\n|elif translate = \"Dysprosium\"   : {set Translation to \"Dysprosium\"}\r\n|elif translate = \"Erbium\"       : {set Translation to \"Erbium\"}\r\n|elif translate = \"Europium\"     : {set Translation to \"Europium\"}\r\n|elif translate = \"Fluorine\"     : {set Translation to \"Fluor\"}\r\n|elif translate = \"Gadolinium\"   : {set Translation to \"Gadolinium\"}\r\n|elif translate = \"Gallium\"      : {set Translation to \"Gallium\"}\r\n|elif translate = \"Germanium\"    : {set Translation to \"Germanium\"}\r\n|elif translate = \"Gold\"         : {set Translation to \"Gold\"}\r\n|elif translate = \"Hafnium\"      : {set Translation to \"Haffnium\"}\r\n|elif translate = \"Helium\"       : {set Translation to \"Helium\"}\r\n|elif translate = \"Holmium\"      : {set Translation to \"Holmium\"}\r\n|elif translate = \"Hydrogen\"     : {set Translation to \"Wasserstoff\"}\r\n|elif translate = \"Indium\"       : {set Translation to \"Indium\"}\r\n|elif translate = \"Iodine\"       : {set Translation to \"Jod\"}\r\n|elif translate = \"Iridium\"      : {set Translation to \"Iridium\"}\r\n|elif translate = \"Iron\"         : {set Translation to \"Eisen\"}\r\n|elif translate = \"Krypton\"      : {set Translation to \"Kryptonn\"}\r\n|elif translate = \"Lanthanum\"    : {set Translation to \"Lanthan\"}\r\n|elif translate = \"Lead\"         : {set Translation to \"Blei\"}\r\n|elif translate = \"Lithium\"      : {set Translation to \"Lietsium\"}\r\n|elif translate = \"Lutetium\"     : {set Translation to \"Luttetsium\"}\r\n|elif translate = \"Magnesium\"    : {set Translation to \"Magnesium\"}\r\n|elif translate = \"Manganese\"    : {set Translation to \"Mahn gahn\"}\r\n|elif translate = \"Mercury\"      : {set Translation to \"Quecksilber\"}\r\n|elif translate = \"Molybdenum\"   : {set Translation to \"Molybdän\"}\r\n|elif translate = \"Neodymium\"    : {set Translation to \"Neodym\"}\r\n|elif translate = \"Neon\"         : {set Translation to \"Neon\"}\r\n|elif translate = \"Nickel\"       : {set Translation to \"Nickel\"}\r\n|elif translate = \"Niobium\"      : {set Translation to \"Niob\"}\r\n|elif translate = \"Nitrogen\"     : {set Translation to \"Stickstoff\"}\r\n|elif translate = \"Osmium\"       : {set Translation to \"Osmium\"}\r\n|elif translate = \"Oxygen\"       : {set Translation to \"Sauerstoff\"}\r\n|elif translate = \"Palladium\"    : {set Translation to \"Palladium\"}\r\n|elif translate = \"Phosphorus\"   : {set Translation to \"Phosphor\"}\r\n|elif translate = \"Platinum\"     : {set Translation to \"Platin\"}\r\n|elif translate = \"Potassium\"    : {set Translation to \"Kalium\"}\r\n|elif translate = \"Praseodymium\" : {set Translation to \"Praseodym\"}\r\n|elif translate = \"Promethium\"   : {set Translation to \"Prometsium\"}\r\n|elif translate = \"Rhenium\"      : {set Translation to \"Rhenium\"}\r\n|elif translate = \"Rhodium\"      : {set Translation to \"Rhodium\"}\r\n|elif translate = \"Rubidium\"     : {set Translation to \"Rubidium\"}\r\n|elif translate = \"Ruthenium\"    : {set Translation to \"Ruthenium\"}\r\n|elif translate = \"Samarium\"     : {set Translation to \"Samahrium\"}\r\n|elif translate = \"Scandium\"     : {set Translation to \"Skandium\"}\r\n|elif translate = \"Selenium\"     : {set Translation to \"Selen\"}\r\n|elif translate = \"Silicon\"      : {set Translation to \"Silicium\"}\r\n|elif translate = \"Silver\"       : {set Translation to \"Silber\"}\r\n|elif translate = \"Sodium\"       : {set Translation to \"Natrium\"}\r\n|elif translate = \"Strontium\"    : {set Translation to \"Strontium\"}\r\n|elif translate = \"Sulphur\"      : {set Translation to \"Schwefel\"}\r\n|elif translate = \"Tantalum\"     : {set Translation to \"Tantal\"}\r\n|elif translate = \"Technetium\"   : {set Translation to \"Technetium\"}\r\n|elif translate = \"Tellurium\"    : {set Translation to \"Tellur\"}\r\n|elif translate = \"Terbium\"      : {set Translation to \"Terbium\"}\r\n|elif translate = \"Thallium\"     : {set Translation to \"Tha llium\"}\r\n|elif translate = \"Thorium\"      : {set Translation to \"Thohrium\"}\r\n|elif translate = \"Thulium\"      : {set Translation to \"Thulium\"}\r\n|elif translate = \"Tin\"          : {set Translation to \"Zinn\"}\r\n|elif translate = \"Titanium\"     : {set Translation to \"Titan\"}\r\n|elif translate = \"Tungsten\"     : {set Translation to \"Wolfram\"}\r\n|elif translate = \"Uranium\"      : {set Translation to \"Uran\"}\r\n|elif translate = \"Vanadium\"     : {set Translation to \"Vanadium\"}\r\n|elif translate = \"Xenon\"        : {set Translation to \"Xenon\"}\r\n|elif translate = \"Ytterbium\"    : {set Translation to \"Ytterbium\"}\r\n|elif translate = \"Yttrium\"      : {set Translation to \"Yttriumm\"}\r\n|elif translate = \"Zinc\"         : {set Translation to \"Zink\"}\r\n|elif translate = \"Zirconium\"    : {set Translation to \"Zirkonium\"}\r\n}\r\n\r\n{if Translation: {Translation} |else: {translate}}",
      "name": "Translate Element",
      "description": "übersetzt die englischen Planetenelementebezeichnugen ins Deutsche",
      "default": false,
      "defaultValue": null
    },
    "Translate FleetCarrier": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{  if translate = \"J2Z-9QZ\" : Rassty, Star, der E O T \t\t\t\t\t\t\t{_ Rusty Star - Explorer on Tour _}\r\n|elif translate = \"J4F-77J\" : F G S Viator von Kommander Meikel Schättner\t\t{_ Michael Schättner _}\r\n|elif translate = \"K7M-2KQ\" : Akagi von Kommander May Lana Kaleni\t\t\t\t{_ May Lana Kaleni _}\r\n|elif translate = \"XXX-XXX\" : Kronos Eins von Kommander Chessi\t\t\t\t\t{_ Chessi _}\r\n|elif translate = \"K1L-58Z\" : Betty, Bub von Kommander Kolumbus \t\t\t\t{_ Kolumbus _}\r\n|elif translate = \"X6Z-L4F\"\t: P C Preiswert von Kommander Pit Cock \t\t\t\t{_ Pit Cock _}\r\n|elif translate = \"LFN-9QZ\"\t: Milliardengrab \t\t\t\t\t\t\t\t\t{_ EoT Ma-Ne _}\r\n|elif translate = \"Q3P-49L\"\t: Tscherron von Kommander Janjalan \t\t\t\t\t{_ Janjalan _}\r\n|elif translate = \"K3M-WVG\"\t: Cärolein von Kommander Katain \t\t\t\t\t{_ Katain _}\r\n|elif translate = \"KHZ-6XW\"\t: M F C Salo me von Kommander Micha Mäwerick \t\t{_ Micha Maverick _}\r\n|elif translate = \"K4F-6XL\"\t: Hier gibts Baggies von Kommander Wurzelgnom71 \t{_ Wurzelgnom71 _}\r\n|elif translate = \"K8L-34Q\"\t: Weihrauch City von Kommander MaHott\t\t\t\t{_ MaHott _}\r\n|elif translate = \"Q2T-7HG\"\t: Imperial Dark von Kommander Kauno \t\t\t\t{_ Kauno _}\r\n|elif translate = \"L0X-2XZ\"\t: Gilgamesch von Kommander Homunk \t\t\t\t\t{_ Homunk _}\r\n|elif translate = \"K7V-L0Y\" : I S S Fred Hoyle von Kommandantin Valentine Wiggin{_ Valentine Wiggin _}\r\n|elif translate = \"X2N-NKX\" : Lsv Terminus\t\t\t\t\t\t\t\t\t\t{_ Carlos Constantin _}\r\n|elif translate = \"XFZ-47B\" : (Lomac) Tarsonis\t\t\t\t\t\t\t\t\t{_ Aiurs Hope _}\r\n|elif translate = \"V3J-NQY\" : Moselstern\t\t\t\t\t\t\t\t\t\t{_ MoselPirat _}\r\n|else                       : {translate}\r\n}",
      "name": "Translate FleetCarrier",
      "description": "Liste bekannter FleetCarrier",
      "default": false,
      "defaultValue": null
    },
    "Translate Power": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Power___________________________________________________________________________________________________ _}\n\n{  if translate = \"Arissa Lavigny-Duval\": Arissa Lavini Dühwahll\r\n|elif translate = \"A Lavigny-Duval\"     : Arissa Lavini Dühwahll\r\n|elif translate = \"Aisling Duval\"       : Aschling Dühwahll\r\n|elif translate = \"Denton Patreus\"      : Denten Patreus\r\n|elif translate = \"Edmund Mahon\"        : Edmund Mahn\r\n|elif translate = \"Felicia Winters\"     : Felischa Winters\r\n|elif translate = \"Li Yong-Rui\"         : Li Yong-Rui\r\n|elif translate = \"Pranav Antal\"        : Pranav, Antl\r\n|elif translate = \"Zachary Hudson\"      : Zachary Hudson\r\n|elif translate = \"Zemina Torval\"       : Semina Tor val\r\n|elif translate = \"Yuri Grom\"           : Yuri, Grom\r\n|elif translate = \"Archon Delaine\"      : Arkon Dee lejn\r\n|elif translate = \"Keine\"               : Niemanden\n\n{_ Spieler_________________________________________________________________________________________________ _}\n|elif translate = \"SH4DOWM4K3R\"\t\t\t: Schädomeker\n|elif translate = \"Uncle Tom\"          \t: Onkel, Tom\n|elif translate = \"Diaoblo Cl4ptr4p\"   \t: Diablo Junior\n|elif translate = \"Melli Beese\"        \t: Nepo\n|elif translate = \"Flitzipaldi\"\t\t\t: Nepo\n|elif translate = \"HRC1\"\t\t\t\t: User Test\n|elif translate = \"Ipsum\"               : Testuser\n|elif translate = \"KOLUMBUS\"\t\t\t: {translate}\n|elif translate = \"Grimmer Schnitter\"\t: {translate}\n|elif translate = \"xxx\"                \t: unbekannt\n\n{_ Händler ________________________________________________________________________________________________ _}\n|elif translate = \"raw\"\t\t\t\t\t: Roh Materialienhändler\n|elif translate = \"encoded\"\t\t\t\t: Datenhändler\n|elif translate = \"manufactured\"\t\t: Händler für gefertigtes Material\n\n{_ Faction_________________________________________________________________________________________________ _}\n\n|elif translate = \"The Federation\"        : {if from: der\t    |elif to: der   |else: die} Föderation\n|elif translate = \"The Empire\"            : {if from: vom       |elif to: dem   |else: das} Imperium\n|elif translate = \"The Alliance\"          : {if from: der\t    |elif to: der   |else: die} Allianz\n|elif translate = \"The Pilots Federation\" : {if from: der\t    |elif to: der   |else: die} Piloten Vereinigung\n|elif translate = \"mercenaries\"           : {if from: einem \t|elif to: einem |else: ein} Söldner\n|else                                     : {translate}\n}\n\n{set from to []}\n{set to to []}\n",
      "name": "Translate Power",
      "description": "Personen/Fraktionen für die deutsche Aussprache anpassen ",
      "default": false,
      "defaultValue": null
    },
    "Translate Ship Module": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "                                    {_ set translate to  \"Sensoren\"}                            {set article to []}    {set akku to []}                               \r\n                                                                                                                       \r\n{  if translate = \"Optimierter Plasmabeschleuniger\"      : {translate}                          {set article to \"der\"} {set akku to \"Optimierten Plasmabeschleuniger\"}\r\n|elif translate = \"AT Mehrzweckgeschütz\"                 : Mehrzweckgeschütz                    {set article to \"das\"}                                                \r\n|elif translate = \"Automatische Feldwartung\"             : Automatische Feld wartungseinheit    {set article to \"die\"}\r\n|elif translate = \"Auto Field-Maintenance Unit\"       \t : Automatische Feldwartungseinheit\t\t{set article to \"die\"}\r\n|elif translate = \"AFW-Einheit\"\t\t\t\t\t       \t : Automatische Feld wartungseinheit\t{set article to \"die\"}\r\n|elif translate = \"AX Raketengestell\"                    : Raketen Rampe\t\t                {set article to \"die\"}                                                \r\n|elif translate = \"AX Mehrzweckgeschütz\"                 : A X Mehrzweck geschütz               {set article to \"das\"}                                                \r\n|elif translate = \"Einfacher Aufklärungsscanner\"         : Aufklärungsscanner                   {set article to \"der\"}                                                \r\n|elif translate = \"Strahlenlaser\"                        : Strahlen Laser                       {set article to \"der\"}                                                \r\n|elif translate = \"Bi-Wellen-Schildgenerator\"            : Bie Wellen Schildgenerator           {set article to \"der\"}                                                \r\n|elif translate = \"Salvenlaser\"                          : Salven Laser                         {set article to \"der\"}                                                \r\n|elif translate = \"Business Klasse Passagierkabine\"      : {translate}                          {set article to \"die\"}                                                \r\n|elif translate = \"Kanone\"                               : Kanone                               {set article to \"die\"}                                                \r\n|elif translate = \"Ladeluke\"                             : Frachtluke                           {set article to \"die\"}                                                \r\n|elif translate = \"Laderaum\"                             : Frachtgestell                        {set article to \"das\"}\r\n|elif translate = \"Frachtgestell\"                        : {translate}                          {set article to \"das\"}\r\n|elif translate = \"Celeste\"                              : Sprachpaket Celeste                  {set article to \"das\"}                                                \r\n|elif translate = \"Düppel-Werfer\"                        : Düppel Werfer                        {set article to \"der\"}                                                \r\n|elif translate = \"Cockpitkabine\"                        : Cockpit kabine                       {set article to \"die\"}                                                \r\n|elif translate = \"Cockpit\"                              : {translate}                          {set article to \"das\"}                                                \r\n|elif translate = \"Steuerung Sammeldrohnen\"              : {translate}                          {set article to \"die\"}                                                \r\n|elif translate = \"Farbige Lichterkette\"                 : Farbige Lichter kette                {set article to \"die\"}                                                \r\n|elif translate = \"korrosionsbeständiger Laderaum\"       : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Zytostreuer\"                          : Zytoskraembler                       {set article to \"der\"}                                                \r\n|elif translate = \"Datenlinkscanner\"                     : Datenscanner                         {set article to \"der\"}                                                \r\n|elif translate = \"Steuerung Entseuchungsdrohnen\"        : Steuerung Entseuchungs drohnen       {set article to \"die\"}                                                \r\n|elif translate = \"Oberflächenscanner\"                   : Detail Oberflächenscanner            {set article to \"der\"}\r\n|elif translate = \"Impulslaser\"\t\t\t                 : Impuls Laser                         {set article to \"der\"}\r\n|elif translate = \"Impulsunterbrecher\"                   : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Economy-Klasse-Passagierkabine\"       : Economy Klaas Passagierkabine        {set article to \"die\"}                                                \r\n|elif translate = \"Elektr. Gegenmaßnahmen\"               : Elektronische Gegenmaßnahme          {set article to \"die\"}\r\n|elif translate = \"Elektronische Gegenmaßnahmen\"         : Elektronische Gegenmaßnahme          {set article to \"die\"}                                                \r\n|elif translate = \"Leistungsoptimierte Triebwerke\"       : Leistungsoptimiertes Triebwerk       {set article to \"das\"}                                                \r\n|elif translate = \"Jägerpanzerung\"                       : Jäger panzerung                      {set article to \"die\"}                                                \r\n|elif translate = \"Jägerhangar\"                          : Fighter Hangar                       {set article to \"der\"}                                                \r\n|elif translate = \"Erste Klasse Passagierkabine\"         : Passagierkabine Erster Klasse        {set article to \"die\"}                                                \r\n|elif translate = \"Fragmentkanone\"                       : Fragment Kanone                      {set article to \"die\"}                                                \r\n|elif translate = \"Frameshift Unterbrecher\"              : Frame Shift Unterbrecher             {set article to \"der\"}                                                \r\n|elif translate = \"Frameshiftantrieb\"                    : Frame Shift Antrieb                  {set article to \"der\"}                                                \r\n|elif translate = \"FS-Sogwolkenscanner\"                  : Soog-Wolkenscanner                   {set article to \"der\"}                                                \r\n|elif translate = \"Treibstoffsammler\"                    : Treibstoff Sammler                   {set article to \"der\"}                                                \r\n|elif translate = \"Treibstofftank\"                       : Treibstoff Tank                      {set article to \"der\"}                                                \r\n|elif translate = \"Treibstofftransfer-Drohnensteuerung\"  : Treibstoff transfer Drohnen steuerung{set article to \"die\"}                                                \r\n|elif translate = \"Guardian-Gausskanone\"                 : Guardian Gauss kanone                {set article to \"die\"}                                                \r\n|elif translate = \"Guardian-Plasmalader\"                 : Guardian Plasma lader                {set article to \"der\"}                                                \r\n|elif translate = \"Guardian-Kraftwerk\"                   : Guardian Kraftwerk                   {set article to \"das\"}                                                \r\n|elif translate = \"Steuereinheit Ladelukenöffner\"        : Steuereinheit Lade lukenöffner       {set article to \"die\"}                                                \r\n|elif translate = \"Kühlkörperabwurf\"                     : Kühlkörper Werfer                    {set article to \"der\"}\r\n|elif translate = \"Hull\"\t\t\t\t\t\t\t\t : Hülle\t\t\t\t\t\t\t\t{set article to \"die\"}\r\n|elif translate = \"Rumpfhüllenverstärkung (Paket)\"       : Rumpfhüllenverstärkung               {set article to \"die\"}\r\n|elif translate = \"Rumpfhüllenverstärkung\"       \t\t : {translate}\t\t\t                {set article to \"die\"}\r\n|elif translate = \"Imperialer Hammer\"                    : Imperrriahl Haemmer                  {set article to \"der\"}                                                \r\n|elif translate = \"Mittlerer Aufklärungsscanner\"         : Mittlerer Aufklärungs scanner        {set article to \"der\"}                                                \r\n|elif translate = \"Tötungsbefehlscanner\"                 : Kopfgeld Scanner                     {set article to \"der\"}                                                \r\n|elif translate = \"Lebenserhaltung\"                      : Lebens Erhaltung                     {set article to \"die\"}                                                \r\n|elif translate = \"Leichte Legierung\"                    : {translate}                          {set article to \"die\"}                                                \r\n|elif translate = \"Luxury-Class-Passagierkabine\"         : Passagierkabine der Luxusklasse      {set article to \"die\"}                                                \r\n|elif translate = \"Frachtscanner\"                        : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Meta-Legierungs Hüllenverstärkung\"    : Meetaah Legierungs Hüllenverstärkung {set article to \"die\"}                                                \r\n|elif translate = \"Militär-Komposit\"                     : Militärische Hüllenpanzerung         {set article to \"die\"}                                                \r\n|elif translate = \"Minenwerfer\"                          : Mienen Werfer                        {set article to \"der\"}                                                \r\n|elif translate = \"Lanzenabbaulaser\"                     : Mining Lanze                         {set article to \"die\"}                                                \r\n|elif translate = \"Erzabbaulaser\"                        : Mining Laser                         {set article to \"der\"}\r\n|elif translate = \"Abbaulaser\"                           : Mining Laser                         {set article to \"der\"}\r\n|elif translate = \"Gespiegelte-Oberfläche-Komposit\"      : Verspiegelte Hüllen panzerung        {set article to \"die\"}                                                \r\n|elif translate = \"Raketengestell\"                       : {translate}                          {set article to \"das\"}                                                \r\n|elif translate = \"Modulverstärkung (Paket)\"             : Modulverstärkung                     {set article to \"die\"}                                                \r\n|elif translate = \"Mehrfachgeschütz\"                     : {translate}                          {set article to \"das\"}                                                                                                \r\n|elif translate = \"Friedenstifter\"                       : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Schwarmwerfer\"                        : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Planetenanflug-Suite\"                 : {translate}                          {set article to \"die\"}                                                \r\n|elif translate = \"Planetenfahrzeughangar\"               : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Plasmabeschleuniger\"                  : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Punktverteidigung\"                    : {translate}                          {set article to \"die\"}                                                \r\n|elif translate = \"Energieverteiler\"                     : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Kraftwerk\"                            : {translate}                          {set article to \"das\"}                                                \r\n|elif translate = \"Prismaschildgenerator\"                : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Drohnensteuerung Erzsucher\"           : Drohnen Steuerung Erz Sucher         {set article to \"die\"}                                                \r\n|elif translate = \"Pulslaser\"                            : Puls Laser                           {set article to \"der\"}                                                \r\n|elif translate = \"Schienenkanone\"                       : Schienen Kanone                      {set article to \"die\"}                                                \r\n|elif translate = \"Reaktive-Oberfläche-Komposit\"         : Reaktivpanzerung                     {set article to \"die\"}                                                \r\n|elif translate = \"Steuerung Aufklärungsdrohnen\"         : {translate}                          {set article to \"die\"}                                                \r\n|elif translate = \"Raffinerie\"                           : Raffenerie                           {set article to \"die\"}                                                \r\n|elif translate = \"Verstärkte Legierung\"                 : Verstärkungslegierung                {set article to \"die\"}                                                \r\n|elif translate = \"Flakwerfer mit Fernzündung\"           : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Steuerung Reparaturdrohnen\"           : {translate}                          {set article to \"die\"}                                                \r\n|elif translate = \"Steuerung Forschungsdrohnen\"          : {translate}                          {set article to \"die\"}\r\n|elif translate = \"Steuerung Ladelukenöffnerdrohnen\"     : {translate}                          {set article to \"die\"}\r\n|elif translate = \"Raketengetriebener FSA-Unterbrecher\"  : Raketengetriebener F S A Unterbrecher{set article to \"der\"}                                                \r\n|elif translate = \"Sensoren\"                             : Sensorbaugruppe                      {set article to \"die\"}                                                \r\n|elif translate = \"Schild-Booster\"                       : Schild Buhster                       {set article to \"der\"}                                                \r\n|elif translate = \"Schildzellenbank\"                     : Schildzellenbank                     {set article to \"die\"}                                                \r\n|elif translate = \"Schildgenerator\"                      : Schildgenerator                      {set article to \"der\"}                                                \r\n|elif translate = \"Schockkanone\"                         : Schock kanone                        {set article to \"die\"}                                                \r\n|elif translate = \"Schockminenwerfer\"                    : Schock Mienen Werfer                 {set article to \"der\"}                                                \r\n|elif translate = \"Abschalt-Feldneutralisator\"           : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Standard-Landecomputer\"               : Landecomputer                        {set article to \"der\"}                                                \r\n|elif translate = \"Schubdüsen\"                           : Triebwerk                            {set article to \"das\"}                                                \r\n|elif translate = \"Torpedopylon\"                         : Torpedo Pylohn                       {set article to \"der\"}                                                \r\n|elif translate = \"Verity\"                               : Sprachpaket Verity                   {set article to \"das\"}                                                \r\n|elif translate = \"Victor\"                               : Sprachpaket Victor                   {set article to \"das\"}                                                \r\n|elif translate = \"Weiße Lichterkette\"                   : Weiße Lichter kette                  {set article to \"die\"}                                                \r\n|elif translate = \"Xeno-Scanner\"                         : Xeehnoo Scanner                      {set article to \"der\"}                                                \r\n|elif translate = \"Fortgeschrittener Aufklärungsscanner\" : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Plasma-Verstärker\"                    : {translate}                          {set article to \"der\"}                                                \r\n|elif translate = \"Vollstreckerkanone\"                   : Vollstrecker kanone                  {set article to \"die\"}                                                \r\n|elif translate = \"Guardian-FSA-Verstärker\"              : Guardian F S A Verstärker            {set article to \"der\"}                                                \r\n|elif translate = \"Guardian-Energieverteiler\"            : Guardian Energieverteiler            {set article to \"der\"}                                                \r\n|elif translate = \"Guardian-Fragmentkanone\"              : Guardian Fragment kanone             {set article to \"die\"}                                                \r\n|elif translate = \"Flechet Werfer\"                       : Fletschet Werfer                     {set article to \"der\"}                                                \r\n|elif translate = \"Biologisches Raketengestell\"          : Biologisches Raketengestell          {set article to \"das\"}\r\n|elif translate = \"all\"\t\t\t\t\t\t\t\t\t : alle Module\t\t\t\t\t\t\t{set article to \"die\"}\r\n|else                                                    : {translate}\r\n}",
      "name": "Translate Ship Module",
      "description": "Übersetzt die Schiffsmodule zur Aussprache in deutsch (Neue Version)",
      "default": false,
      "defaultValue": null
    },
    "Translate Ship Modules - alt": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to \"Life Support\"}\n\n{set Translation to []}\n\n{_ Modules _}\n{  if translate = \"Auto Field-Maintenance Unit\"       : {set Translation to \"Automatische Feld wartungseinheit\"}\n|elif translate = \"Bi-Weave Shield Generator\"         : {set Translation to \"Bi-Wellen Schildgenerator\"}\n|elif translate = \"Bulkheads\"                         : {set Translation to \"Schotten\"}\n|elif translate = \"Cargo Rack\"                        : {set Translation to \"Frachtgestell\"}\n|elif translate = \"Cargo Scanner\"                     : {set Translation to \"Frachtscanner\"}\n|elif translate = \"Cargo Scoop\"                       : {set Translation to \"Frachtluke\"}\n|elif translate = \"Chaff Launcher\"                    : {set Translation to \"Düppel Werfer\"}\n|elif translate = \"Data Link Scanner\"                 : {set Translation to \"Datenscanner\"}\n|elif translate = \"Detailed Surface Scanner\"          : {set Translation to \"Detail Oberflächenscanner\"}\n|elif translate = \"Discovery Scanner\"                 : {set Translation to \"Aufklärungsscanner\"}\n|elif translate = \"Electronic Countermeasure\"         : {set Translation to \"Elektronische Gegenmaßnahme\"}\n|elif translate = \"Enhanced Performance Thrusters\"    : {set Translation to \"Leistungsgesteigerte Triebwerke\"}\n|elif translate = \"Fighter Hangar\"                    : {set Translation to \"Jäger Hangar\"}\n|elif translate = \"Frame Shift Drive\"                 : {set Translation to \"Frame Shift Antrieb\"}\n|elif translate = \"Frame Shift Drive Interdictor\"     : {set Translation to \"Frame Shift Antrieb Unterbrecher\"}\n|elif translate = \"Frame Shift Wake Scanner\"          : {set Translation to \"Sogwolken Scanner\"}\n|elif translate = \"Fuel Scoop\"                        : {set Translation to \"Treibstoff Sammler\"}\n|elif translate = \"Fuel Tank\"                         : {set Translation to \"Treibstoff Tank\"}\n|elif translate = \"Heat Sink Launcher\"                : {set Translation to \"Kühlkörper\"}\n|elif translate = \"Hull\"\t\t\t\t\t\t\t  : {set Translation to \"Hülle\"}\n|elif translate = \"Hull Reinforcement Package\"        : {set Translation to \"Hüllenverstärkungspaket\"}\n|elif translate = \"Kill Warrant Scanner\"              : {set Translation to \"Kopfgeld Scanner\"}\n|elif translate = \"Life Support\"                      : {set Translation to \"Lebens Erhaltung\"}\n|elif translate = \"Lightweight Alloys\"                : {set Translation to \"Leichte Legierungen\"}\n|elif translate = \"Limpet Controller\"                 : {set Translation to \"Drohnen Steuerung\"}\n|elif translate = \"Limpet Controller/Collector\"       : {set Translation to \"Sammel Drohnen Steuerung\"}\n|elif translate = \"Limpet Controller/Fuel Transferer\" : {set Translation to \"Treibstoff Drohnen Steuerung\"}\n|elif translate = \"Limpet Controller/Hatch Breaker\"   : {set Translation to \"Frachtluken Drohnen Steuerung\"}\n|elif translate = \"Limpet Controller/Prospector\"      : {set Translation to \"Schürf Drohnen Steuerung\"}\n|elif translate = \"MainEngines\"                       : {set Translation to \"Hauptantrieb\"}   \n|elif translate = \"Military Grade Composite\"          : {set Translation to \"Militär Panzerung\"}\n|elif translate = \"Mirrored Surface Composite\"        : {set Translation to \"Verspiegelte Oberfläche\"}\n|elif translate = \"Module Reinforcement Package\"      : {set Translation to \"Moduhlverstärkungspaket\"}\n|elif translate = \"Passenger Cabin\"                   : {set Translation to \"Passagierkabine\"}\n|elif translate = \"Planetary Approach Suite\"          : {set Translation to \"Planetenanflug Suite\"}\n|elif translate = \"Planetary Vehicle Hangar\"          : {set Translation to \"PlanetenFahrzeug Hangar\"}\n|elif translate = \"Point Defence Turret\"              : {set Translation to \"Punkt Verteidigung\"}\n|elif translate = \"Power Distributor\"                 : {set Translation to \"Energieverteiler\"}\n|elif translate = \"Power Plant\"                       : {set Translation to \"Kraftwerk\"}\n|elif translate = \"Prismatic Shield Generator\"        : {set Translation to \"Prismatischer Schildgenerator\"}\n|elif translate = \"Reactive Surface Composite\"        : {set Translation to \"Reaktiv Panzerung\"}\n|elif translate = \"Refinery\"                          : {set Translation to \"Raffenerie\"}\n|elif translate = \"Reinforced Alloys\"                 : {set Translation to \"Verstärkte Hülle\"}\n|elif translate = \"Sensors\"                           : {set Translation to \"Sensoren\"}\n|elif translate = \"Shield Booster\"                    : {set Translation to \"Schild Verstärker\"}\n|elif translate = \"Shield Cell Bank\"                  : {set Translation to \"Schildzellenbank\"}\n|elif translate = \"Shield Generator\"                  : {set Translation to \"Schildgenerator\"}\n|elif translate = \"Standard Docking Computer\"         : {set Translation to \"Lande Computer\"}\n|elif translate = \"Thrusters\"                         : {set Translation to \"Schuub Düsen\"}\n|elif translate = \"Wave Scanner\"                      : {set Translation to \"Wellen Scanner\"}\n\n{_ Weapons _}\n|elif translate = \"Advanced Plasma Accelerator\"       : {set Translation to \"Suuper Plasma Beschleuniger\"}\n|elif translate = \"Beam Laser\"                        : {set Translation to \"Strahlen Läehsa\"}\n|elif translate = \"Burst Laser\"                       : {set Translation to \"Salven Läehsa\"}\n|elif translate = \"Cannon\"                            : {set Translation to \"Kanone\"}\n|elif translate = \"Cytoscrambler\"                     : {set Translation to \"Zytoskraembler\"}\n|elif translate = \"Enforcer Cannon\"                   : {set Translation to \"Schienen Kanone\"}\n|elif translate = \"Fragment Cannon\"                   : {set Translation to \"Splitter Kanone\"}\n|elif translate = \"Imperial Hammer\"                   : {set Translation to \"Imperialer Hammer\"}\n|elif translate = \"Mine Launcher\"                     : {set Translation to \"Minenwerfer\"}\n|elif translate = \"Mining Lance\"                      : {set Translation to \"Abbau und Waffen Läehsa\"}\n|elif translate = \"Mining Laser\"                      : {set Translation to \"Abbau Läehsa\"}\n|elif translate = \"Missile Rack\"                      : {set Translation to \"Raketen Rampe\"}\n|elif translate = \"Multi-cannon\"                      : {set Translation to \"Mehrfachgeschütz\"}\n|elif translate = \"Pacifier Frag-Cannon\"              : {set Translation to \"\"}\n|elif translate = \"Pack-hound Rack\"                   : {set Translation to \"\"}\n|elif translate = \"Plasma Accelerator\"                : {set Translation to \"Plasma Beschleuniger\"}\n|elif translate = \"Pulse Disruptor\"                   : {set Translation to \"Puls Disruptor\"}\n|elif translate = \"Pulse Laser\"                       : {set Translation to \"Puls Läehsa\"}\n|elif translate = \"Railgun\"                           : {set Translation to \"Schienenkanone\"}\n|elif translate = \"Retributor\"                        : {set Translation to \"\"}\n|elif translate = \"Shock Mine Launcher\"               : {set Translation to \"Schockminenwerfer\"}\n|elif translate = \"Torpedo Pylon\"                     : {set Translation to \"Torpedopülohn\"}\n|elif translate = \"all\"\t\t\t\t\t\t\t\t  : {set Translation to \"Alle Module\"}\n}\n\n{if Translation: {Translation} |else: {translate}}",
      "name": "Translate Ship Modules - alt",
      "description": "Übersetzt die Schiffsmodule in Deutsche",
      "default": false,
      "defaultValue": null
    },
    "Translate Ship Name": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to cat(\"your \", ShipName())}\n{_ set translate to cat(\"your \", \"Cobra MK III\")}\n\n{if lcase(slice(translate, 0, 4)) = \"your\":\n   {set your to 1}\n   {set ship to lcase(slice(translate, 5, len(translate)))}\n|else:\n   {set ship to lcase(translate)}\n}\n\n{set ShipIsNamed to []}\n{  if ship = \"ship\"                 : {set article to das} {if your:Ihr{if of:es}} Schiff{if of:es}\n|elif ship = \"unidentified ship\"    : {set article to das} unidentifiziertes Schiff\n|elif ship = \"adder\"                : {set article to die} {if your:Ihre{if of:r}} Ädder\n|elif ship = \"anaconda\"             : {set article to die} {if your:Ihre{if of:r}} Anakhondaah \n|elif ship = \"asp explorer\"         : {set article to der} {if your:Ihr{if to:en|elif of:es}} A.S.P Explorer{if of:'s}\n|elif ship = \"asp scout\"            : {set article to der} {if your:Ihr{if to:en|elif of:es}} A.S.P Scout{if of:'s}\n|elif ship = \"chieftain\"            : {set article to der} {if your:Ihr{if to:en|elif of:es}} Tschieften\n|elif ship = \"cobra mk iii\"         : {set article to die} {if your:Ihre{if of:r}} Kobra Mark 3\n|elif ship = \"cobra mk iv\"          : {set article to die} {if your:Ihre{if of:r}} Kobra Mark Four\n|elif ship = \"diamondback explorer\" : {set article to der} {if your:Ihr{if to:en|elif of:es}} Daimend bäck Explorer{if of:'s}\n|elif ship = \"diamondback scout\"    : {set article to der} {if your:Ihr{if to:en|elif of:es}} Daimend bäck Scout\n|elif ship = \"dolphin\"              : {set article to der} {if your:Ihr{if to:en|elif of:es}} Dolphin{if of:'s}\n|elif ship = \"eagle\"                : {set article to der} {if your:Ihr{if to:en|elif of:es}} Eagle{if of:'s}\n|elif ship = \"federal assault ship\" : {set article to das} {if your:Ihr{if of:es}} {OneOf(\"Fäede räell\",\"föderahle{if to:s|elif of:n}\")} Assault Ship{if of:'s}\n|elif ship = \"federal corvette\"     : {set article to die} {if your:Ihre{if of:r}} {OneOf(\"Fäede räell\",\"föderahle{if of:n}\",\"föderations\")} Korvett\n|elif ship = \"federation_corvette\"  : {set article to die} {if your:Ihre{if of:r}} {OneOf(\"Fäede räell\",\"föderahle{if of:n}\",\"föderations\")} Korvett\n|elif ship = \"federal dropship\"     : {set article to das} {if your:Ihr{if of:es}} {OneOf(\"Fäede räell\",\"föderahle{if to:s|elif of:n}\")} Dropp Ship{if of:'s}\n|elif ship = \"federal gunship\"      : {set article to das} {if your:Ihr{if of:es}} {OneOf(\"Fäede räell\",\"föderahle{if to:s|elif of:n}\")} Gann Ship{if of:'s}\n|elif ship = \"fer-de-lance\"         : {set article to die} {if your:Ihre{if of:r}} För dde Lahns\n|elif ship = \"hauler\"               : {set article to der} {if your:Ihre{if of:r}} Hauler{if of:'s}\n|elif ship = \"imperial clipper\"     : {set article to der} {if your:Ihr{if to:en|elif of:es}} {OneOf(\"Imperrriall\",\"imperiale{if to:n|elif of:n|elif your:r}\")} Clipper{if of:'s}\n|elif ship = \"imperial courier\"     : {set article to der} {if your:Ihr{if to:en|elif of:es}} {OneOf(\"Imperrriall\",\"imperiale{if to:n|elif of:n|elif your:r}\")} Courier{if of:'s}\n|elif ship = \"imperial cutter\"      : {set article to der} {if your:Ihr{if to:en|elif of:es}} {OneOf(\"Imperrriall\",\"imperiale{if to:n|elif of:n|elif your:r}\")} Cutter{if of:'s}\n|elif ship = \"imperial eagle\"       : {set article to der} {if your:Ihr{if to:en|elif of:es}} {OneOf(\"Imperrriall\",\"imperiale{if to:n|elif of:n|elif your:r}\")} Eagle{if of:'s}\n|elif ship = \"keelback\"             : {set article to der} {if your:Ihr{if to:en|elif of:es}} Kiel bäekh\n|elif ship = \"krait_mkii\"           : {set article to die} {if your:Ihre{if of:r}} Krait\n|elif ship = \"orca\"                 : {set article to der} {if your:Ihr{if to:en|elif of:es}} Orka{if of:'s}\n|elif ship = \"python\"               : {set article to der} {if your:Ihr{if to:en|elif of:es}} Python\n|elif ship = \"sidewinder\"           : {set article to die} {if your:Ihre{if of:r}} Side wainder{if of:'s}\n|elif ship = \"type-6 transporter\"   : {set article to der} {if your:Ihr{if to:en|elif of:es}} Thaip Six Transporter{if of:'s}\n|elif ship = \"type-7 transporter\"   : {set article to der} {if your:Ihr{if to:en|elif of:es}} Thaip Seven Transporter{if of:'s}\n|elif ship = \"type-9 heavy\"         : {set article to der} {if your:Ihr{if to:en|elif of:es}} Thaip Nine Heavy{if of:'s}\n|elif ship = \"type-10 defender\"     : {set article to der} {if your:Ihr{if to:en|elif of:es}} Thaip Tten Diefender{if of:'s}\n|elif ship = \"viper\"                : {set article to die} {if your:Ihre{if of:r}} Waiper\n|elif ship = \"viper mk iv\"          : {set article to die} {if your:Ihre{if of:r}} Waiper Mark Four\n|elif ship = \"vulture\"              : {set article to die} {if your:Ihre{if to:r}} Voltscha{if of:'s}\n|else                               : {_ translate}{if of:'s} {set ShipIsNamed to 1}\n}\n\n{set your to []}\n{set to to []}\n{set of to []}",
      "name": "Translate Ship Name",
      "description": "Übersetzungen der Schiffsbezeichnungen",
      "default": false,
      "defaultValue": null
    },
    "Translate Ship Names": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set translate to \"your Asp Explorer\"}\r\n{_ set to to 1}\r\n\r\n{set Translation to []}\r\n\r\n{if to:\r\n   {  if translate = \"your Asp Explorer\"         : {set Translation to \"Ihren A.S.P Explorer\"}\r\n   |elif translate = \"your Asp Scout\"            : {set Translation to \"Ihren A.S.P Scout\"}\r\n   |elif translate = \"your Diamondback Explorer\" : {set Translation to \"Ihre Deih mendbäck Explorer\"}\r\n   |elif translate = \"your Diamondback Scout\"    : {set Translation to \"Ihre Deih mendbäck Scout\"}\r\n   |elif translate = \"your Eagle\"                : {set Translation to \"Ihren Eagle\"}\r\n   |elif translate = \"your Imperial Clipper\"     : {set Translation to \"Ihren Imperrriall Clipper\"}\r\n   |elif translate = \"your Imperial Courier\"     : {set Translation to \"Ihren Imperrriall Courier\"}\r\n   |elif translate = \"your Imperial Cutter\"      : {set Translation to \"Ihren Imperrriall Cutter\"}\r\n   |elif translate = \"your Imperial Eagle\"       : {set Translation to \"Ihren Imperrriall Eagle\"}\r\n   |elif translate = \"your Keelback\"             : {set Translation to \"Ihre Kiel beck\"}\r\n   |elif translate = \"your Krait Mark 2\"         : {set Translation to \"Ihre Krait Mark 2\"}\r\n   |elif translate = \"your krait_mkii\"           : {set Translation to \"Ihre Krait MK 2\"}\r\n   |elif translate = \"your Orca\"                 : {set Translation to \"Ihren Orka\"}\r\n   |elif translate = \"your Python\"               : {set Translation to \"Ihren Peithen\"}\r\n   |elif translate = \"your Type-6 Transporter\"   : {set Translation to \"Ihren Thaip six Transporter\"}\r\n   |elif translate = \"your Type-7 Transporter\"   : {set Translation to \"Ihren Thaip seven Transporter\"}\r\n   |elif translate = \"your Type-9 Heavy\"         : {set Translation to \"Ihren Thaip nine Heavy\"}\r\n   |elif translate = \"your Vulture\"              : {set Translation to \"Ihre Voltscha\"}\r\n   |elif translate = \"your Viper Mk III\"         : {set Translation to \"Ihre Waiper\"}\r\n   |elif translate = \"your viper Mark 3\"         : {set Translation to \"Ihre Waiper\"}   \r\n   }\r\n}\r\n\r\n{if !Translation:\r\n   {  if translate = \"Adder\"                     : {set Translation to \"Ädder\"}\r\n   |elif translate = \"Anaconda\"                  : {set Translation to \"Anakhondaah\"}\r\n   |elif translate = \"Asp Explorer\"              : {set Translation to \"A.S.P Explorer\"}\r\n   |elif translate = \"Asp Scout\"                 : {set Translation to \"A.S.P Scout\"}\r\n   |elif translate = \"Cobra Mk III\"              : {set Translation to \"Kobra Mark 3\"}\r\n   |elif translate = \"Cobra Mk IV\"               : {set Translation to \"Kobra Mark Four\"}\r\n   |elif translate = \"Diamondback Explorer\"      : {set Translation to \"Daih mendbäck Explorer\"}\r\n   |elif translate = \"Diamondback Scout\"         : {set Translation to \"Daih mendbäck Scout\"}\r\n   |elif translate = \"Eagle\"                     : {set Translation to \"Eagle\"}\r\n   |elif translate = \"Federal Assault Ship\"      : {set Translation to \"Fäede räell Assault Ship\"}\r\n   |elif translate = \"Federal Corvette\"          : {set Translation to \"Fäede räell Korvett\"}\r\n   |elif translate = \"Federal Dropship\"          : {set Translation to \"Fäede räell Dropp ship\"}\r\n   |elif translate = \"Federal Gunship\"           : {set Translation to \"Fäede räell Gann ship\"}\r\n   |elif translate = \"Fer-de-Lance\"              : {set Translation to \"För dde Lahns\"}\r\n   |elif translate = \"Hauler\"                    : {set Translation to \"Hauler\"}\r\n   |elif translate = \"Imperial Clipper\"          : {set Translation to \"Imperrriall Clipper\"}\r\n   |elif translate = \"Imperial Courier\"          : {set Translation to \"Imperrriall Courier\"}\r\n   |elif translate = \"Imperial Cutter\"           : {set Translation to \"Imperrriall Cutter\"}\r\n   |elif translate = \"Imperial Eagle\"            : {set Translation to \"Imperrriall Eagle\"}\r\n   |elif translate = \"Keelback\"                  : {set Translation to \"Kiel beck\"}\r\n   |elif translate = \"Krait Mark 2\"              : {set Translation to \"Krait Mark 2\"}\r\n   |elif translate = \"krait_mkii\"                : {set Translation to \"Krait MK 2\"}\r\n   |elif translate = \"Orca\"                      : {set Translation to \"Orka\"}\r\n   |elif translate = \"Python\"                    : {set Translation to \"Peithen\"}\r\n   |elif translate = \"Sidewinder\"                : {set Translation to \"Side wainder\"}\r\n   |elif translate = \"Type-6 Transporter\"        : {set Translation to \"Thaip six Transporter\"}\r\n   |elif translate = \"Type-7 Transporter\"        : {set Translation to \"Thaip seven Transporter\"}\r\n   |elif translate = \"Type-9 Heavy\"              : {set Translation to \"Thaip nine Heavy\"}\r\n   |elif translate = \"Viper Mk III\"              : {set Translation to \"Waiper\"}\r\n   |elif translate = \"viper Mark 3\"              : {set Translation to \"Waiper\"}   \r\n   |elif translate = \"Viper Mk IV\"               : {set Translation to \"Waiper Mark Four\"}\r\n   |elif translate = \"Vulture\"                   : {set Translation to \"Voltscha\"}\r\n   |elif translate = \"unidentified ship\"         : {set Translation to \"unidentifiziertes Schiff\"}\r\n   |elif translate = \"your ship\"                 : {set Translation to \"Ihr Schiff\"}\r\n   |elif translate = \"your Adder\"                : {set Translation to \"Ihre Ädder\"}\r\n   |elif translate = \"your Anaconda\"             : {set Translation to \"Ihre Anakhondaah\"}\r\n   |elif translate = \"your Asp Explorer\"         : {set Translation to \"Ihr Äesp Explorer\"}\r\n   |elif translate = \"your Asp Scout\"            : {set Translation to \"Ihr Äesp Scout\"}\r\n   |elif translate = \"your Cobra Mk III\"         : {set Translation to \"Ihre Kobra Mark 3\"}\r\n   |elif translate = \"your Cobra Mk IV\"          : {set Translation to \"Ihre Kobra Mark Four\"}\r\n   |elif translate = \"your Diamondback Explorer\" : {set Translation to \"Ihr Daih mendbäck Explorer\"}\r\n   |elif translate = \"your Diamondback Scout\"    : {set Translation to \"Ihr Daih mendbäck Scout\"}\r\n   |elif translate = \"your Eagle\"                : {set Translation to \"Ihr Eagle\"}\r\n   |elif translate = \"your Federal Assault Ship\" : {set Translation to \"Ihr Fäede räell Assault Ship\"}\r\n   |elif translate = \"your Federal Corvette\"     : {set Translation to \"Ihre Fäede räell Korvett\"}\r\n   |elif translate = \"your Federal Dropship\"     : {set Translation to \"Ihr Fäede räell Dropp ship\"}\r\n   |elif translate = \"your Federal Gunship\"      : {set Translation to \"Ihr Fäede räell Gann ship\"}\r\n   |elif translate = \"your Fer-de-Lance\"         : {set Translation to \"Ihre För dde Lahns\"}\r\n   |elif translate = \"your Hauler\"               : {set Translation to \"Ihre Hauler\"}\r\n   |elif translate = \"your Imperial Clipper\"     : {set Translation to \"Ihr Imperrriall Clipper\"}\r\n   |elif translate = \"your Imperial Courier\"     : {set Translation to \"Ihr Imperrriall Courier\"}\r\n   |elif translate = \"your Imperial Cutter\"      : {set Translation to \"Ihr Imperrriall Cutter\"}\r\n   |elif translate = \"your Imperial Eagle\"       : {set Translation to \"Ihr Imperrriall Eagle\"}\r\n   |elif translate = \"your Keelback\"             : {set Translation to \"Ihr Kiel bäekh\"}\r\n   |elif translate = \"your Krait Mark 2\"         : {set Translation to \"Ihre Krait Mark 2\"}\r\n   |elif translate = \"your Orca\"                 : {set Translation to \"Ihr Orka\"}\r\n   |elif translate = \"your Python\"               : {set Translation to \"Ihr Python\"}\r\n   |elif translate = \"your Sidewinder\"           : {set Translation to \"Ihre Side wainder\"}\r\n   |elif translate = \"your Type-6 Transporter\"   : {set Translation to \"Ihr Thaip six Transporter\"}\r\n   |elif translate = \"your Type-7 Transporter\"   : {set Translation to \"Ihr Thaip seven Transporter\"}\r\n   |elif translate = \"your Type-9 Heavy\"         : {set Translation to \"Ihr Thaip nine Heavy\"}\r\n   |elif translate = \"your Viper Mk III\"         : {set Translation to \"Ihre Waiper\"}\r\n   |elif translate = \"your viper Mark 3\"         : {set Translation to \"Ihre Waiper\"}\r\n   |elif translate = \"your Viper Mk IV\"          : {set Translation to \"Ihre Waiper Mark Four\"}\r\n   |elif translate = \"your Vulture\"              : {set Translation to \"Ihr Voltscha\"}\r\n   }\r\n}\r\n{if Translation: {Translation} |else: {translate}}",
      "name": "Translate Ship Names",
      "description": "übersetzt die englischen Schiffsnamen ins Deutsche (alte Version)",
      "default": false,
      "defaultValue": null
    },
    "Translate Signal": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if translate = \"Anomaly\"\t\t\t\t\t\t\t\t\t\t: Anomalie\r\n|elif translate = \"Anomalie\"\t\t\t\t\t\t\t\t\t: {translate}\r\n|elif translate = \"AX Conflict Zone\"\t\t\t\t\t\t\t:\r\n|elif translate = \"AX Konfliktzone\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Bekannte Navigationsboje\"\t\t\t\t\t:\r\n|elif translate = \"Capitol Ship\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Ceremonial Comms\"\t\t\t\t\t\t\t:\r\n|elif translate = \"Combat Aftermath\"\t\t\t\t\t\t\t:\r\n|elif translate = \"Compromised Nav Beacon\"\t\t\t\t\t\t:\r\n|elif translate = \"Degraded Emissions\"\t\t\t\t\t\t\t:\r\n|elif translate = \"Degradierte Emissionen\"\t\t\t\t\t\t:\r\n|elif translate = \"Distress Call\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Encoded Emissions\"\t\t\t\t\t\t\t:\r\n|elif translate = \"Großkampfschiff\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Zeremonielle Kommunikation\"\t\t\t\t\t:\r\n|elif translate = \"Kampffolgen\"\t\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Konvoi-Auflösungsmuster\"\t\t\t\t\t\t:\r\n|elif translate = \"Notruf\"\t\t\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Verschlüsselte Emissionen\"\t\t\t\t\t:\r\n|elif translate = \"Hazardous Resource Extraction Site\"\t\t\t:\r\n|elif translate = \"Rohstoffabbau-Standort [Gefährlich]\"\t\t\t:\r\n|elif translate = \"Rohstoff-Abbau-Standort\"\t\t\t\t\t\t:\r\n|elif translate = \"High Grade Emissions\"\t\t\t\t\t\t:\r\n|elif translate = \"Hochgradige Emissionen\"\t\t\t\t\t\t:\r\n|elif translate = \"High Intensity Combat Zone\"\t\t\t\t\t:\r\n|elif translate = \"Kampfbereich [Hohe Intensität]\"\t\t\t\t:\r\n|elif translate = \"High Intensity Resource Extraction Site\"\t\t:\r\n|elif translate = \"Rohstoffabbau-Standort [Hoch]\"\t\t\t\t:\r\n|elif translate = \"Listening Post\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Horchposten\"\t\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Low Intensity Combat Zone\"\t\t\t\t\t:\r\n|elif translate = \"Kampfbereich [Geringe Intensität]\"\t\t\t:\r\n|elif translate = \"Low Intensity Resource Extraction Site\"\t\t:\r\n|elif translate = \"Rohstoffabbau-Standort [Gering]\"\t\t\t\t:\r\n|elif translate = \"Medium Intensity Combat Zone\"\t\t\t\t:\r\n|elif translate = \"Kampfbereich [Mittlere Intensität]\"\t\t\t:\r\n|elif translate = \"Mission Target\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Missionsziel\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Nav Beacon\"\t\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Navigationsboje\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Non-Human Signal Source\"\t\t\t\t\t\t:\r\n|elif translate = \"Nichtmenschliche Signalquelle\"\t\t\t\t:\r\n|elif translate = \"Notable Stellar Phenomena\"\t\t\t\t\t:\r\n|elif translate = \"Bemerkenswerte Sternenphänomene\"\t\t\t\t:\r\n|elif translate = \"Resource Extraction Site\"\t\t\t\t\t:\r\n|elif translate = \"Rohstoff-Abbau-Standort\"\t\t\t\t\t\t:\r\n|elif translate = \"Trading Beacon\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Handelssignal\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Unidentified Signal Source\"\t\t\t\t\t:\r\n|elif translate = \"Unidentifizierte Signalquelle\"\t\t\t\t:\r\n|elif translate = \"Unbekannte Signalquelle\"\t\t\t\t\t\t:\r\n|elif translate = \"Unregistered Comms Beacon\"\t\t\t\t\t:\r\n|elif translate = \"Unbekannte Kommunikationsboje\"\t\t\t\t:\r\n|elif translate = \"Weapons Fire\"\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Waffenfeuer\"\t\t\t\t\t\t\t\t\t:\r\n|elif translate = \"Gefährdungsnavigationssignal\"\t\t\t\t:\r\n|else\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:",
      "name": "Translate Signal",
      "description": "Übersetzungen / Sprachanpassungen der Signale",
      "default": false,
      "defaultValue": null
    },
    "Under attack": {
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": null,
      "name": "Under attack",
      "description": "Triggered when under fire (same time as the Under Attack voice message)",
      "default": true,
      "defaultValue": null
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Undocked\")}\r\n\r\n{set stationstyp to station.model}\r\n{SetState(\"typ_station\",station.model)}\r\n\r\n{  if stationstyp = \"Außenposten\"\t\t\t\t\t\t: {SetState(\"außenposten\",true)}\r\n|elif stationstyp = \"Planetarer Außenposten\"\t\t\t: {SetState(\"planetarer_außenposten\",true)}\r\n|elif stationstyp = \"Orbis Sternenhafen\"\t\t\t\t: {SetState(\"orbis_sternenhafen\",true)}\r\n|elif stationstyp = \"Coriolis Sternenhafen\"\t\t\t\t: {SetState(\"coriolis_sternenhafen\",true)}\r\n|elif stationstyp = \"Ocellus Sternenhafen\"\t\t\t\t: {SetState(\"ocellus_sternenhafen\",true)}\r\n|elif stationstyp = \"Bernal Sternenhafen\"\t\t\t\t: {SetState(\"bernal_sternenhafen\",true)}\r\n|elif stationstyp = \"Asteroidenbasis\"\t\t\t\t\t: {SetState(\"asteroidenbasis\",true)}\r\n|elif stationstyp = \"Raumhafen\"\t\t\t\t\t\t\t: {SetState(\"raumhafen\",true)}\r\n|elif stationstyp = \"Bodenstation\"\t\t\t\t\t\t: {SetState(\"bodenstation\",true)}\r\n|elif stationstyp = \"Carrier\"\t\t\t\t\t\t\t: {SetState(\"fleetcarrier\",true)}\r\n|elif stationstyp = \"Wissenschaftlicher Außenposten\"\t: {SetState(\"wissensch_außenposten\")}\r\n|elif stationstyp = \"Ziviles Megaschiff\"\t\t\t\t: {SetState(\"ziviles_megaschiff\")}\r\n|elif stationstyp = \"Unbekannte Station\"\t\t\t\t: {SetState(\"unbekannte_station\")}\r\n|elif stationstyp = \"Megaschiff\"\t\t\t\t\t\t: {SetState(\"megaschiff\")}\r\n|else:\r\n}\r\n{_ Test für VA, in welcher Station bin ich gerade _}\r\n\r\n{Pause(7000)}\r\n\r\n{OneOf(\"Kontrolle vollständig wiederhergestellt\", \"Andockklammern gelöst\", \"Abkopplung vom lokalen Netzwerk\")}.\r\n\r\n{set ammocheck to F(\"Ammo check\")}\r\n{set limpetcheck to F(\"Limpet check\")}\r\n\r\n{if ammocheck:\r\n    {Pause(1000)}\r\n    {ammocheck}\r\n}\r\n\r\n{if limpetcheck:\r\n    {Pause(500)}\r\n    {limpetcheck}\r\n}\r\n\r\n{_ Ship model, Fighter and SRV Check _}\r\n{_ F(\"Hangar check\")}\r\n\r\n{Pause(500)}\r\n\r\n{_ F(\"Crew assigned\")}\r\n{_ F(\"Launchbay report\")}\r\n\r\n{_\r\n- station \tThe station from which the commander has undocked\r\n- marketId \tMarket ID of the station from which the commander has undocked\r\n_}\r\n",
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost",
      "default": false,
      "defaultValue": "{OneOf(\"Full control re-established\", \"Docking clamps free\", \"Disengaged from local networks\")}.\r\n\r\n{set limpetcheck to F(\"Limpet check\")}\r\n\r\n{if limpetcheck:\r\n    {Pause(5000)}\r\n    {limpetcheck}\r\n}\r\n"
    },
    "VA initialized": {
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{Log(\"Event: VA initialisiert\")}\r\n\r\n{Transmit(\"EDDI Plugin\")}\r\n{Transmit(OneOf('initialisiert', 'bereit', 'geladen', 'aktiviert'))}\r\n\r\n\r\n",
      "name": "VA initialized",
      "description": "Triggered when the VoiceAttack plugin is initialized",
      "default": false,
      "defaultValue": null
    },
    "Vehicle destroyed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Log(\"EDDI EVENT: Vehicle destroyed\")}\r\n\r\n{Pause(2000)}\r\n\r\n{OneOf(\"Neural link\", \"Link\", \"ab link\", \"Verbindung\")} {OneOf(\"zerstört\", \"verloren\")}.\r\n\r\n{_\r\n- vehicle \tThe vehicle that was destroyed (e.g. fighter or srv)\r\n- id \t\tThe vehicle's id\r\n_}",
      "name": "Vehicle destroyed",
      "description": "Triggered when your vehicle is destroyed",
      "default": false,
      "defaultValue": "{Pause(2000)}\r\n{OneOf(\"Neural link\", \"Link\", \"Uplink\")} {OneOf(\"terminated\", \"disengaged\")}."
    },
    "ZeroTrim": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Remove trailing zeros from numbers}\r\n\r\n{set x to slice(trim,len(trim)-1,1)}\r\n\r\n{while x = \"0\":\r\n   {set trim to slice(trim,0,len(trim)-1)}\r\n   {set x to slice(trim,len(trim)-1,1)}\r\n}\r\n\r\n{if x = \".\":\r\n   {set trim to slice(trim,0,len(trim)-1)}\r\n}\r\n",
      "name": "ZeroTrim",
      "description": "Überflüssige 0 entfernen",
      "default": false,
      "defaultValue": null
    }
  }
}